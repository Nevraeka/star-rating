(function(){ var curSystem = typeof System != 'undefined' ? System : undefined;
(function(global) {
  'use strict';
  if (global.$traceurRuntime) {
    return;
  }
  function setupGlobals(global) {
    global.Reflect = global.Reflect || {};
    global.Reflect.global = global.Reflect.global || global;
  }
  setupGlobals(global);
  var typeOf = function(x) {
    return typeof x;
  };
  global.$traceurRuntime = {
    options: {},
    setupGlobals: setupGlobals,
    typeof: typeOf
  };
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function() {
  function buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (opt_scheme) {
      out.push(opt_scheme, ':');
    }
    if (opt_domain) {
      out.push('//');
      if (opt_userInfo) {
        out.push(opt_userInfo, '@');
      }
      out.push(opt_domain);
      if (opt_port) {
        out.push(':', opt_port);
      }
    }
    if (opt_path) {
      out.push(opt_path);
    }
    if (opt_queryData) {
      out.push('?', opt_queryData);
    }
    if (opt_fragment) {
      out.push('#', opt_fragment);
    }
    return out.join('');
  }
  var splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var ComponentIndex = {
    SCHEME: 1,
    USER_INFO: 2,
    DOMAIN: 3,
    PORT: 4,
    PATH: 5,
    QUERY_DATA: 6,
    FRAGMENT: 7
  };
  function split(uri) {
    return (uri.match(splitRe));
  }
  function removeDotSegments(path) {
    if (path === '/')
      return '/';
    var leadingSlash = path[0] === '/' ? '/' : '';
    var trailingSlash = path.slice(-1) === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length)
            out.pop();
          else
            up++;
          break;
        default:
          out.push(segment);
      }
    }
    if (!leadingSlash) {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function joinAndCanonicalizePath(parts) {
    var path = parts[ComponentIndex.PATH] || '';
    path = removeDotSegments(path);
    parts[ComponentIndex.PATH] = path;
    return buildFromEncodedParts(parts[ComponentIndex.SCHEME], parts[ComponentIndex.USER_INFO], parts[ComponentIndex.DOMAIN], parts[ComponentIndex.PORT], parts[ComponentIndex.PATH], parts[ComponentIndex.QUERY_DATA], parts[ComponentIndex.FRAGMENT]);
  }
  function canonicalizeUrl(url) {
    var parts = split(url);
    return joinAndCanonicalizePath(parts);
  }
  function resolveUrl(base, url) {
    var parts = split(url);
    var baseParts = split(base);
    if (parts[ComponentIndex.SCHEME]) {
      return joinAndCanonicalizePath(parts);
    } else {
      parts[ComponentIndex.SCHEME] = baseParts[ComponentIndex.SCHEME];
    }
    for (var i = ComponentIndex.SCHEME; i <= ComponentIndex.PORT; i++) {
      if (!parts[i]) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[ComponentIndex.PATH][0] == '/') {
      return joinAndCanonicalizePath(parts);
    }
    var path = baseParts[ComponentIndex.PATH];
    var index = path.lastIndexOf('/');
    path = path.slice(0, index + 1) + parts[ComponentIndex.PATH];
    parts[ComponentIndex.PATH] = path;
    return joinAndCanonicalizePath(parts);
  }
  function isAbsolute(name) {
    if (!name)
      return false;
    if (name[0] === '/')
      return true;
    var parts = split(name);
    if (parts[ComponentIndex.SCHEME])
      return true;
    return false;
  }
  $traceurRuntime.canonicalizeUrl = canonicalizeUrl;
  $traceurRuntime.isAbsolute = isAbsolute;
  $traceurRuntime.removeDotSegments = removeDotSegments;
  $traceurRuntime.resolveUrl = resolveUrl;
})();
(function(global) {
  'use strict';
  var $__3 = $traceurRuntime,
      canonicalizeUrl = $__3.canonicalizeUrl,
      resolveUrl = $__3.resolveUrl,
      isAbsolute = $__3.isAbsolute;
  var moduleInstantiators = Object.create(null);
  var baseURL;
  if (global.location && global.location.href)
    baseURL = resolveUrl(global.location.href, './');
  else
    baseURL = '';
  function UncoatedModuleEntry(url, uncoatedModule) {
    this.url = url;
    this.value_ = uncoatedModule;
  }
  function ModuleEvaluationError(erroneousModuleName, cause) {
    this.message = this.constructor.name + ': ' + this.stripCause(cause) + ' in ' + erroneousModuleName;
    if (!(cause instanceof ModuleEvaluationError) && cause.stack)
      this.stack = this.stripStack(cause.stack);
    else
      this.stack = '';
  }
  ModuleEvaluationError.prototype = Object.create(Error.prototype);
  ModuleEvaluationError.prototype.constructor = ModuleEvaluationError;
  ModuleEvaluationError.prototype.stripError = function(message) {
    return message.replace(/.*Error:/, this.constructor.name + ':');
  };
  ModuleEvaluationError.prototype.stripCause = function(cause) {
    if (!cause)
      return '';
    if (!cause.message)
      return cause + '';
    return this.stripError(cause.message);
  };
  ModuleEvaluationError.prototype.loadedBy = function(moduleName) {
    this.stack += '\n loaded by ' + moduleName;
  };
  ModuleEvaluationError.prototype.stripStack = function(causeStack) {
    var stack = [];
    causeStack.split('\n').some(function(frame) {
      if (/UncoatedModuleInstantiator/.test(frame))
        return true;
      stack.push(frame);
    });
    stack[0] = this.stripError(stack[0]);
    return stack.join('\n');
  };
  function beforeLines(lines, number) {
    var result = [];
    var first = number - 3;
    if (first < 0)
      first = 0;
    for (var i = first; i < number; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function afterLines(lines, number) {
    var last = number + 1;
    if (last > lines.length - 1)
      last = lines.length - 1;
    var result = [];
    for (var i = number; i <= last; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function columnSpacing(columns) {
    var result = '';
    for (var i = 0; i < columns - 1; i++) {
      result += '-';
    }
    return result;
  }
  function UncoatedModuleInstantiator(url, func) {
    UncoatedModuleEntry.call(this, url, null);
    this.func = func;
  }
  UncoatedModuleInstantiator.prototype = Object.create(UncoatedModuleEntry.prototype);
  UncoatedModuleInstantiator.prototype.getUncoatedModule = function() {
    var $__2 = this;
    if (this.value_)
      return this.value_;
    try {
      var relativeRequire;
      if (typeof $traceurRuntime !== undefined && $traceurRuntime.require) {
        relativeRequire = $traceurRuntime.require.bind(null, this.url);
      }
      return this.value_ = this.func.call(global, relativeRequire);
    } catch (ex) {
      if (ex instanceof ModuleEvaluationError) {
        ex.loadedBy(this.url);
        throw ex;
      }
      if (ex.stack) {
        var lines = this.func.toString().split('\n');
        var evaled = [];
        ex.stack.split('\n').some(function(frame, index) {
          if (frame.indexOf('UncoatedModuleInstantiator.getUncoatedModule') > 0)
            return true;
          var m = /(at\s[^\s]*\s).*>:(\d*):(\d*)\)/.exec(frame);
          if (m) {
            var line = parseInt(m[2], 10);
            evaled = evaled.concat(beforeLines(lines, line));
            if (index === 1) {
              evaled.push(columnSpacing(m[3]) + '^ ' + $__2.url);
            } else {
              evaled.push(columnSpacing(m[3]) + '^');
            }
            evaled = evaled.concat(afterLines(lines, line));
            evaled.push('= = = = = = = = =');
          } else {
            evaled.push(frame);
          }
        });
        ex.stack = evaled.join('\n');
      }
      throw new ModuleEvaluationError(this.url, ex);
    }
  };
  function getUncoatedModuleInstantiator(name) {
    if (!name)
      return;
    var url = ModuleStore.normalize(name);
    return moduleInstantiators[url];
  }
  ;
  var moduleInstances = Object.create(null);
  var liveModuleSentinel = {};
  function Module(uncoatedModule) {
    var isLive = arguments[1];
    var coatedModule = Object.create(null);
    Object.getOwnPropertyNames(uncoatedModule).forEach(function(name) {
      var getter,
          value;
      if (isLive === liveModuleSentinel) {
        var descr = Object.getOwnPropertyDescriptor(uncoatedModule, name);
        if (descr.get)
          getter = descr.get;
      }
      if (!getter) {
        value = uncoatedModule[name];
        getter = function() {
          return value;
        };
      }
      Object.defineProperty(coatedModule, name, {
        get: getter,
        enumerable: true
      });
    });
    Object.preventExtensions(coatedModule);
    return coatedModule;
  }
  var ModuleStore = {
    normalize: function(name, refererName, refererAddress) {
      if (typeof name !== 'string')
        throw new TypeError('module name must be a string, not ' + typeof name);
      if (isAbsolute(name))
        return canonicalizeUrl(name);
      if (/[^\.]\/\.\.\//.test(name)) {
        throw new Error('module name embeds /../: ' + name);
      }
      if (name[0] === '.' && refererName)
        return resolveUrl(refererName, name);
      return canonicalizeUrl(name);
    },
    get: function(normalizedName) {
      var m = getUncoatedModuleInstantiator(normalizedName);
      if (!m)
        return undefined;
      var moduleInstance = moduleInstances[m.url];
      if (moduleInstance)
        return moduleInstance;
      moduleInstance = Module(m.getUncoatedModule(), liveModuleSentinel);
      return moduleInstances[m.url] = moduleInstance;
    },
    set: function(normalizedName, module) {
      normalizedName = String(normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, function() {
        return module;
      });
      moduleInstances[normalizedName] = module;
    },
    get baseURL() {
      return baseURL;
    },
    set baseURL(v) {
      baseURL = String(v);
    },
    registerModule: function(name, deps, func) {
      var normalizedName = ModuleStore.normalize(name);
      if (moduleInstantiators[normalizedName])
        throw new Error('duplicate module named ' + normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, func);
    },
    bundleStore: Object.create(null),
    register: function(name, deps, func) {
      if (!deps || !deps.length && !func.length) {
        this.registerModule(name, deps, func);
      } else {
        this.bundleStore[name] = {
          deps: deps,
          execute: function() {
            var $__2 = arguments;
            var depMap = {};
            deps.forEach(function(dep, index) {
              return depMap[dep] = $__2[index];
            });
            var registryEntry = func.call(this, depMap);
            registryEntry.execute.call(this);
            return registryEntry.exports;
          }
        };
      }
    },
    getAnonymousModule: function(func) {
      return new Module(func.call(global), liveModuleSentinel);
    }
  };
  var moduleStoreModule = new Module({ModuleStore: ModuleStore});
  ModuleStore.set('@traceur/src/runtime/ModuleStore.js', moduleStoreModule);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
  };
  $traceurRuntime.ModuleStore = ModuleStore;
  $traceurRuntime.registerModule = ModuleStore.registerModule.bind(ModuleStore);
  $traceurRuntime.getModule = ModuleStore.get;
  $traceurRuntime.setModule = ModuleStore.set;
  $traceurRuntime.normalizeModuleName = ModuleStore.normalize;
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/new-unique-string.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/new-unique-string.js";
  var random = Math.random;
  var counter = Date.now() % 1e9;
  function newUniqueString() {
    return '__$' + (random() * 1e9 >>> 1) + '$' + ++counter + '$__';
  }
  var $__default = newUniqueString;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/has-native-symbols.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/has-native-symbols.js";
  var v = !!Object.getOwnPropertySymbols && typeof Symbol === 'function';
  function hasNativeSymbol() {
    return v;
  }
  var $__default = hasNativeSymbol;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/symbols.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/symbols.js";
  var newUniqueString = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./new-unique-string.js", "traceur-runtime@0.0.102/src/runtime/symbols.js")).default;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./has-native-symbols.js", "traceur-runtime@0.0.102/src/runtime/symbols.js")).default;
  var $create = Object.create;
  var $defineProperty = Object.defineProperty;
  var $freeze = Object.freeze;
  var $getOwnPropertyNames = Object.getOwnPropertyNames;
  var $keys = Object.keys;
  var $TypeError = TypeError;
  function nonEnum(value) {
    return {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    };
  }
  var symbolInternalProperty = newUniqueString();
  var symbolDescriptionProperty = newUniqueString();
  var symbolDataProperty = newUniqueString();
  var symbolValues = $create(null);
  var SymbolImpl = function Symbol(description) {
    var value = new SymbolValue(description);
    if (!(this instanceof SymbolImpl))
      return value;
    throw new $TypeError('Symbol cannot be new\'ed');
  };
  $defineProperty(SymbolImpl.prototype, 'constructor', nonEnum(SymbolImpl));
  $defineProperty(SymbolImpl.prototype, 'toString', nonEnum(function() {
    var symbolValue = this[symbolDataProperty];
    return symbolValue[symbolInternalProperty];
  }));
  $defineProperty(SymbolImpl.prototype, 'valueOf', nonEnum(function() {
    var symbolValue = this[symbolDataProperty];
    if (!symbolValue)
      throw $TypeError('Conversion from symbol to string');
    return symbolValue[symbolInternalProperty];
  }));
  function SymbolValue(description) {
    var key = newUniqueString();
    $defineProperty(this, symbolDataProperty, {value: this});
    $defineProperty(this, symbolInternalProperty, {value: key});
    $defineProperty(this, symbolDescriptionProperty, {value: description});
    $freeze(this);
    symbolValues[key] = this;
  }
  $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(SymbolImpl));
  $defineProperty(SymbolValue.prototype, 'toString', {
    value: SymbolImpl.prototype.toString,
    enumerable: false
  });
  $defineProperty(SymbolValue.prototype, 'valueOf', {
    value: SymbolImpl.prototype.valueOf,
    enumerable: false
  });
  $freeze(SymbolValue.prototype);
  function isSymbolString(s) {
    return symbolValues[s];
  }
  function removeSymbolKeys(array) {
    var rv = [];
    for (var i = 0; i < array.length; i++) {
      if (!isSymbolString(array[i])) {
        rv.push(array[i]);
      }
    }
    return rv;
  }
  function getOwnPropertyNames(object) {
    return removeSymbolKeys($getOwnPropertyNames(object));
  }
  function keys(object) {
    return removeSymbolKeys($keys(object));
  }
  function getOwnPropertySymbols(object) {
    var rv = [];
    var names = $getOwnPropertyNames(object);
    for (var i = 0; i < names.length; i++) {
      var symbol = symbolValues[names[i]];
      if (symbol) {
        rv.push(symbol);
      }
    }
    return rv;
  }
  function polyfillSymbol(global) {
    var Object = global.Object;
    if (!hasNativeSymbol()) {
      global.Symbol = SymbolImpl;
      Object.getOwnPropertyNames = getOwnPropertyNames;
      Object.keys = keys;
      $defineProperty(Object, 'getOwnPropertySymbols', nonEnum(getOwnPropertySymbols));
    }
    if (!global.Symbol.iterator) {
      global.Symbol.iterator = global.Symbol('Symbol.iterator');
    }
    if (!global.Symbol.observer) {
      global.Symbol.observer = global.Symbol('Symbol.observer');
    }
  }
  var g = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this;
  polyfillSymbol(g);
  var typeOf = hasNativeSymbol() ? function(x) {
    return typeof x;
  } : function(x) {
    return x instanceof SymbolValue ? 'symbol' : typeof x;
  };
  $traceurRuntime.typeof = typeOf;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/classes.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/classes.js";
  var $Object = Object;
  var $TypeError = TypeError;
  var $__1 = Object,
      create = $__1.create,
      defineProperties = $__1.defineProperties,
      defineProperty = $__1.defineProperty,
      getOwnPropertyDescriptor = $__1.getOwnPropertyDescriptor,
      getOwnPropertyNames = $__1.getOwnPropertyNames,
      getOwnPropertySymbols = $__1.getOwnPropertySymbols,
      getPrototypeOf = $__1.getPrototypeOf;
  function superDescriptor(homeObject, name) {
    var proto = getPrototypeOf(homeObject);
    do {
      var result = getOwnPropertyDescriptor(proto, name);
      if (result)
        return result;
      proto = getPrototypeOf(proto);
    } while (proto);
    return undefined;
  }
  function superConstructor(ctor) {
    return ctor.__proto__;
  }
  function superGet(self, homeObject, name) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor) {
      var value = descriptor.value;
      if (value)
        return value;
      if (!descriptor.get)
        return value;
      return descriptor.get.call(self);
    }
    return undefined;
  }
  function superSet(self, homeObject, name, value) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor && descriptor.set) {
      descriptor.set.call(self, value);
      return value;
    }
    throw $TypeError(("super has no setter '" + name + "'."));
  }
  function forEachPropertyKey(object, f) {
    getOwnPropertyNames(object).forEach(f);
    if (getOwnPropertySymbols) {
      getOwnPropertySymbols(object).forEach(f);
    }
  }
  function getDescriptors(object) {
    var descriptors = {};
    forEachPropertyKey(object, function(key) {
      descriptors[key] = getOwnPropertyDescriptor(object, key);
      descriptors[key].enumerable = false;
    });
    return descriptors;
  }
  var nonEnum = {enumerable: false};
  function makePropertiesNonEnumerable(object) {
    forEachPropertyKey(object, function(key) {
      defineProperty(object, key, nonEnum);
    });
  }
  function createClass(ctor, object, staticObject, superClass) {
    defineProperty(object, 'constructor', {
      value: ctor,
      configurable: true,
      enumerable: false,
      writable: true
    });
    if (arguments.length > 3) {
      if (typeof superClass === 'function')
        ctor.__proto__ = superClass;
      ctor.prototype = create(getProtoParent(superClass), getDescriptors(object));
    } else {
      makePropertiesNonEnumerable(object);
      ctor.prototype = object;
    }
    defineProperty(ctor, 'prototype', {
      configurable: false,
      writable: false
    });
    return defineProperties(ctor, getDescriptors(staticObject));
  }
  function getProtoParent(superClass) {
    if (typeof superClass === 'function') {
      var prototype = superClass.prototype;
      if ($Object(prototype) === prototype || prototype === null)
        return superClass.prototype;
      throw new $TypeError('super prototype must be an Object or null');
    }
    if (superClass === null)
      return null;
    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
  }
  $traceurRuntime.createClass = createClass;
  $traceurRuntime.superConstructor = superConstructor;
  $traceurRuntime.superGet = superGet;
  $traceurRuntime.superSet = superSet;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/exportStar.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/exportStar.js";
  var $__1 = Object,
      defineProperty = $__1.defineProperty,
      getOwnPropertyNames = $__1.getOwnPropertyNames;
  function exportStar(object) {
    var $__2 = arguments,
        $__3 = function(i) {
          var mod = $__2[i];
          var names = getOwnPropertyNames(mod);
          var $__5 = function(j) {
            var name = names[j];
            if (name === '__esModule' || name === 'default') {
              return 0;
            }
            defineProperty(object, name, {
              get: function() {
                return mod[name];
              },
              enumerable: true
            });
          },
              $__6;
          $__4: for (var j = 0; j < names.length; j++) {
            $__6 = $__5(j);
            switch ($__6) {
              case 0:
                continue $__4;
            }
          }
        };
    for (var i = 1; i < arguments.length; i++) {
      $__3(i);
    }
    return object;
  }
  $traceurRuntime.exportStar = exportStar;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/private-symbol.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/private-symbol.js";
  var newUniqueString = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./new-unique-string.js", "traceur-runtime@0.0.102/src/runtime/private-symbol.js")).default;
  var $Symbol = typeof Symbol === 'function' ? Symbol : undefined;
  var $getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var $create = Object.create;
  var privateNames = $create(null);
  function isPrivateSymbol(s) {
    return privateNames[s];
  }
  ;
  function createPrivateSymbol() {
    var s = ($Symbol || newUniqueString)();
    privateNames[s] = true;
    return s;
  }
  ;
  function hasPrivate(obj, sym) {
    return hasOwnProperty.call(obj, sym);
  }
  ;
  function deletePrivate(obj, sym) {
    if (!hasPrivate(obj, sym)) {
      return false;
    }
    delete obj[sym];
    return true;
  }
  ;
  function setPrivate(obj, sym, val) {
    obj[sym] = val;
  }
  ;
  function getPrivate(obj, sym) {
    var val = obj[sym];
    if (val === undefined)
      return undefined;
    return hasOwnProperty.call(obj, sym) ? val : undefined;
  }
  ;
  function init() {
    if ($getOwnPropertySymbols) {
      Object.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
        var rv = [];
        var symbols = $getOwnPropertySymbols(object);
        for (var i = 0; i < symbols.length; i++) {
          var symbol = symbols[i];
          if (!isPrivateSymbol(symbol)) {
            rv.push(symbol);
          }
        }
        return rv;
      };
    }
  }
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    },
    get init() {
      return init;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/private-weak-map.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/private-weak-map.js";
  var $WeakMap = typeof WeakMap === 'function' ? WeakMap : undefined;
  function isPrivateSymbol(s) {
    return false;
  }
  function createPrivateSymbol() {
    return new $WeakMap();
  }
  function hasPrivate(obj, sym) {
    return sym.has(obj);
  }
  function deletePrivate(obj, sym) {
    return sym.delete(obj);
  }
  function setPrivate(obj, sym, val) {
    sym.set(obj, val);
  }
  function getPrivate(obj, sym) {
    return sym.get(obj);
  }
  function init() {}
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    },
    get init() {
      return init;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/private.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/private.js";
  var sym = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private-symbol.js", "traceur-runtime@0.0.102/src/runtime/private.js"));
  var weak = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private-weak-map.js", "traceur-runtime@0.0.102/src/runtime/private.js"));
  var hasWeakMap = typeof WeakMap === 'function';
  var m = hasWeakMap ? weak : sym;
  var isPrivateSymbol = m.isPrivateSymbol;
  var createPrivateSymbol = m.createPrivateSymbol;
  var hasPrivate = m.hasPrivate;
  var deletePrivate = m.deletePrivate;
  var setPrivate = m.setPrivate;
  var getPrivate = m.getPrivate;
  m.init();
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/properTailCalls.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/properTailCalls.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private.js", "traceur-runtime@0.0.102/src/runtime/properTailCalls.js")),
      getPrivate = $__0.getPrivate,
      setPrivate = $__0.setPrivate,
      createPrivateSymbol = $__0.createPrivateSymbol;
  var $apply = Function.prototype.call.bind(Function.prototype.apply);
  var CONTINUATION_TYPE = Object.create(null);
  var isTailRecursiveName = null;
  function createContinuation(operand, thisArg, argsArray) {
    return [CONTINUATION_TYPE, operand, thisArg, argsArray];
  }
  function isContinuation(object) {
    return object && object[0] === CONTINUATION_TYPE;
  }
  function $bind(operand, thisArg, args) {
    var argArray = [thisArg];
    for (var i = 0; i < args.length; i++) {
      argArray[i + 1] = args[i];
    }
    var func = $apply(Function.prototype.bind, operand, argArray);
    return func;
  }
  function $construct(func, argArray) {
    var object = new ($bind(func, null, argArray));
    return object;
  }
  function isTailRecursive(func) {
    return !!getPrivate(func, isTailRecursiveName);
  }
  function tailCall(func, thisArg, argArray) {
    var continuation = argArray[0];
    if (isContinuation(continuation)) {
      continuation = $apply(func, thisArg, continuation[3]);
      return continuation;
    }
    continuation = createContinuation(func, thisArg, argArray);
    while (true) {
      if (isTailRecursive(func)) {
        continuation = $apply(func, continuation[2], [continuation]);
      } else {
        continuation = $apply(func, continuation[2], continuation[3]);
      }
      if (!isContinuation(continuation)) {
        return continuation;
      }
      func = continuation[1];
    }
  }
  function construct() {
    var object;
    if (isTailRecursive(this)) {
      object = $construct(this, [createContinuation(null, null, arguments)]);
    } else {
      object = $construct(this, arguments);
    }
    return object;
  }
  function setupProperTailCalls() {
    isTailRecursiveName = createPrivateSymbol();
    Function.prototype.call = initTailRecursiveFunction(function call(thisArg) {
      var result = tailCall(function(thisArg) {
        var argArray = [];
        for (var i = 1; i < arguments.length; ++i) {
          argArray[i - 1] = arguments[i];
        }
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
    Function.prototype.apply = initTailRecursiveFunction(function apply(thisArg, argArray) {
      var result = tailCall(function(thisArg, argArray) {
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
  }
  function initTailRecursiveFunction(func) {
    if (isTailRecursiveName === null) {
      setupProperTailCalls();
    }
    setPrivate(func, isTailRecursiveName, true);
    return func;
  }
  $traceurRuntime.initTailRecursiveFunction = initTailRecursiveFunction;
  $traceurRuntime.call = tailCall;
  $traceurRuntime.continuation = createContinuation;
  $traceurRuntime.construct = construct;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/relativeRequire.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/relativeRequire.js";
  var path;
  function relativeRequire(callerPath, requiredPath) {
    path = path || typeof require !== 'undefined' && require('path');
    function isDirectory(path) {
      return path.slice(-1) === '/';
    }
    function isAbsolute(path) {
      return path[0] === '/';
    }
    function isRelative(path) {
      return path[0] === '.';
    }
    if (isDirectory(requiredPath) || isAbsolute(requiredPath))
      return;
    return isRelative(requiredPath) ? require(path.resolve(path.dirname(callerPath), requiredPath)) : require(requiredPath);
  }
  $traceurRuntime.require = relativeRequire;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/checkObjectCoercible.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/checkObjectCoercible.js";
  var $TypeError = TypeError;
  function checkObjectCoercible(v) {
    if (v === null || v === undefined) {
      throw new $TypeError('Value cannot be converted to an Object');
    }
    return v;
  }
  var $__default = checkObjectCoercible;
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/spread.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/spread.js";
  var checkObjectCoercible = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./checkObjectCoercible.js", "traceur-runtime@0.0.102/src/runtime/spread.js")).default;
  function spread() {
    var rv = [],
        j = 0,
        iterResult;
    for (var i = 0; i < arguments.length; i++) {
      var valueToSpread = checkObjectCoercible(arguments[i]);
      if (typeof valueToSpread[Symbol.iterator] !== 'function') {
        throw new TypeError('Cannot spread non-iterable object.');
      }
      var iter = valueToSpread[Symbol.iterator]();
      while (!(iterResult = iter.next()).done) {
        rv[j++] = iterResult.value;
      }
    }
    return rv;
  }
  $traceurRuntime.spread = spread;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/destructuring.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/destructuring.js";
  function iteratorToArray(iter) {
    var rv = [];
    var i = 0;
    var tmp;
    while (!(tmp = iter.next()).done) {
      rv[i++] = tmp.value;
    }
    return rv;
  }
  $traceurRuntime.iteratorToArray = iteratorToArray;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/async.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/async.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private.js", "traceur-runtime@0.0.102/src/runtime/async.js")),
      createPrivateSymbol = $__0.createPrivateSymbol,
      getPrivate = $__0.getPrivate,
      setPrivate = $__0.setPrivate;
  var $__12 = Object,
      create = $__12.create,
      defineProperty = $__12.defineProperty;
  var observeName = createPrivateSymbol();
  function AsyncGeneratorFunction() {}
  function AsyncGeneratorFunctionPrototype() {}
  AsyncGeneratorFunction.prototype = AsyncGeneratorFunctionPrototype;
  AsyncGeneratorFunctionPrototype.constructor = AsyncGeneratorFunction;
  defineProperty(AsyncGeneratorFunctionPrototype, 'constructor', {enumerable: false});
  var AsyncGeneratorContext = function() {
    function AsyncGeneratorContext(observer) {
      var $__3 = this;
      this.decoratedObserver = $traceurRuntime.createDecoratedGenerator(observer, function() {
        $__3.done = true;
      });
      this.done = false;
      this.inReturn = false;
    }
    return ($traceurRuntime.createClass)(AsyncGeneratorContext, {
      throw: function(error) {
        if (!this.inReturn) {
          throw error;
        }
      },
      yield: function(value) {
        if (this.done) {
          this.inReturn = true;
          throw undefined;
        }
        var result;
        try {
          result = this.decoratedObserver.next(value);
        } catch (e) {
          this.done = true;
          throw e;
        }
        if (result === undefined) {
          return;
        }
        if (result.done) {
          this.done = true;
          this.inReturn = true;
          throw undefined;
        }
        return result.value;
      },
      yieldFor: function(observable) {
        var ctx = this;
        return $traceurRuntime.observeForEach(observable[Symbol.observer].bind(observable), function(value) {
          if (ctx.done) {
            this.return();
            return;
          }
          var result;
          try {
            result = ctx.decoratedObserver.next(value);
          } catch (e) {
            ctx.done = true;
            throw e;
          }
          if (result === undefined) {
            return;
          }
          if (result.done) {
            ctx.done = true;
          }
          return result;
        });
      }
    }, {});
  }();
  AsyncGeneratorFunctionPrototype.prototype[Symbol.observer] = function(observer) {
    var observe = getPrivate(this, observeName);
    var ctx = new AsyncGeneratorContext(observer);
    $traceurRuntime.schedule(function() {
      return observe(ctx);
    }).then(function(value) {
      if (!ctx.done) {
        ctx.decoratedObserver.return(value);
      }
    }).catch(function(error) {
      if (!ctx.done) {
        ctx.decoratedObserver.throw(error);
      }
    });
    return ctx.decoratedObserver;
  };
  defineProperty(AsyncGeneratorFunctionPrototype.prototype, Symbol.observer, {enumerable: false});
  function initAsyncGeneratorFunction(functionObject) {
    functionObject.prototype = create(AsyncGeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = AsyncGeneratorFunctionPrototype;
    return functionObject;
  }
  function createAsyncGeneratorInstance(observe, functionObject) {
    for (var args = [],
        $__11 = 2; $__11 < arguments.length; $__11++)
      args[$__11 - 2] = arguments[$__11];
    var object = create(functionObject.prototype);
    setPrivate(object, observeName, observe);
    return object;
  }
  function observeForEach(observe, next) {
    return new Promise(function(resolve, reject) {
      var generator = observe({
        next: function(value) {
          return next.call(generator, value);
        },
        throw: function(error) {
          reject(error);
        },
        return: function(value) {
          resolve(value);
        }
      });
    });
  }
  function schedule(asyncF) {
    return Promise.resolve().then(asyncF);
  }
  var generator = Symbol();
  var onDone = Symbol();
  var DecoratedGenerator = function() {
    function DecoratedGenerator(_generator, _onDone) {
      this[generator] = _generator;
      this[onDone] = _onDone;
    }
    return ($traceurRuntime.createClass)(DecoratedGenerator, {
      next: function(value) {
        var result = this[generator].next(value);
        if (result !== undefined && result.done) {
          this[onDone].call(this);
        }
        return result;
      },
      throw: function(error) {
        this[onDone].call(this);
        return this[generator].throw(error);
      },
      return: function(value) {
        this[onDone].call(this);
        return this[generator].return(value);
      }
    }, {});
  }();
  function createDecoratedGenerator(generator, onDone) {
    return new DecoratedGenerator(generator, onDone);
  }
  Array.prototype[Symbol.observer] = function(observer) {
    var done = false;
    var decoratedObserver = createDecoratedGenerator(observer, function() {
      return done = true;
    });
    var $__7 = true;
    var $__8 = false;
    var $__9 = undefined;
    try {
      for (var $__5 = void 0,
          $__4 = (this)[Symbol.iterator](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
        var value = $__5.value;
        {
          decoratedObserver.next(value);
          if (done) {
            return;
          }
        }
      }
    } catch ($__10) {
      $__8 = true;
      $__9 = $__10;
    } finally {
      try {
        if (!$__7 && $__4.return != null) {
          $__4.return();
        }
      } finally {
        if ($__8) {
          throw $__9;
        }
      }
    }
    decoratedObserver.return();
    return decoratedObserver;
  };
  defineProperty(Array.prototype, Symbol.observer, {enumerable: false});
  $traceurRuntime.initAsyncGeneratorFunction = initAsyncGeneratorFunction;
  $traceurRuntime.createAsyncGeneratorInstance = createAsyncGeneratorInstance;
  $traceurRuntime.observeForEach = observeForEach;
  $traceurRuntime.schedule = schedule;
  $traceurRuntime.createDecoratedGenerator = createDecoratedGenerator;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/generators.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/generators.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private.js", "traceur-runtime@0.0.102/src/runtime/generators.js")),
      createPrivateSymbol = $__0.createPrivateSymbol,
      getPrivate = $__0.getPrivate,
      setPrivate = $__0.setPrivate;
  var $TypeError = TypeError;
  var $__2 = Object,
      create = $__2.create,
      defineProperties = $__2.defineProperties,
      defineProperty = $__2.defineProperty;
  function nonEnum(value) {
    return {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    };
  }
  var ST_NEWBORN = 0;
  var ST_EXECUTING = 1;
  var ST_SUSPENDED = 2;
  var ST_CLOSED = 3;
  var END_STATE = -2;
  var RETHROW_STATE = -3;
  function getInternalError(state) {
    return new Error('Traceur compiler bug: invalid state in state machine: ' + state);
  }
  var RETURN_SENTINEL = {};
  function GeneratorContext() {
    this.state = 0;
    this.GState = ST_NEWBORN;
    this.storedException = undefined;
    this.finallyFallThrough = undefined;
    this.sent_ = undefined;
    this.returnValue = undefined;
    this.oldReturnValue = undefined;
    this.tryStack_ = [];
  }
  GeneratorContext.prototype = {
    pushTry: function(catchState, finallyState) {
      if (finallyState !== null) {
        var finallyFallThrough = null;
        for (var i = this.tryStack_.length - 1; i >= 0; i--) {
          if (this.tryStack_[i].catch !== undefined) {
            finallyFallThrough = this.tryStack_[i].catch;
            break;
          }
        }
        if (finallyFallThrough === null)
          finallyFallThrough = RETHROW_STATE;
        this.tryStack_.push({
          finally: finallyState,
          finallyFallThrough: finallyFallThrough
        });
      }
      if (catchState !== null) {
        this.tryStack_.push({catch: catchState});
      }
    },
    popTry: function() {
      this.tryStack_.pop();
    },
    maybeUncatchable: function() {
      if (this.storedException === RETURN_SENTINEL) {
        throw RETURN_SENTINEL;
      }
    },
    get sent() {
      this.maybeThrow();
      return this.sent_;
    },
    set sent(v) {
      this.sent_ = v;
    },
    get sentIgnoreThrow() {
      return this.sent_;
    },
    maybeThrow: function() {
      if (this.action === 'throw') {
        this.action = 'next';
        throw this.sent_;
      }
    },
    end: function() {
      switch (this.state) {
        case END_STATE:
          return this;
        case RETHROW_STATE:
          throw this.storedException;
        default:
          throw getInternalError(this.state);
      }
    },
    handleException: function(ex) {
      this.GState = ST_CLOSED;
      this.state = END_STATE;
      throw ex;
    },
    wrapYieldStar: function(iterator) {
      var ctx = this;
      return {
        next: function(v) {
          return iterator.next(v);
        },
        throw: function(e) {
          var result;
          if (e === RETURN_SENTINEL) {
            if (iterator.return) {
              result = iterator.return(ctx.returnValue);
              if (!result.done) {
                ctx.returnValue = ctx.oldReturnValue;
                return result;
              }
              ctx.returnValue = result.value;
            }
            throw e;
          }
          if (iterator.throw) {
            return iterator.throw(e);
          }
          iterator.return && iterator.return();
          throw $TypeError('Inner iterator does not have a throw method');
        }
      };
    }
  };
  function nextOrThrow(ctx, moveNext, action, x) {
    switch (ctx.GState) {
      case ST_EXECUTING:
        throw new Error(("\"" + action + "\" on executing generator"));
      case ST_CLOSED:
        if (action == 'next') {
          return {
            value: undefined,
            done: true
          };
        }
        if (x === RETURN_SENTINEL) {
          return {
            value: ctx.returnValue,
            done: true
          };
        }
        throw x;
      case ST_NEWBORN:
        if (action === 'throw') {
          ctx.GState = ST_CLOSED;
          if (x === RETURN_SENTINEL) {
            return {
              value: ctx.returnValue,
              done: true
            };
          }
          throw x;
        }
        if (x !== undefined)
          throw $TypeError('Sent value to newborn generator');
      case ST_SUSPENDED:
        ctx.GState = ST_EXECUTING;
        ctx.action = action;
        ctx.sent = x;
        var value;
        try {
          value = moveNext(ctx);
        } catch (ex) {
          if (ex === RETURN_SENTINEL) {
            value = ctx;
          } else {
            throw ex;
          }
        }
        var done = value === ctx;
        if (done)
          value = ctx.returnValue;
        ctx.GState = done ? ST_CLOSED : ST_SUSPENDED;
        return {
          value: value,
          done: done
        };
    }
  }
  var ctxName = createPrivateSymbol();
  var moveNextName = createPrivateSymbol();
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(GeneratorFunctionPrototype, 'constructor', nonEnum(GeneratorFunction));
  GeneratorFunctionPrototype.prototype = {
    constructor: GeneratorFunctionPrototype,
    next: function(v) {
      return nextOrThrow(getPrivate(this, ctxName), getPrivate(this, moveNextName), 'next', v);
    },
    throw: function(v) {
      return nextOrThrow(getPrivate(this, ctxName), getPrivate(this, moveNextName), 'throw', v);
    },
    return: function(v) {
      var ctx = getPrivate(this, ctxName);
      ctx.oldReturnValue = ctx.returnValue;
      ctx.returnValue = v;
      return nextOrThrow(ctx, getPrivate(this, moveNextName), 'throw', RETURN_SENTINEL);
    }
  };
  defineProperties(GeneratorFunctionPrototype.prototype, {
    constructor: {enumerable: false},
    next: {enumerable: false},
    throw: {enumerable: false},
    return: {enumerable: false}
  });
  Object.defineProperty(GeneratorFunctionPrototype.prototype, Symbol.iterator, nonEnum(function() {
    return this;
  }));
  function createGeneratorInstance(innerFunction, functionObject, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new GeneratorContext();
    var object = create(functionObject.prototype);
    setPrivate(object, ctxName, ctx);
    setPrivate(object, moveNextName, moveNext);
    return object;
  }
  function initGeneratorFunction(functionObject) {
    functionObject.prototype = create(GeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = GeneratorFunctionPrototype;
    return functionObject;
  }
  function AsyncFunctionContext() {
    GeneratorContext.call(this);
    this.err = undefined;
    var ctx = this;
    ctx.result = new Promise(function(resolve, reject) {
      ctx.resolve = resolve;
      ctx.reject = reject;
    });
  }
  AsyncFunctionContext.prototype = create(GeneratorContext.prototype);
  AsyncFunctionContext.prototype.end = function() {
    switch (this.state) {
      case END_STATE:
        this.resolve(this.returnValue);
        break;
      case RETHROW_STATE:
        this.reject(this.storedException);
        break;
      default:
        this.reject(getInternalError(this.state));
    }
  };
  AsyncFunctionContext.prototype.handleException = function() {
    this.state = RETHROW_STATE;
  };
  function asyncWrap(innerFunction, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new AsyncFunctionContext();
    ctx.createCallback = function(newState) {
      return function(value) {
        ctx.state = newState;
        ctx.value = value;
        moveNext(ctx);
      };
    };
    ctx.errback = function(err) {
      handleCatch(ctx, err);
      moveNext(ctx);
    };
    moveNext(ctx);
    return ctx.result;
  }
  function getMoveNext(innerFunction, self) {
    return function(ctx) {
      while (true) {
        try {
          return innerFunction.call(self, ctx);
        } catch (ex) {
          handleCatch(ctx, ex);
        }
      }
    };
  }
  function handleCatch(ctx, ex) {
    ctx.storedException = ex;
    var last = ctx.tryStack_[ctx.tryStack_.length - 1];
    if (!last) {
      ctx.handleException(ex);
      return;
    }
    ctx.state = last.catch !== undefined ? last.catch : last.finally;
    if (last.finallyFallThrough !== undefined)
      ctx.finallyFallThrough = last.finallyFallThrough;
  }
  $traceurRuntime.asyncWrap = asyncWrap;
  $traceurRuntime.initGeneratorFunction = initGeneratorFunction;
  $traceurRuntime.createGeneratorInstance = createGeneratorInstance;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/template.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/template.js";
  var $__1 = Object,
      defineProperty = $__1.defineProperty,
      freeze = $__1.freeze;
  var slice = Array.prototype.slice;
  var map = Object.create(null);
  function getTemplateObject(raw) {
    var cooked = arguments[1];
    var key = raw.join('${}');
    var templateObject = map[key];
    if (templateObject)
      return templateObject;
    if (!cooked) {
      cooked = slice.call(raw);
    }
    return map[key] = freeze(defineProperty(cooked, 'raw', {value: freeze(raw)}));
  }
  $traceurRuntime.getTemplateObject = getTemplateObject;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/runtime-modules.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/runtime-modules.js";
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./symbols.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./classes.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./exportStar.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./relativeRequire.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./spread.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./destructuring.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./generators.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./template.js", "traceur-runtime@0.0.102/src/runtime/runtime-modules.js"));
  return {};
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/runtime-modules.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/frozen-data.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/frozen-data.js";
  function findIndex(arr, key) {
    for (var i = 0; i < arr.length; i += 2) {
      if (arr[i] === key) {
        return i;
      }
    }
    return -1;
  }
  function setFrozen(arr, key, val) {
    var i = findIndex(arr, key);
    if (i === -1) {
      arr.push(key, val);
    }
  }
  function getFrozen(arr, key) {
    var i = findIndex(arr, key);
    if (i !== -1) {
      return arr[i + 1];
    }
    return undefined;
  }
  function hasFrozen(arr, key) {
    return findIndex(arr, key) !== -1;
  }
  function deleteFrozen(arr, key) {
    var i = findIndex(arr, key);
    if (i !== -1) {
      arr.splice(i, 2);
      return true;
    }
    return false;
  }
  return {
    get setFrozen() {
      return setFrozen;
    },
    get getFrozen() {
      return getFrozen;
    },
    get hasFrozen() {
      return hasFrozen;
    },
    get deleteFrozen() {
      return deleteFrozen;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/utils.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/utils.js";
  var $ceil = Math.ceil;
  var $floor = Math.floor;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $pow = Math.pow;
  var $min = Math.min;
  var $TypeError = TypeError;
  var $Object = Object;
  function toObject(x) {
    if (x == null) {
      throw $TypeError();
    }
    return $Object(x);
  }
  function toUint32(x) {
    return x >>> 0;
  }
  function isObject(x) {
    return x && (typeof x === 'object' || typeof x === 'function');
  }
  function isCallable(x) {
    return typeof x === 'function';
  }
  function isNumber(x) {
    return typeof x === 'number';
  }
  function toInteger(x) {
    x = +x;
    if ($isNaN(x))
      return 0;
    if (x === 0 || !$isFinite(x))
      return x;
    return x > 0 ? $floor(x) : $ceil(x);
  }
  var MAX_SAFE_LENGTH = $pow(2, 53) - 1;
  function toLength(x) {
    var len = toInteger(x);
    return len < 0 ? 0 : $min(len, MAX_SAFE_LENGTH);
  }
  function checkIterable(x) {
    return !isObject(x) ? undefined : x[Symbol.iterator];
  }
  function isConstructor(x) {
    return isCallable(x);
  }
  function createIteratorResultObject(value, done) {
    return {
      value: value,
      done: done
    };
  }
  function maybeDefine(object, name, descr) {
    if (!(name in object)) {
      Object.defineProperty(object, name, descr);
    }
  }
  function maybeDefineMethod(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  function maybeDefineConst(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: false,
      enumerable: false,
      writable: false
    });
  }
  function maybeAddFunctions(object, functions) {
    for (var i = 0; i < functions.length; i += 2) {
      var name = functions[i];
      var value = functions[i + 1];
      maybeDefineMethod(object, name, value);
    }
  }
  function maybeAddConsts(object, consts) {
    for (var i = 0; i < consts.length; i += 2) {
      var name = consts[i];
      var value = consts[i + 1];
      maybeDefineConst(object, name, value);
    }
  }
  function maybeAddIterator(object, func, Symbol) {
    if (!Symbol || !Symbol.iterator || object[Symbol.iterator])
      return;
    if (object['@@iterator'])
      func = object['@@iterator'];
    Object.defineProperty(object, Symbol.iterator, {
      value: func,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  var polyfills = [];
  function registerPolyfill(func) {
    polyfills.push(func);
  }
  function polyfillAll(global) {
    polyfills.forEach(function(f) {
      return f(global);
    });
  }
  return {
    get toObject() {
      return toObject;
    },
    get toUint32() {
      return toUint32;
    },
    get isObject() {
      return isObject;
    },
    get isCallable() {
      return isCallable;
    },
    get isNumber() {
      return isNumber;
    },
    get toInteger() {
      return toInteger;
    },
    get toLength() {
      return toLength;
    },
    get checkIterable() {
      return checkIterable;
    },
    get isConstructor() {
      return isConstructor;
    },
    get createIteratorResultObject() {
      return createIteratorResultObject;
    },
    get maybeDefine() {
      return maybeDefine;
    },
    get maybeDefineMethod() {
      return maybeDefineMethod;
    },
    get maybeDefineConst() {
      return maybeDefineConst;
    },
    get maybeAddFunctions() {
      return maybeAddFunctions;
    },
    get maybeAddConsts() {
      return maybeAddConsts;
    },
    get maybeAddIterator() {
      return maybeAddIterator;
    },
    get registerPolyfill() {
      return registerPolyfill;
    },
    get polyfillAll() {
      return polyfillAll;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Map.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Map.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Map.js")),
      createPrivateSymbol = $__0.createPrivateSymbol,
      getPrivate = $__0.getPrivate,
      setPrivate = $__0.setPrivate;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Map.js")),
      deleteFrozen = $__1.deleteFrozen,
      getFrozen = $__1.getFrozen,
      setFrozen = $__1.setFrozen;
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Map.js")),
      isObject = $__2.isObject,
      registerPolyfill = $__2.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Map.js")).default;
  var $__13 = Object,
      defineProperty = $__13.defineProperty,
      getOwnPropertyDescriptor = $__13.getOwnPropertyDescriptor,
      hasOwnProperty = $__13.hasOwnProperty,
      isExtensible = $__13.isExtensible;
  var deletedSentinel = {};
  var counter = 1;
  var hashCodeName = createPrivateSymbol();
  function getHashCodeForObject(obj) {
    return getPrivate(obj, hashCodeName);
  }
  function getOrSetHashCodeForObject(obj) {
    var hash = getHashCodeForObject(obj);
    if (!hash) {
      hash = counter++;
      setPrivate(obj, hashCodeName, hash);
    }
    return hash;
  }
  function lookupIndex(map, key) {
    if (typeof key === 'string') {
      return map.stringIndex_[key];
    }
    if (isObject(key)) {
      if (!isExtensible(key)) {
        return getFrozen(map.frozenData_, key);
      }
      var hc = getHashCodeForObject(key);
      if (hc === undefined) {
        return undefined;
      }
      return map.objectIndex_[hc];
    }
    return map.primitiveIndex_[key];
  }
  function initMap(map) {
    map.entries_ = [];
    map.objectIndex_ = Object.create(null);
    map.stringIndex_ = Object.create(null);
    map.primitiveIndex_ = Object.create(null);
    map.frozenData_ = [];
    map.deletedCount_ = 0;
  }
  var Map = function() {
    function Map() {
      var $__15,
          $__16;
      var iterable = arguments[0];
      if (!isObject(this))
        throw new TypeError('Map called on incompatible type');
      if (hasOwnProperty.call(this, 'entries_')) {
        throw new TypeError('Map can not be reentrantly initialised');
      }
      initMap(this);
      if (iterable !== null && iterable !== undefined) {
        var $__9 = true;
        var $__10 = false;
        var $__11 = undefined;
        try {
          for (var $__7 = void 0,
              $__6 = (iterable)[Symbol.iterator](); !($__9 = ($__7 = $__6.next()).done); $__9 = true) {
            var $__14 = $__7.value,
                key = ($__15 = $__14[Symbol.iterator](), ($__16 = $__15.next()).done ? void 0 : $__16.value),
                value = ($__16 = $__15.next()).done ? void 0 : $__16.value;
            {
              this.set(key, value);
            }
          }
        } catch ($__12) {
          $__10 = true;
          $__11 = $__12;
        } finally {
          try {
            if (!$__9 && $__6.return != null) {
              $__6.return();
            }
          } finally {
            if ($__10) {
              throw $__11;
            }
          }
        }
      }
    }
    return ($traceurRuntime.createClass)(Map, {
      get size() {
        return this.entries_.length / 2 - this.deletedCount_;
      },
      get: function(key) {
        var index = lookupIndex(this, key);
        if (index !== undefined) {
          return this.entries_[index + 1];
        }
      },
      set: function(key, value) {
        var index = lookupIndex(this, key);
        if (index !== undefined) {
          this.entries_[index + 1] = value;
        } else {
          index = this.entries_.length;
          this.entries_[index] = key;
          this.entries_[index + 1] = value;
          if (isObject(key)) {
            if (!isExtensible(key)) {
              setFrozen(this.frozenData_, key, index);
            } else {
              var hash = getOrSetHashCodeForObject(key);
              this.objectIndex_[hash] = index;
            }
          } else if (typeof key === 'string') {
            this.stringIndex_[key] = index;
          } else {
            this.primitiveIndex_[key] = index;
          }
        }
        return this;
      },
      has: function(key) {
        return lookupIndex(this, key) !== undefined;
      },
      delete: function(key) {
        var index = lookupIndex(this, key);
        if (index === undefined) {
          return false;
        }
        this.entries_[index] = deletedSentinel;
        this.entries_[index + 1] = undefined;
        this.deletedCount_++;
        if (isObject(key)) {
          if (!isExtensible(key)) {
            deleteFrozen(this.frozenData_, key);
          } else {
            var hash = getHashCodeForObject(key);
            delete this.objectIndex_[hash];
          }
        } else if (typeof key === 'string') {
          delete this.stringIndex_[key];
        } else {
          delete this.primitiveIndex_[key];
        }
        return true;
      },
      clear: function() {
        initMap(this);
      },
      forEach: function(callbackFn) {
        var thisArg = arguments[1];
        for (var i = 0; i < this.entries_.length; i += 2) {
          var key = this.entries_[i];
          var value = this.entries_[i + 1];
          if (key === deletedSentinel)
            continue;
          callbackFn.call(thisArg, value, key, this);
        }
      },
      entries: $traceurRuntime.initGeneratorFunction(function $__17() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return [key, value];
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__17, this);
      }),
      keys: $traceurRuntime.initGeneratorFunction(function $__18() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return key;
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__18, this);
      }),
      values: $traceurRuntime.initGeneratorFunction(function $__19() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return value;
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__19, this);
      })
    }, {});
  }();
  defineProperty(Map.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Map.prototype.entries
  });
  function needsPolyfill(global) {
    var $__14 = global,
        Map = $__14.Map,
        Symbol = $__14.Symbol;
    if (!Map || !hasNativeSymbol() || !Map.prototype[Symbol.iterator] || !Map.prototype.entries) {
      return true;
    }
    try {
      return new Map([[]]).size !== 1;
    } catch (e) {
      return false;
    }
  }
  function polyfillMap(global) {
    if (needsPolyfill(global)) {
      global.Map = Map;
    }
  }
  registerPolyfill(polyfillMap);
  return {
    get Map() {
      return Map;
    },
    get polyfillMap() {
      return polyfillMap;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Map.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Set.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Set.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Set.js")),
      isObject = $__0.isObject,
      registerPolyfill = $__0.registerPolyfill;
  var Map = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./Map.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Set.js")).Map;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Set.js")).default;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var Set = function() {
    function Set() {
      var iterable = arguments[0];
      if (!isObject(this))
        throw new TypeError('Set called on incompatible type');
      if (hasOwnProperty.call(this, 'map_')) {
        throw new TypeError('Set can not be reentrantly initialised');
      }
      this.map_ = new Map();
      if (iterable !== null && iterable !== undefined) {
        var $__9 = true;
        var $__10 = false;
        var $__11 = undefined;
        try {
          for (var $__7 = void 0,
              $__6 = (iterable)[Symbol.iterator](); !($__9 = ($__7 = $__6.next()).done); $__9 = true) {
            var item = $__7.value;
            {
              this.add(item);
            }
          }
        } catch ($__12) {
          $__10 = true;
          $__11 = $__12;
        } finally {
          try {
            if (!$__9 && $__6.return != null) {
              $__6.return();
            }
          } finally {
            if ($__10) {
              throw $__11;
            }
          }
        }
      }
    }
    return ($traceurRuntime.createClass)(Set, {
      get size() {
        return this.map_.size;
      },
      has: function(key) {
        return this.map_.has(key);
      },
      add: function(key) {
        this.map_.set(key, key);
        return this;
      },
      delete: function(key) {
        return this.map_.delete(key);
      },
      clear: function() {
        return this.map_.clear();
      },
      forEach: function(callbackFn) {
        var thisArg = arguments[1];
        var $__5 = this;
        return this.map_.forEach(function(value, key) {
          callbackFn.call(thisArg, key, key, $__5);
        });
      },
      values: $traceurRuntime.initGeneratorFunction(function $__15() {
        var $__16,
            $__17;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $__16 = $ctx.wrapYieldStar(this.map_.keys()[Symbol.iterator]());
                $ctx.sent = void 0;
                $ctx.action = 'next';
                $ctx.state = 12;
                break;
              case 12:
                $__17 = $__16[$ctx.action]($ctx.sentIgnoreThrow);
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = ($__17.done) ? 3 : 2;
                break;
              case 3:
                $ctx.sent = $__17.value;
                $ctx.state = -2;
                break;
              case 2:
                $ctx.state = 12;
                return $__17.value;
              default:
                return $ctx.end();
            }
        }, $__15, this);
      }),
      entries: $traceurRuntime.initGeneratorFunction(function $__18() {
        var $__19,
            $__20;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $__19 = $ctx.wrapYieldStar(this.map_.entries()[Symbol.iterator]());
                $ctx.sent = void 0;
                $ctx.action = 'next';
                $ctx.state = 12;
                break;
              case 12:
                $__20 = $__19[$ctx.action]($ctx.sentIgnoreThrow);
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = ($__20.done) ? 3 : 2;
                break;
              case 3:
                $ctx.sent = $__20.value;
                $ctx.state = -2;
                break;
              case 2:
                $ctx.state = 12;
                return $__20.value;
              default:
                return $ctx.end();
            }
        }, $__18, this);
      })
    }, {});
  }();
  Object.defineProperty(Set.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  Object.defineProperty(Set.prototype, 'keys', {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  function needsPolyfill(global) {
    var $__14 = global,
        Set = $__14.Set,
        Symbol = $__14.Symbol;
    if (!Set || !hasNativeSymbol() || !Set.prototype[Symbol.iterator] || !Set.prototype.values) {
      return true;
    }
    try {
      return new Set([1]).size !== 1;
    } catch (e) {
      return false;
    }
  }
  function polyfillSet(global) {
    if (needsPolyfill(global)) {
      global.Set = Set;
    }
  }
  registerPolyfill(polyfillSet);
  return {
    get Set() {
      return Set;
    },
    get polyfillSet() {
      return polyfillSet;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Set.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/node_modules/rsvp/lib/rsvp/asap.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/node_modules/rsvp/lib/rsvp/asap.js";
  var len = 0;
  var toString = {}.toString;
  var vertxNext;
  function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      scheduleFlush();
    }
  }
  var $__default = asap;
  var browserWindow = (typeof window !== 'undefined') ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
  function useNextTick() {
    var nextTick = process.nextTick;
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return function() {
      nextTick(flush);
    };
  }
  function useVertxTimer() {
    return function() {
      vertxNext(flush);
    };
  }
  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {characterData: true});
    return function() {
      node.data = (iterations = ++iterations % 2);
    };
  }
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function() {
      channel.port2.postMessage(0);
    };
  }
  function useSetTimeout() {
    return function() {
      setTimeout(flush, 1);
    };
  }
  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }
    len = 0;
  }
  function attemptVertex() {
    try {
      var r = require;
      var vertx = r('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }
  var scheduleFlush;
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush = attemptVertex();
  } else {
    scheduleFlush = useSetTimeout();
  }
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js";
  var async = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../../../node_modules/rsvp/lib/rsvp/asap.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js")).default;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js")),
      isObject = $__1.isObject,
      registerPolyfill = $__1.registerPolyfill;
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js")),
      createPrivateSymbol = $__2.createPrivateSymbol,
      getPrivate = $__2.getPrivate,
      setPrivate = $__2.setPrivate;
  var promiseRaw = {};
  function isPromise(x) {
    return x && typeof x === 'object' && x.status_ !== undefined;
  }
  function idResolveHandler(x) {
    return x;
  }
  function idRejectHandler(x) {
    throw x;
  }
  function chain(promise) {
    var onResolve = arguments[1] !== (void 0) ? arguments[1] : idResolveHandler;
    var onReject = arguments[2] !== (void 0) ? arguments[2] : idRejectHandler;
    var deferred = getDeferred(promise.constructor);
    switch (promise.status_) {
      case undefined:
        throw TypeError;
      case 0:
        promise.onResolve_.push(onResolve, deferred);
        promise.onReject_.push(onReject, deferred);
        break;
      case +1:
        promiseEnqueue(promise.value_, [onResolve, deferred]);
        break;
      case -1:
        promiseEnqueue(promise.value_, [onReject, deferred]);
        break;
    }
    return deferred.promise;
  }
  function getDeferred(C) {
    if (this === $Promise) {
      var promise = promiseInit(new $Promise(promiseRaw));
      return {
        promise: promise,
        resolve: function(x) {
          promiseResolve(promise, x);
        },
        reject: function(r) {
          promiseReject(promise, r);
        }
      };
    } else {
      var result = {};
      result.promise = new C(function(resolve, reject) {
        result.resolve = resolve;
        result.reject = reject;
      });
      return result;
    }
  }
  function promiseSet(promise, status, value, onResolve, onReject) {
    promise.status_ = status;
    promise.value_ = value;
    promise.onResolve_ = onResolve;
    promise.onReject_ = onReject;
    return promise;
  }
  function promiseInit(promise) {
    return promiseSet(promise, 0, undefined, [], []);
  }
  var Promise = function() {
    function Promise(resolver) {
      if (resolver === promiseRaw)
        return;
      if (typeof resolver !== 'function')
        throw new TypeError;
      var promise = promiseInit(this);
      try {
        resolver(function(x) {
          promiseResolve(promise, x);
        }, function(r) {
          promiseReject(promise, r);
        });
      } catch (e) {
        promiseReject(promise, e);
      }
    }
    return ($traceurRuntime.createClass)(Promise, {
      catch: function(onReject) {
        return this.then(undefined, onReject);
      },
      then: function(onResolve, onReject) {
        if (typeof onResolve !== 'function')
          onResolve = idResolveHandler;
        if (typeof onReject !== 'function')
          onReject = idRejectHandler;
        var that = this;
        var constructor = this.constructor;
        return chain(this, function(x) {
          x = promiseCoerce(constructor, x);
          return x === that ? onReject(new TypeError) : isPromise(x) ? x.then(onResolve, onReject) : onResolve(x);
        }, onReject);
      }
    }, {
      resolve: function(x) {
        if (this === $Promise) {
          if (isPromise(x)) {
            return x;
          }
          return promiseSet(new $Promise(promiseRaw), +1, x);
        } else {
          return new this(function(resolve, reject) {
            resolve(x);
          });
        }
      },
      reject: function(r) {
        if (this === $Promise) {
          return promiseSet(new $Promise(promiseRaw), -1, r);
        } else {
          return new this(function(resolve, reject) {
            reject(r);
          });
        }
      },
      all: function(values) {
        var deferred = getDeferred(this);
        var resolutions = [];
        try {
          var makeCountdownFunction = function(i) {
            return function(x) {
              resolutions[i] = x;
              if (--count === 0)
                deferred.resolve(resolutions);
            };
          };
          var count = 0;
          var i = 0;
          var $__7 = true;
          var $__8 = false;
          var $__9 = undefined;
          try {
            for (var $__5 = void 0,
                $__4 = (values)[Symbol.iterator](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
              var value = $__5.value;
              {
                var countdownFunction = makeCountdownFunction(i);
                this.resolve(value).then(countdownFunction, function(r) {
                  deferred.reject(r);
                });
                ++i;
                ++count;
              }
            }
          } catch ($__10) {
            $__8 = true;
            $__9 = $__10;
          } finally {
            try {
              if (!$__7 && $__4.return != null) {
                $__4.return();
              }
            } finally {
              if ($__8) {
                throw $__9;
              }
            }
          }
          if (count === 0) {
            deferred.resolve(resolutions);
          }
        } catch (e) {
          deferred.reject(e);
        }
        return deferred.promise;
      },
      race: function(values) {
        var deferred = getDeferred(this);
        try {
          for (var i = 0; i < values.length; i++) {
            this.resolve(values[i]).then(function(x) {
              deferred.resolve(x);
            }, function(r) {
              deferred.reject(r);
            });
          }
        } catch (e) {
          deferred.reject(e);
        }
        return deferred.promise;
      }
    });
  }();
  var $Promise = Promise;
  var $PromiseReject = $Promise.reject;
  function promiseResolve(promise, x) {
    promiseDone(promise, +1, x, promise.onResolve_);
  }
  function promiseReject(promise, r) {
    promiseDone(promise, -1, r, promise.onReject_);
  }
  function promiseDone(promise, status, value, reactions) {
    if (promise.status_ !== 0)
      return;
    promiseEnqueue(value, reactions);
    promiseSet(promise, status, value);
  }
  function promiseEnqueue(value, tasks) {
    async(function() {
      for (var i = 0; i < tasks.length; i += 2) {
        promiseHandle(value, tasks[i], tasks[i + 1]);
      }
    });
  }
  function promiseHandle(value, handler, deferred) {
    try {
      var result = handler(value);
      if (result === deferred.promise)
        throw new TypeError;
      else if (isPromise(result))
        chain(result, deferred.resolve, deferred.reject);
      else
        deferred.resolve(result);
    } catch (e) {
      try {
        deferred.reject(e);
      } catch (e) {}
    }
  }
  var thenableSymbol = createPrivateSymbol();
  function promiseCoerce(constructor, x) {
    if (!isPromise(x) && isObject(x)) {
      var then;
      try {
        then = x.then;
      } catch (r) {
        var promise = $PromiseReject.call(constructor, r);
        setPrivate(x, thenableSymbol, promise);
        return promise;
      }
      if (typeof then === 'function') {
        var p = getPrivate(x, thenableSymbol);
        if (p) {
          return p;
        } else {
          var deferred = getDeferred(constructor);
          setPrivate(x, thenableSymbol, deferred.promise);
          try {
            then.call(x, deferred.resolve, deferred.reject);
          } catch (r) {
            deferred.reject(r);
          }
          return deferred.promise;
        }
      }
    }
    return x;
  }
  function polyfillPromise(global) {
    if (!global.Promise)
      global.Promise = Promise;
  }
  registerPolyfill(polyfillPromise);
  return {
    get Promise() {
      return Promise;
    },
    get polyfillPromise() {
      return polyfillPromise;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Promise.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/StringIterator.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/StringIterator.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/StringIterator.js")),
      createIteratorResultObject = $__0.createIteratorResultObject,
      isObject = $__0.isObject;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var iteratedString = Symbol('iteratedString');
  var stringIteratorNextIndex = Symbol('stringIteratorNextIndex');
  var StringIterator = function() {
    var $__3;
    function StringIterator() {}
    return ($traceurRuntime.createClass)(StringIterator, ($__3 = {}, Object.defineProperty($__3, "next", {
      value: function() {
        var o = this;
        if (!isObject(o) || !hasOwnProperty.call(o, iteratedString)) {
          throw new TypeError('this must be a StringIterator object');
        }
        var s = o[iteratedString];
        if (s === undefined) {
          return createIteratorResultObject(undefined, true);
        }
        var position = o[stringIteratorNextIndex];
        var len = s.length;
        if (position >= len) {
          o[iteratedString] = undefined;
          return createIteratorResultObject(undefined, true);
        }
        var first = s.charCodeAt(position);
        var resultString;
        if (first < 0xD800 || first > 0xDBFF || position + 1 === len) {
          resultString = String.fromCharCode(first);
        } else {
          var second = s.charCodeAt(position + 1);
          if (second < 0xDC00 || second > 0xDFFF) {
            resultString = String.fromCharCode(first);
          } else {
            resultString = String.fromCharCode(first) + String.fromCharCode(second);
          }
        }
        o[stringIteratorNextIndex] = position + resultString.length;
        return createIteratorResultObject(resultString, false);
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), Object.defineProperty($__3, Symbol.iterator, {
      value: function() {
        return this;
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), $__3), {});
  }();
  function createStringIterator(string) {
    var s = String(string);
    var iterator = Object.create(StringIterator.prototype);
    iterator[iteratedString] = s;
    iterator[stringIteratorNextIndex] = 0;
    return iterator;
  }
  return {get createStringIterator() {
      return createStringIterator;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/String.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/String.js";
  var checkObjectCoercible = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../checkObjectCoercible.js", "traceur-runtime@0.0.102/src/runtime/polyfills/String.js")).default;
  var createStringIterator = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./StringIterator.js", "traceur-runtime@0.0.102/src/runtime/polyfills/String.js")).createStringIterator;
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/String.js")),
      maybeAddFunctions = $__2.maybeAddFunctions,
      maybeAddIterator = $__2.maybeAddIterator,
      registerPolyfill = $__2.registerPolyfill;
  var $toString = Object.prototype.toString;
  var $indexOf = String.prototype.indexOf;
  var $lastIndexOf = String.prototype.lastIndexOf;
  function startsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (isNaN(pos)) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    return $indexOf.call(string, searchString, pos) == start;
  }
  function endsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var pos = stringLength;
    if (arguments.length > 1) {
      var position = arguments[1];
      if (position !== undefined) {
        pos = position ? Number(position) : 0;
        if (isNaN(pos)) {
          pos = 0;
        }
      }
    }
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchLength;
    if (start < 0) {
      return false;
    }
    return $lastIndexOf.call(string, searchString, start) == start;
  }
  function includes(search) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    if (search && $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (pos != pos) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    if (searchLength + start > stringLength) {
      return false;
    }
    return $indexOf.call(string, searchString, pos) != -1;
  }
  function repeat(count) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var n = count ? Number(count) : 0;
    if (isNaN(n)) {
      n = 0;
    }
    if (n < 0 || n == Infinity) {
      throw RangeError();
    }
    if (n == 0) {
      return '';
    }
    var result = '';
    while (n--) {
      result += string;
    }
    return result;
  }
  function codePointAt(position) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var size = string.length;
    var index = position ? Number(position) : 0;
    if (isNaN(index)) {
      index = 0;
    }
    if (index < 0 || index >= size) {
      return undefined;
    }
    var first = string.charCodeAt(index);
    var second;
    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
      second = string.charCodeAt(index + 1);
      if (second >= 0xDC00 && second <= 0xDFFF) {
        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
      }
    }
    return first;
  }
  function raw(callsite) {
    var raw = callsite.raw;
    var len = raw.length >>> 0;
    if (len === 0)
      return '';
    var s = '';
    var i = 0;
    while (true) {
      s += raw[i];
      if (i + 1 === len)
        return s;
      s += arguments[++i];
    }
  }
  function fromCodePoint(_) {
    var codeUnits = [];
    var floor = Math.floor;
    var highSurrogate;
    var lowSurrogate;
    var index = -1;
    var length = arguments.length;
    if (!length) {
      return '';
    }
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
        throw RangeError('Invalid code point: ' + codePoint);
      }
      if (codePoint <= 0xFFFF) {
        codeUnits.push(codePoint);
      } else {
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xD800;
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
    }
    return String.fromCharCode.apply(null, codeUnits);
  }
  function stringPrototypeIterator() {
    var o = checkObjectCoercible(this);
    var s = String(o);
    return createStringIterator(s);
  }
  function polyfillString(global) {
    var String = global.String;
    maybeAddFunctions(String.prototype, ['codePointAt', codePointAt, 'endsWith', endsWith, 'includes', includes, 'repeat', repeat, 'startsWith', startsWith]);
    maybeAddFunctions(String, ['fromCodePoint', fromCodePoint, 'raw', raw]);
    maybeAddIterator(String.prototype, stringPrototypeIterator, Symbol);
  }
  registerPolyfill(polyfillString);
  return {
    get startsWith() {
      return startsWith;
    },
    get endsWith() {
      return endsWith;
    },
    get includes() {
      return includes;
    },
    get repeat() {
      return repeat;
    },
    get codePointAt() {
      return codePointAt;
    },
    get raw() {
      return raw;
    },
    get fromCodePoint() {
      return fromCodePoint;
    },
    get stringPrototypeIterator() {
      return stringPrototypeIterator;
    },
    get polyfillString() {
      return polyfillString;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/String.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/ArrayIterator.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/ArrayIterator.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/ArrayIterator.js")),
      toObject = $__0.toObject,
      toUint32 = $__0.toUint32,
      createIteratorResultObject = $__0.createIteratorResultObject;
  var ARRAY_ITERATOR_KIND_KEYS = 1;
  var ARRAY_ITERATOR_KIND_VALUES = 2;
  var ARRAY_ITERATOR_KIND_ENTRIES = 3;
  var ArrayIterator = function() {
    var $__3;
    function ArrayIterator() {}
    return ($traceurRuntime.createClass)(ArrayIterator, ($__3 = {}, Object.defineProperty($__3, "next", {
      value: function() {
        var iterator = toObject(this);
        var array = iterator.iteratorObject_;
        if (!array) {
          throw new TypeError('Object is not an ArrayIterator');
        }
        var index = iterator.arrayIteratorNextIndex_;
        var itemKind = iterator.arrayIterationKind_;
        var length = toUint32(array.length);
        if (index >= length) {
          iterator.arrayIteratorNextIndex_ = Infinity;
          return createIteratorResultObject(undefined, true);
        }
        iterator.arrayIteratorNextIndex_ = index + 1;
        if (itemKind == ARRAY_ITERATOR_KIND_VALUES)
          return createIteratorResultObject(array[index], false);
        if (itemKind == ARRAY_ITERATOR_KIND_ENTRIES)
          return createIteratorResultObject([index, array[index]], false);
        return createIteratorResultObject(index, false);
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), Object.defineProperty($__3, Symbol.iterator, {
      value: function() {
        return this;
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), $__3), {});
  }();
  function createArrayIterator(array, kind) {
    var object = toObject(array);
    var iterator = new ArrayIterator;
    iterator.iteratorObject_ = object;
    iterator.arrayIteratorNextIndex_ = 0;
    iterator.arrayIterationKind_ = kind;
    return iterator;
  }
  function entries() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_ENTRIES);
  }
  function keys() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_KEYS);
  }
  function values() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_VALUES);
  }
  return {
    get entries() {
      return entries;
    },
    get keys() {
      return keys;
    },
    get values() {
      return values;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Array.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Array.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./ArrayIterator.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Array.js")),
      entries = $__0.entries,
      keys = $__0.keys,
      jsValues = $__0.values;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Array.js")),
      checkIterable = $__1.checkIterable,
      isCallable = $__1.isCallable,
      isConstructor = $__1.isConstructor,
      maybeAddFunctions = $__1.maybeAddFunctions,
      maybeAddIterator = $__1.maybeAddIterator,
      registerPolyfill = $__1.registerPolyfill,
      toInteger = $__1.toInteger,
      toLength = $__1.toLength,
      toObject = $__1.toObject;
  function from(arrLike) {
    var mapFn = arguments[1];
    var thisArg = arguments[2];
    var C = this;
    var items = toObject(arrLike);
    var mapping = mapFn !== undefined;
    var k = 0;
    var arr,
        len;
    if (mapping && !isCallable(mapFn)) {
      throw TypeError();
    }
    if (checkIterable(items)) {
      arr = isConstructor(C) ? new C() : [];
      var $__6 = true;
      var $__7 = false;
      var $__8 = undefined;
      try {
        for (var $__4 = void 0,
            $__3 = (items)[Symbol.iterator](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
          var item = $__4.value;
          {
            if (mapping) {
              arr[k] = mapFn.call(thisArg, item, k);
            } else {
              arr[k] = item;
            }
            k++;
          }
        }
      } catch ($__9) {
        $__7 = true;
        $__8 = $__9;
      } finally {
        try {
          if (!$__6 && $__3.return != null) {
            $__3.return();
          }
        } finally {
          if ($__7) {
            throw $__8;
          }
        }
      }
      arr.length = k;
      return arr;
    }
    len = toLength(items.length);
    arr = isConstructor(C) ? new C(len) : new Array(len);
    for (; k < len; k++) {
      if (mapping) {
        arr[k] = typeof thisArg === 'undefined' ? mapFn(items[k], k) : mapFn.call(thisArg, items[k], k);
      } else {
        arr[k] = items[k];
      }
    }
    arr.length = len;
    return arr;
  }
  function of() {
    for (var items = [],
        $__10 = 0; $__10 < arguments.length; $__10++)
      items[$__10] = arguments[$__10];
    var C = this;
    var len = items.length;
    var arr = isConstructor(C) ? new C(len) : new Array(len);
    for (var k = 0; k < len; k++) {
      arr[k] = items[k];
    }
    arr.length = len;
    return arr;
  }
  function fill(value) {
    var start = arguments[1] !== (void 0) ? arguments[1] : 0;
    var end = arguments[2];
    var object = toObject(this);
    var len = toLength(object.length);
    var fillStart = toInteger(start);
    var fillEnd = end !== undefined ? toInteger(end) : len;
    fillStart = fillStart < 0 ? Math.max(len + fillStart, 0) : Math.min(fillStart, len);
    fillEnd = fillEnd < 0 ? Math.max(len + fillEnd, 0) : Math.min(fillEnd, len);
    while (fillStart < fillEnd) {
      object[fillStart] = value;
      fillStart++;
    }
    return object;
  }
  function find(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg);
  }
  function findIndex(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg, true);
  }
  function findHelper(self, predicate) {
    var thisArg = arguments[2];
    var returnIndex = arguments[3] !== (void 0) ? arguments[3] : false;
    var object = toObject(self);
    var len = toLength(object.length);
    if (!isCallable(predicate)) {
      throw TypeError();
    }
    for (var i = 0; i < len; i++) {
      var value = object[i];
      if (predicate.call(thisArg, value, i, object)) {
        return returnIndex ? i : value;
      }
    }
    return returnIndex ? -1 : undefined;
  }
  function polyfillArray(global) {
    var $__11 = global,
        Array = $__11.Array,
        Object = $__11.Object,
        Symbol = $__11.Symbol;
    var values = jsValues;
    if (Symbol && Symbol.iterator && Array.prototype[Symbol.iterator]) {
      values = Array.prototype[Symbol.iterator];
    }
    maybeAddFunctions(Array.prototype, ['entries', entries, 'keys', keys, 'values', values, 'fill', fill, 'find', find, 'findIndex', findIndex]);
    maybeAddFunctions(Array, ['from', from, 'of', of]);
    maybeAddIterator(Array.prototype, values, Symbol);
    maybeAddIterator(Object.getPrototypeOf([].values()), function() {
      return this;
    }, Symbol);
  }
  registerPolyfill(polyfillArray);
  return {
    get from() {
      return from;
    },
    get of() {
      return of;
    },
    get fill() {
      return fill;
    },
    get find() {
      return find;
    },
    get findIndex() {
      return findIndex;
    },
    get polyfillArray() {
      return polyfillArray;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Array.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Object.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Object.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Object.js")),
      maybeAddFunctions = $__0.maybeAddFunctions,
      registerPolyfill = $__0.registerPolyfill;
  var $__2 = Object,
      defineProperty = $__2.defineProperty,
      getOwnPropertyDescriptor = $__2.getOwnPropertyDescriptor,
      getOwnPropertyNames = $__2.getOwnPropertyNames,
      keys = $__2.keys;
  function is(left, right) {
    if (left === right)
      return left !== 0 || 1 / left === 1 / right;
    return left !== left && right !== right;
  }
  function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      var props = source == null ? [] : keys(source);
      var p = void 0,
          length = props.length;
      for (p = 0; p < length; p++) {
        var name = props[p];
        target[name] = source[name];
      }
    }
    return target;
  }
  function mixin(target, source) {
    var props = getOwnPropertyNames(source);
    var p,
        descriptor,
        length = props.length;
    for (p = 0; p < length; p++) {
      var name = props[p];
      descriptor = getOwnPropertyDescriptor(source, props[p]);
      defineProperty(target, props[p], descriptor);
    }
    return target;
  }
  function polyfillObject(global) {
    var Object = global.Object;
    maybeAddFunctions(Object, ['assign', assign, 'is', is, 'mixin', mixin]);
  }
  registerPolyfill(polyfillObject);
  return {
    get is() {
      return is;
    },
    get assign() {
      return assign;
    },
    get mixin() {
      return mixin;
    },
    get polyfillObject() {
      return polyfillObject;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Object.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Number.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Number.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Number.js")),
      isNumber = $__0.isNumber,
      maybeAddConsts = $__0.maybeAddConsts,
      maybeAddFunctions = $__0.maybeAddFunctions,
      registerPolyfill = $__0.registerPolyfill,
      toInteger = $__0.toInteger;
  var $abs = Math.abs;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
  var MIN_SAFE_INTEGER = -Math.pow(2, 53) + 1;
  var EPSILON = Math.pow(2, -52);
  function NumberIsFinite(number) {
    return isNumber(number) && $isFinite(number);
  }
  function isInteger(number) {
    return NumberIsFinite(number) && toInteger(number) === number;
  }
  function NumberIsNaN(number) {
    return isNumber(number) && $isNaN(number);
  }
  function isSafeInteger(number) {
    if (NumberIsFinite(number)) {
      var integral = toInteger(number);
      if (integral === number)
        return $abs(integral) <= MAX_SAFE_INTEGER;
    }
    return false;
  }
  function polyfillNumber(global) {
    var Number = global.Number;
    maybeAddConsts(Number, ['MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER, 'EPSILON', EPSILON]);
    maybeAddFunctions(Number, ['isFinite', NumberIsFinite, 'isInteger', isInteger, 'isNaN', NumberIsNaN, 'isSafeInteger', isSafeInteger]);
  }
  registerPolyfill(polyfillNumber);
  return {
    get MAX_SAFE_INTEGER() {
      return MAX_SAFE_INTEGER;
    },
    get MIN_SAFE_INTEGER() {
      return MIN_SAFE_INTEGER;
    },
    get EPSILON() {
      return EPSILON;
    },
    get isFinite() {
      return NumberIsFinite;
    },
    get isInteger() {
      return isInteger;
    },
    get isNaN() {
      return NumberIsNaN;
    },
    get isSafeInteger() {
      return isSafeInteger;
    },
    get polyfillNumber() {
      return polyfillNumber;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Number.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/fround.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/fround.js";
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__1 = Math,
      LN2 = $__1.LN2,
      abs = $__1.abs,
      floor = $__1.floor,
      log = $__1.log,
      min = $__1.min,
      pow = $__1.pow;
  function packIEEE754(v, ebits, fbits) {
    var bias = (1 << (ebits - 1)) - 1,
        s,
        e,
        f,
        ln,
        i,
        bits,
        str,
        bytes;
    function roundToEven(n) {
      var w = floor(n),
          f = n - w;
      if (f < 0.5)
        return w;
      if (f > 0.5)
        return w + 1;
      return w % 2 ? w + 1 : w;
    }
    if (v !== v) {
      e = (1 << ebits) - 1;
      f = pow(2, fbits - 1);
      s = 0;
    } else if (v === Infinity || v === -Infinity) {
      e = (1 << ebits) - 1;
      f = 0;
      s = (v < 0) ? 1 : 0;
    } else if (v === 0) {
      e = 0;
      f = 0;
      s = (1 / v === -Infinity) ? 1 : 0;
    } else {
      s = v < 0;
      v = abs(v);
      if (v >= pow(2, 1 - bias)) {
        e = min(floor(log(v) / LN2), 1023);
        f = roundToEven(v / pow(2, e) * pow(2, fbits));
        if (f / pow(2, fbits) >= 2) {
          e = e + 1;
          f = 1;
        }
        if (e > bias) {
          e = (1 << ebits) - 1;
          f = 0;
        } else {
          e = e + bias;
          f = f - pow(2, fbits);
        }
      } else {
        e = 0;
        f = roundToEven(v / pow(2, 1 - bias - fbits));
      }
    }
    bits = [];
    for (i = fbits; i; i -= 1) {
      bits.push(f % 2 ? 1 : 0);
      f = floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
      bits.push(e % 2 ? 1 : 0);
      e = floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');
    bytes = [];
    while (str.length) {
      bytes.push(parseInt(str.substring(0, 8), 2));
      str = str.substring(8);
    }
    return bytes;
  }
  function unpackIEEE754(bytes, ebits, fbits) {
    var bits = [],
        i,
        j,
        b,
        str,
        bias,
        s,
        e,
        f;
    for (i = bytes.length; i; i -= 1) {
      b = bytes[i - 1];
      for (j = 8; j; j -= 1) {
        bits.push(b % 2 ? 1 : 0);
        b = b >> 1;
      }
    }
    bits.reverse();
    str = bits.join('');
    bias = (1 << (ebits - 1)) - 1;
    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
    e = parseInt(str.substring(1, 1 + ebits), 2);
    f = parseInt(str.substring(1 + ebits), 2);
    if (e === (1 << ebits) - 1) {
      return f !== 0 ? NaN : s * Infinity;
    } else if (e > 0) {
      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
    } else if (f !== 0) {
      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
    } else {
      return s < 0 ? -0 : 0;
    }
  }
  function unpackF32(b) {
    return unpackIEEE754(b, 8, 23);
  }
  function packF32(v) {
    return packIEEE754(v, 8, 23);
  }
  function fround(x) {
    if (x === 0 || !$isFinite(x) || $isNaN(x)) {
      return x;
    }
    return unpackF32(packF32(Number(x)));
  }
  return {get fround() {
      return fround;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/Math.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/Math.js";
  var jsFround = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./fround.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Math.js")).fround;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/Math.js")),
      maybeAddFunctions = $__1.maybeAddFunctions,
      registerPolyfill = $__1.registerPolyfill,
      toUint32 = $__1.toUint32;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__3 = Math,
      abs = $__3.abs,
      ceil = $__3.ceil,
      exp = $__3.exp,
      floor = $__3.floor,
      log = $__3.log,
      pow = $__3.pow,
      sqrt = $__3.sqrt;
  function clz32(x) {
    x = toUint32(+x);
    if (x == 0)
      return 32;
    var result = 0;
    if ((x & 0xFFFF0000) === 0) {
      x <<= 16;
      result += 16;
    }
    ;
    if ((x & 0xFF000000) === 0) {
      x <<= 8;
      result += 8;
    }
    ;
    if ((x & 0xF0000000) === 0) {
      x <<= 4;
      result += 4;
    }
    ;
    if ((x & 0xC0000000) === 0) {
      x <<= 2;
      result += 2;
    }
    ;
    if ((x & 0x80000000) === 0) {
      x <<= 1;
      result += 1;
    }
    ;
    return result;
  }
  function imul(x, y) {
    x = toUint32(+x);
    y = toUint32(+y);
    var xh = (x >>> 16) & 0xffff;
    var xl = x & 0xffff;
    var yh = (y >>> 16) & 0xffff;
    var yl = y & 0xffff;
    return xl * yl + (((xh * yl + xl * yh) << 16) >>> 0) | 0;
  }
  function sign(x) {
    x = +x;
    if (x > 0)
      return 1;
    if (x < 0)
      return -1;
    return x;
  }
  function log10(x) {
    return log(x) * 0.434294481903251828;
  }
  function log2(x) {
    return log(x) * 1.442695040888963407;
  }
  function log1p(x) {
    x = +x;
    if (x < -1 || $isNaN(x)) {
      return NaN;
    }
    if (x === 0 || x === Infinity) {
      return x;
    }
    if (x === -1) {
      return -Infinity;
    }
    var result = 0;
    var n = 50;
    if (x < 0 || x > 1) {
      return log(1 + x);
    }
    for (var i = 1; i < n; i++) {
      if ((i % 2) === 0) {
        result -= pow(x, i) / i;
      } else {
        result += pow(x, i) / i;
      }
    }
    return result;
  }
  function expm1(x) {
    x = +x;
    if (x === -Infinity) {
      return -1;
    }
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return exp(x) - 1;
  }
  function cosh(x) {
    x = +x;
    if (x === 0) {
      return 1;
    }
    if ($isNaN(x)) {
      return NaN;
    }
    if (!$isFinite(x)) {
      return Infinity;
    }
    if (x < 0) {
      x = -x;
    }
    if (x > 21) {
      return exp(x) / 2;
    }
    return (exp(x) + exp(-x)) / 2;
  }
  function sinh(x) {
    x = +x;
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return (exp(x) - exp(-x)) / 2;
  }
  function tanh(x) {
    x = +x;
    if (x === 0)
      return x;
    if (!$isFinite(x))
      return sign(x);
    var exp1 = exp(x);
    var exp2 = exp(-x);
    return (exp1 - exp2) / (exp1 + exp2);
  }
  function acosh(x) {
    x = +x;
    if (x < 1)
      return NaN;
    if (!$isFinite(x))
      return x;
    return log(x + sqrt(x + 1) * sqrt(x - 1));
  }
  function asinh(x) {
    x = +x;
    if (x === 0 || !$isFinite(x))
      return x;
    if (x > 0)
      return log(x + sqrt(x * x + 1));
    return -log(-x + sqrt(x * x + 1));
  }
  function atanh(x) {
    x = +x;
    if (x === -1) {
      return -Infinity;
    }
    if (x === 1) {
      return Infinity;
    }
    if (x === 0) {
      return x;
    }
    if ($isNaN(x) || x < -1 || x > 1) {
      return NaN;
    }
    return 0.5 * log((1 + x) / (1 - x));
  }
  function hypot(x, y) {
    var length = arguments.length;
    var args = new Array(length);
    var max = 0;
    for (var i = 0; i < length; i++) {
      var n = arguments[i];
      n = +n;
      if (n === Infinity || n === -Infinity)
        return Infinity;
      n = abs(n);
      if (n > max)
        max = n;
      args[i] = n;
    }
    if (max === 0)
      max = 1;
    var sum = 0;
    var compensation = 0;
    for (var i = 0; i < length; i++) {
      var n = args[i] / max;
      var summand = n * n - compensation;
      var preliminary = sum + summand;
      compensation = (preliminary - sum) - summand;
      sum = preliminary;
    }
    return sqrt(sum) * max;
  }
  function trunc(x) {
    x = +x;
    if (x > 0)
      return floor(x);
    if (x < 0)
      return ceil(x);
    return x;
  }
  var fround,
      f32;
  if (typeof Float32Array === 'function') {
    f32 = new Float32Array(1);
    fround = function(x) {
      f32[0] = Number(x);
      return f32[0];
    };
  } else {
    fround = jsFround;
  }
  function cbrt(x) {
    x = +x;
    if (x === 0)
      return x;
    var negate = x < 0;
    if (negate)
      x = -x;
    var result = pow(x, 1 / 3);
    return negate ? -result : result;
  }
  function polyfillMath(global) {
    var Math = global.Math;
    maybeAddFunctions(Math, ['acosh', acosh, 'asinh', asinh, 'atanh', atanh, 'cbrt', cbrt, 'clz32', clz32, 'cosh', cosh, 'expm1', expm1, 'fround', fround, 'hypot', hypot, 'imul', imul, 'log10', log10, 'log1p', log1p, 'log2', log2, 'sign', sign, 'sinh', sinh, 'tanh', tanh, 'trunc', trunc]);
  }
  registerPolyfill(polyfillMath);
  return {
    get clz32() {
      return clz32;
    },
    get imul() {
      return imul;
    },
    get sign() {
      return sign;
    },
    get log10() {
      return log10;
    },
    get log2() {
      return log2;
    },
    get log1p() {
      return log1p;
    },
    get expm1() {
      return expm1;
    },
    get cosh() {
      return cosh;
    },
    get sinh() {
      return sinh;
    },
    get tanh() {
      return tanh;
    },
    get acosh() {
      return acosh;
    },
    get asinh() {
      return asinh;
    },
    get atanh() {
      return atanh;
    },
    get hypot() {
      return hypot;
    },
    get trunc() {
      return trunc;
    },
    get fround() {
      return fround;
    },
    get cbrt() {
      return cbrt;
    },
    get polyfillMath() {
      return polyfillMath;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/Math.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js")),
      createPrivateSymbol = $__0.createPrivateSymbol,
      deletePrivate = $__0.deletePrivate,
      getPrivate = $__0.getPrivate,
      hasPrivate = $__0.hasPrivate,
      setPrivate = $__0.setPrivate;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js")),
      deleteFrozen = $__1.deleteFrozen,
      getFrozen = $__1.getFrozen,
      hasFrozen = $__1.hasFrozen,
      setFrozen = $__1.setFrozen;
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js")),
      isObject = $__2.isObject,
      registerPolyfill = $__2.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js")).default;
  var $__6 = Object,
      defineProperty = $__6.defineProperty,
      getOwnPropertyDescriptor = $__6.getOwnPropertyDescriptor,
      isExtensible = $__6.isExtensible;
  var $TypeError = TypeError;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var sentinel = {};
  var WeakMap = function() {
    function WeakMap() {
      this.name_ = createPrivateSymbol();
      this.frozenData_ = [];
    }
    return ($traceurRuntime.createClass)(WeakMap, {
      set: function(key, value) {
        if (!isObject(key))
          throw new $TypeError('key must be an object');
        if (!isExtensible(key)) {
          setFrozen(this.frozenData_, key, value);
        } else {
          setPrivate(key, this.name_, value);
        }
        return this;
      },
      get: function(key) {
        if (!isObject(key))
          return undefined;
        if (!isExtensible(key)) {
          return getFrozen(this.frozenData_, key);
        }
        return getPrivate(key, this.name_);
      },
      delete: function(key) {
        if (!isObject(key))
          return false;
        if (!isExtensible(key)) {
          return deleteFrozen(this.frozenData_, key);
        }
        return deletePrivate(key, this.name_);
      },
      has: function(key) {
        if (!isObject(key))
          return false;
        if (!isExtensible(key)) {
          return hasFrozen(this.frozenData_, key);
        }
        return hasPrivate(key, this.name_);
      }
    }, {});
  }();
  function needsPolyfill(global) {
    var $__8 = global,
        WeakMap = $__8.WeakMap,
        Symbol = $__8.Symbol;
    if (!WeakMap || !hasNativeSymbol()) {
      return true;
    }
    try {
      var o = {};
      var wm = new WeakMap([[o, false]]);
      return wm.get(o);
    } catch (e) {
      return false;
    }
  }
  function polyfillWeakMap(global) {
    if (needsPolyfill(global)) {
      global.WeakMap = WeakMap;
    }
  }
  registerPolyfill(polyfillWeakMap);
  return {
    get WeakMap() {
      return WeakMap;
    },
    get polyfillWeakMap() {
      return polyfillWeakMap;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/WeakMap.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js")),
      createPrivateSymbol = $__0.createPrivateSymbol,
      deletePrivate = $__0.deletePrivate,
      getPrivate = $__0.getPrivate,
      hasPrivate = $__0.hasPrivate,
      setPrivate = $__0.setPrivate;
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js")),
      deleteFrozen = $__1.deleteFrozen,
      getFrozen = $__1.getFrozen,
      setFrozen = $__1.setFrozen;
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js")),
      isObject = $__2.isObject,
      registerPolyfill = $__2.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js")).default;
  var $__6 = Object,
      defineProperty = $__6.defineProperty,
      isExtensible = $__6.isExtensible;
  var $TypeError = TypeError;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var WeakSet = function() {
    function WeakSet() {
      this.name_ = createPrivateSymbol();
      this.frozenData_ = [];
    }
    return ($traceurRuntime.createClass)(WeakSet, {
      add: function(value) {
        if (!isObject(value))
          throw new $TypeError('value must be an object');
        if (!isExtensible(value)) {
          setFrozen(this.frozenData_, value, value);
        } else {
          setPrivate(value, this.name_, true);
        }
        return this;
      },
      delete: function(value) {
        if (!isObject(value))
          return false;
        if (!isExtensible(value)) {
          return deleteFrozen(this.frozenData_, value);
        }
        return deletePrivate(value, this.name_);
      },
      has: function(value) {
        if (!isObject(value))
          return false;
        if (!isExtensible(value)) {
          return getFrozen(this.frozenData_, value) === value;
        }
        return hasPrivate(value, this.name_);
      }
    }, {});
  }();
  function needsPolyfill(global) {
    var $__8 = global,
        WeakSet = $__8.WeakSet,
        Symbol = $__8.Symbol;
    if (!WeakSet || !hasNativeSymbol()) {
      return true;
    }
    try {
      var o = {};
      var wm = new WeakSet([[o]]);
      return !wm.has(o);
    } catch (e) {
      return false;
    }
  }
  function polyfillWeakSet(global) {
    if (needsPolyfill(global)) {
      global.WeakSet = WeakSet;
    }
  }
  registerPolyfill(polyfillWeakSet);
  return {
    get WeakSet() {
      return WeakSet;
    },
    get polyfillWeakSet() {
      return polyfillWeakSet;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/WeakSet.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.102/src/runtime/polyfills/polyfills.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.102/src/runtime/polyfills/polyfills.js";
  var polyfillAll = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.102/src/runtime/polyfills/polyfills.js")).polyfillAll;
  polyfillAll(Reflect.global);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
    polyfillAll(global);
  };
  return {};
});
$traceurRuntime.getModule("traceur-runtime@0.0.102/src/runtime/polyfills/polyfills.js" + '');

System = curSystem; })();
!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in g||(g[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==m.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=g[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(m.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=g[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return D[e]||(D[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},r.name);t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=g[s],f=D[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=v(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=g[e];if(t)t.declarative?p(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=v(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=g[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(e){var r={};if("object"==typeof e||"function"==typeof e){var t=e&&e.hasOwnProperty;if(h)for(var n in e)f(r,e,n)||c(r,e,n,t);else for(var n in e)c(r,e,n,t)}return r["default"]=e,y(r,"__useDefault",{value:!0}),r}function c(e,r,t,n){(!n||r.hasOwnProperty(t))&&(e[t]=r[t])}function f(e,r,t){try{var n;return(n=Object.getOwnPropertyDescriptor(r,t))&&y(e,t,n),!0}catch(o){return!1}}function p(r,t){var n=g[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==m.call(t,u)&&(g[u]?p(u,t):v(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function v(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return _(e.substr(6));var r=g[e];if(!r)throw"Module "+e+" not present.";return a(e),p(e,[]),g[e]=void 0,r.declarative&&y(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var g={},m=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},h=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(x){h=!1}var y;!function(){try{Object.defineProperty({},"a",{})&&(y=Object.defineProperty)}catch(e){y=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var D={},_="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o){return function(a){a(function(a){for(var u={_nodeRequire:_,register:r,registerDynamic:t,get:v,set:function(e,r){I[e]=r},newModule:function(e){return e}},d=0;d<n.length;d++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[d],arguments[d]);o(u);var i=v(e[0]);if(e.length>1)for(var d=1;d<e.length;d++)v(e[d]);return i.__useDefault?i["default"]:i})}}}("undefined"!=typeof self?self:global)

(["1"], [], function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
$__System.registerDynamic("2", ["4", "5", "6", "7", "8", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(whitelist) {
    var outputType = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];
    var namespace = t.identifier("babelHelpers");
    var builder = function builder(body) {
      return buildHelpers(body, namespace, whitelist);
    };
    var tree = void 0;
    var build = {
      global: buildGlobal,
      umd: buildUmd,
      var: buildVar
    }[outputType];
    if (build) {
      tree = build(namespace, builder);
    } else {
      throw new Error(messages.get("unsupportedOutputType", outputType));
    }
    return ((0, _babelGenerator2.default)(tree).code);
  };
  var _babelHelpers = $__require('4');
  var helpers = _interopRequireWildcard(_babelHelpers);
  var _babelGenerator = $__require('5');
  var _babelGenerator2 = _interopRequireDefault(_babelGenerator);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _each = $__require('8');
  var _each2 = _interopRequireDefault(_each);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var buildUmdWrapper = (0, _babelTemplate2.default)("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");
  function buildGlobal(namespace, builder) {
    var body = [];
    var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
    var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);
    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));
    builder(body);
    return tree;
  }
  function buildUmd(namespace, builder) {
    var body = [];
    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));
    builder(body);
    return t.program([buildUmdWrapper({
      FACTORY_PARAMETERS: t.identifier("global"),
      BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
      COMMON_ARGUMENTS: t.identifier("exports"),
      AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
      FACTORY_BODY: body,
      UMD_ROOT: t.identifier("this")
    })]);
  }
  function buildVar(namespace, builder) {
    var body = [];
    body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
    builder(body);
    body.push(t.expressionStatement(namespace));
    return t.program(body);
  }
  function buildHelpers(body, namespace, whitelist) {
    (0, _each2.default)(helpers.list, function(name) {
      if (whitelist && whitelist.indexOf(name) < 0)
        return;
      var key = t.identifier(name);
      body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
    });
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("a", [], false, function() {
  return {
    "name": "babel-core",
    "version": "6.8.0",
    "description": "Babel compiler core.",
    "author": "Sebastian McKenzie <sebmck@gmail.com>",
    "homepage": "https://babeljs.io/",
    "license": "MIT",
    "repository": "https://github.com/babel/babel/tree/master/packages/babel-core",
    "keywords": [
      "6to5",
      "babel",
      "classes",
      "const",
      "es6",
      "harmony",
      "let",
      "modules",
      "transpile",
      "transpiler",
      "var"
    ],
    "scripts": {
      "bench": "make bench",
      "test": "make test"
    },
    "dependencies": {
      "babel-code-frame": "^6.8.0",
      "babel-generator": "^6.8.0",
      "babel-helpers": "^6.8.0",
      "babel-messages": "^6.8.0",
      "babel-template": "^6.8.0",
      "babel-runtime": "^6.0.0",
      "babel-register": "^6.8.0",
      "babel-traverse": "^6.8.0",
      "babel-types": "^6.8.0",
      "babylon": "^6.7.0",
      "convert-source-map": "^1.1.0",
      "debug": "^2.1.1",
      "json5": "^0.4.0",
      "lodash": "^3.10.0",
      "minimatch": "^2.0.3",
      "path-exists": "^1.0.0",
      "path-is-absolute": "^1.0.0",
      "private": "^0.1.6",
      "shebang-regex": "^1.0.0",
      "slash": "^1.0.0",
      "source-map": "^0.5.0"
    },
    "devDependencies": {
      "babel-helper-fixtures": "^6.8.0",
      "babel-helper-transform-fixture-test-runner": "^6.8.0",
      "babel-polyfill": "^6.8.0"
    }
  };
});

$__System.registerDynamic("b", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(ast, comments, tokens) {
    if (ast) {
      if (ast.type === "Program") {
        return t.file(ast, comments || [], tokens || []);
      } else if (ast.type === "File") {
        return ast;
      }
    }
    throw new Error("Not a valid ast?");
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c", ["7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var helpers = {};
  exports.default = helpers;
  helpers.typeof = (0, _babelTemplate2.default)("\n  (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\")\n    ? function (obj) { return typeof obj; }\n    : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n");
  helpers.jsx = (0, _babelTemplate2.default)("\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");
  helpers.asyncToGenerator = (0, _babelTemplate2.default)("\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              return step(\"next\", value);\n            }, function (err) {\n              return step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  })\n");
  helpers.classCallCheck = (0, _babelTemplate2.default)("\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");
  helpers.createClass = (0, _babelTemplate2.default)("\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");
  helpers.defineEnumerableProperties = (0, _babelTemplate2.default)("\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");
  helpers.defaults = (0, _babelTemplate2.default)("\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");
  helpers.defineProperty = (0, _babelTemplate2.default)("\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");
  helpers.extends = (0, _babelTemplate2.default)("\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");
  helpers.get = (0, _babelTemplate2.default)("\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");
  helpers.inherits = (0, _babelTemplate2.default)("\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");
  helpers.instanceof = (0, _babelTemplate2.default)("\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");
  helpers.interopRequireDefault = (0, _babelTemplate2.default)("\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");
  helpers.interopRequireWildcard = (0, _babelTemplate2.default)("\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");
  helpers.newArrowCheck = (0, _babelTemplate2.default)("\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");
  helpers.objectDestructuringEmpty = (0, _babelTemplate2.default)("\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");
  helpers.objectWithoutProperties = (0, _babelTemplate2.default)("\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");
  helpers.possibleConstructorReturn = (0, _babelTemplate2.default)("\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");
  helpers.selfGlobal = (0, _babelTemplate2.default)("\n  typeof global === \"undefined\" ? self : global\n");
  helpers.set = (0, _babelTemplate2.default)("\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");
  helpers.slicedToArray = (0, _babelTemplate2.default)("\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");
  helpers.slicedToArrayLoose = (0, _babelTemplate2.default)("\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");
  helpers.taggedTemplateLiteral = (0, _babelTemplate2.default)("\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");
  helpers.taggedTemplateLiteralLoose = (0, _babelTemplate2.default)("\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");
  helpers.temporalRef = (0, _babelTemplate2.default)("\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");
  helpers.temporalUndefined = (0, _babelTemplate2.default)("\n  ({})\n");
  helpers.toArray = (0, _babelTemplate2.default)("\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");
  helpers.toConsumableArray = (0, _babelTemplate2.default)("\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("4", ["d", "c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.list = undefined;
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  exports.get = get;
  var _helpers = $__require('c');
  var _helpers2 = _interopRequireDefault(_helpers);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function get(name) {
    var fn = _helpers2.default[name];
    if (!fn)
      throw new ReferenceError("Unknown helper " + name);
    return fn().expression;
  }
  var list = exports.list = (0, _keys2.default)(_helpers2.default).map(function(name) {
    return name[0] === "_" ? name.slice(1) : name;
  }).filter(function(name) {
    return name !== "__esModule";
  });
  exports.default = get;
  return module.exports;
});

$__System.registerDynamic("e", ["f", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.ImportDeclaration = exports.ModuleDeclaration = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.ExportDeclaration = ExportDeclaration;
  exports.Scope = Scope;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var ModuleDeclaration = exports.ModuleDeclaration = {enter: function enter(path, file) {
      var node = path.node;
      if (node.source) {
        node.source.value = file.resolveModuleSource(node.source.value);
      }
    }};
  var ImportDeclaration = exports.ImportDeclaration = {exit: function exit(path, file) {
      var node = path.node;
      var specifiers = [];
      var imported = [];
      file.metadata.modules.imports.push({
        source: node.source.value,
        imported: imported,
        specifiers: specifiers
      });
      for (var _iterator = path.get("specifiers"),
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var specifier = _ref;
        var local = specifier.node.local.name;
        if (specifier.isImportDefaultSpecifier()) {
          imported.push("default");
          specifiers.push({
            kind: "named",
            imported: "default",
            local: local
          });
        }
        if (specifier.isImportSpecifier()) {
          var importedName = specifier.node.imported.name;
          imported.push(importedName);
          specifiers.push({
            kind: "named",
            imported: importedName,
            local: local
          });
        }
        if (specifier.isImportNamespaceSpecifier()) {
          imported.push("*");
          specifiers.push({
            kind: "namespace",
            local: local
          });
        }
      }
    }};
  function ExportDeclaration(path, file) {
    var node = path.node;
    var source = node.source ? node.source.value : null;
    var exports = file.metadata.modules.exports;
    var declar = path.get("declaration");
    if (declar.isStatement()) {
      var bindings = declar.getBindingIdentifiers();
      for (var name in bindings) {
        exports.exported.push(name);
        exports.specifiers.push({
          kind: "local",
          local: name,
          exported: path.isExportDefaultDeclaration() ? "default" : name
        });
      }
    }
    if (path.isExportNamedDeclaration() && node.specifiers) {
      for (var _iterator2 = node.specifiers,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var specifier = _ref2;
        var exported = specifier.exported.name;
        exports.exported.push(exported);
        if (t.isExportDefaultSpecifier(specifier)) {
          exports.specifiers.push({
            kind: "external",
            local: exported,
            exported: exported,
            source: source
          });
        }
        if (t.isExportNamespaceSpecifier(specifier)) {
          exports.specifiers.push({
            kind: "external-namespace",
            exported: exported,
            source: source
          });
        }
        var local = specifier.local;
        if (!local)
          continue;
        if (source) {
          exports.specifiers.push({
            kind: "external",
            local: local.name,
            exported: exported,
            source: source
          });
        }
        if (!source) {
          exports.specifiers.push({
            kind: "local",
            local: local.name,
            exported: exported
          });
        }
      }
    }
    if (path.isExportAllDeclaration()) {
      exports.specifiers.push({
        kind: "external-all",
        source: source
      });
    }
  }
  function Scope(path) {
    path.skip();
  }
  return module.exports;
});

$__System.registerDynamic("10", ["@node/fs", "@node/path", "11"], true, function($__require, exports, module) {
  "use strict";
  var Buffer = $__require("11");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  var path = $__require('@node/path');
  var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
  var mapFileCommentRx = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;
  function decodeBase64(base64) {
    return new Buffer(base64, 'base64').toString();
  }
  function stripComment(sm) {
    return sm.split(',').pop();
  }
  function readFromFileMap(sm, dir) {
    var r = mapFileCommentRx.exec(sm);
    mapFileCommentRx.lastIndex = 0;
    var filename = r[1] || r[2];
    var filepath = path.join(dir, filename);
    try {
      return fs.readFileSync(filepath, 'utf8');
    } catch (e) {
      throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
    }
  }
  function Converter(sm, opts) {
    opts = opts || {};
    if (opts.isFileComment)
      sm = readFromFileMap(sm, opts.commentFileDir);
    if (opts.hasComment)
      sm = stripComment(sm);
    if (opts.isEncoded)
      sm = decodeBase64(sm);
    if (opts.isJSON || opts.isEncoded)
      sm = JSON.parse(sm);
    this.sourcemap = sm;
  }
  function convertFromLargeSource(content) {
    var lines = content.split('\n');
    var line;
    for (var i = lines.length - 1; i > 0; i--) {
      line = lines[i];
      if (~line.indexOf('sourceMappingURL=data:'))
        return exports.fromComment(line);
    }
  }
  Converter.prototype.toJSON = function(space) {
    return JSON.stringify(this.sourcemap, null, space);
  };
  Converter.prototype.toBase64 = function() {
    var json = this.toJSON();
    return new Buffer(json).toString('base64');
  };
  Converter.prototype.toComment = function(options) {
    var base64 = this.toBase64();
    var data = 'sourceMappingURL=data:application/json;base64,' + base64;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };
  Converter.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
  };
  Converter.prototype.addProperty = function(key, value) {
    if (this.sourcemap.hasOwnProperty(key))
      throw new Error('property %s already exists on the sourcemap, use set property instead');
    return this.setProperty(key, value);
  };
  Converter.prototype.setProperty = function(key, value) {
    this.sourcemap[key] = value;
    return this;
  };
  Converter.prototype.getProperty = function(key) {
    return this.sourcemap[key];
  };
  exports.fromObject = function(obj) {
    return new Converter(obj);
  };
  exports.fromJSON = function(json) {
    return new Converter(json, {isJSON: true});
  };
  exports.fromBase64 = function(base64) {
    return new Converter(base64, {isEncoded: true});
  };
  exports.fromComment = function(comment) {
    comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');
    return new Converter(comment, {
      isEncoded: true,
      hasComment: true
    });
  };
  exports.fromMapFileComment = function(comment, dir) {
    return new Converter(comment, {
      commentFileDir: dir,
      isFileComment: true,
      isJSON: true
    });
  };
  exports.fromSource = function(content, largeSource) {
    if (largeSource) {
      var res = convertFromLargeSource(content);
      return res ? res : null;
    }
    var m = content.match(commentRx);
    commentRx.lastIndex = 0;
    return m ? exports.fromComment(m.pop()) : null;
  };
  exports.fromMapFileSource = function(content, dir) {
    var m = content.match(mapFileCommentRx);
    mapFileCommentRx.lastIndex = 0;
    return m ? exports.fromMapFileComment(m.pop(), dir) : null;
  };
  exports.removeComments = function(src) {
    commentRx.lastIndex = 0;
    return src.replace(commentRx, '');
  };
  exports.removeMapFileComments = function(src) {
    mapFileCommentRx.lastIndex = 0;
    return src.replace(mapFileCommentRx, '');
  };
  exports.generateMapFileComment = function(file, options) {
    var data = 'sourceMappingURL=' + file;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };
  Object.defineProperty(exports, 'commentRegex', {get: function getCommentRegex() {
      commentRx.lastIndex = 0;
      return commentRx;
    }});
  Object.defineProperty(exports, 'mapFileCommentRegex', {get: function getMapFileCommentRegex() {
      mapFileCommentRx.lastIndex = 0;
      return mapFileCommentRx;
    }});
  return module.exports;
});

$__System.registerDynamic("12", ["15", "16", "17", "13", "18", "14", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _store = $__require('13');
  var _store2 = _interopRequireDefault(_store);
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _file5 = $__require('14');
  var _file6 = _interopRequireDefault(_file5);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var PluginPass = function(_Store) {
    (0, _inherits3.default)(PluginPass, _Store);
    function PluginPass(file, plugin) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      (0, _classCallCheck3.default)(this, PluginPass);
      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));
      _this.plugin = plugin;
      _this.file = file;
      _this.opts = options;
      return _this;
    }
    PluginPass.prototype.transform = function transform() {
      var file = this.file;
      file.log.debug("Start transformer " + this.key);
      (0, _babelTraverse2.default)(file.ast, this.plugin.visitor, file.scope, file);
      file.log.debug("Finish transformer " + this.key);
    };
    PluginPass.prototype.addHelper = function addHelper() {
      var _file;
      return ((_file = this.file).addHelper.apply(_file, arguments));
    };
    PluginPass.prototype.addImport = function addImport() {
      var _file2;
      return ((_file2 = this.file).addImport.apply(_file2, arguments));
    };
    PluginPass.prototype.getModuleName = function getModuleName() {
      var _file3;
      return ((_file3 = this.file).getModuleName.apply(_file3, arguments));
    };
    PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
      var _file4;
      return ((_file4 = this.file).buildCodeFrameError.apply(_file4, arguments));
    };
    return PluginPass;
  }(_store2.default);
  exports.default = PluginPass;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("19", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = /^#!.*/;
  return module.exports;
});

$__System.registerDynamic("1a", ["1b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var repeating = $__require('1b');
  var INDENT_RE = /^(?:( )+|\t+)/;
  function getMostUsed(indents) {
    var result = 0;
    var maxUsed = 0;
    var maxWeight = 0;
    for (var n in indents) {
      var indent = indents[n];
      var u = indent[0];
      var w = indent[1];
      if (u > maxUsed || u === maxUsed && w > maxWeight) {
        maxUsed = u;
        maxWeight = w;
        result = +n;
      }
    }
    return result;
  }
  module.exports = function(str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }
    var tabs = 0;
    var spaces = 0;
    var prev = 0;
    var indents = {};
    var current;
    var isIndent;
    str.split(/\n/g).forEach(function(line) {
      if (!line) {
        return;
      }
      var indent;
      var matches = line.match(INDENT_RE);
      if (!matches) {
        indent = 0;
      } else {
        indent = matches[0].length;
        if (matches[1]) {
          spaces++;
        } else {
          tabs++;
        }
      }
      var diff = indent - prev;
      prev = indent;
      if (diff) {
        isIndent = diff > 0;
        current = indents[isIndent ? diff : -diff];
        if (current) {
          current[0]++;
        } else {
          current = indents[diff] = [1, 0];
        }
      } else if (current) {
        current[1] += +isIndent;
      }
    });
    var amount = getMostUsed(indents);
    var type;
    var actual;
    if (!amount) {
      type = null;
      actual = '';
    } else if (spaces >= tabs) {
      type = 'space';
      actual = repeating(' ', amount);
    } else {
      type = 'tab';
      actual = repeating('\t', amount);
    }
    return {
      amount: amount,
      type: type,
      indent: actual
    };
  };
  return module.exports;
});

$__System.registerDynamic("1c", ["15"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Whitespace = function() {
    function Whitespace(tokens) {
      (0, _classCallCheck3.default)(this, Whitespace);
      this.tokens = tokens;
      this.used = {};
    }
    Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
      var startToken = void 0;
      var endToken = void 0;
      var tokens = this.tokens;
      var index = this._findToken(function(token) {
        return token.start - node.start;
      }, 0, tokens.length);
      if (index >= 0) {
        while (index && node.start === tokens[index - 1].start) {
          --index;
        }
        startToken = tokens[index - 1];
        endToken = tokens[index];
      }
      return this.getNewlinesBetween(startToken, endToken);
    };
    Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
      var startToken = void 0;
      var endToken = void 0;
      var tokens = this.tokens;
      var index = this._findToken(function(token) {
        return token.end - node.end;
      }, 0, tokens.length);
      if (index >= 0) {
        while (index && node.end === tokens[index - 1].end) {
          --index;
        }
        startToken = tokens[index];
        endToken = tokens[index + 1];
        if (endToken.type.label === ",")
          endToken = tokens[index + 2];
      }
      if (endToken && endToken.type.label === "eof") {
        return 1;
      } else {
        var lines = this.getNewlinesBetween(startToken, endToken);
        if (node.type === "CommentLine" && !lines) {
          return 1;
        } else {
          return lines;
        }
      }
    };
    Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
      if (!endToken || !endToken.loc)
        return 0;
      var start = startToken ? startToken.loc.end.line : 1;
      var end = endToken.loc.start.line;
      var lines = 0;
      for (var line = start; line < end; line++) {
        if (typeof this.used[line] === "undefined") {
          this.used[line] = true;
          lines++;
        }
      }
      return lines;
    };
    Whitespace.prototype._findToken = function _findToken(test, start, end) {
      if (start >= end)
        return -1;
      var middle = start + end >>> 1;
      var match = test(this.tokens[middle]);
      if (match < 0) {
        return this._findToken(test, middle + 1, end);
      } else if (match > 0) {
        return this._findToken(test, start, middle);
      } else if (match === 0) {
        return middle;
      }
      return -1;
    };
    return Whitespace;
  }();
  exports.default = Whitespace;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("1d", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      return mid;
    } else if (cmp > 0) {
      if (aHigh - mid > 1) {
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    } else {
      if (mid - aLow > 1) {
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }
    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }
    return index;
  };
  return module.exports;
});

$__System.registerDynamic("1e", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }
  function doQuickSort(ary, comparator, p, r) {
    if (p < r) {
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;
      swap(ary, pivotIndex, r);
      var pivot = ary[r];
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }
      swap(ary, i + 1, j);
      var q = i + 1;
      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }
  exports.quickSort = function(ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };
  return module.exports;
});

$__System.registerDynamic("1f", ["20", "1d", "21", "22", "1e"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('20');
  var binarySearch = $__require('1d');
  var ArraySet = $__require('21').ArraySet;
  var base64VLQ = $__require('22');
  var quickSort = $__require('1e').quickSort;
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }
    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
  }
  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
  };
  SourceMapConsumer.prototype._version = 3;
  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {get: function() {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__generatedMappings;
    }});
  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {get: function() {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }
      return this.__originalMappings;
    }});
  SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };
  SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };
  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;
  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;
  SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    var mappings;
    switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
    }
    var sourceRoot = this.sourceRoot;
    mappings.map(function(mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      if (source != null && sourceRoot != null) {
        source = util.join(sourceRoot, source);
      }
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };
  SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };
    if (this.sourceRoot != null) {
      needle.source = util.relative(this.sourceRoot, needle.source);
    }
    if (!this._sources.has(needle.source)) {
      return [];
    }
    needle.source = this._sources.indexOf(needle.source);
    var mappings = [];
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });
          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;
        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });
          mapping = this._originalMappings[++index];
        }
      }
    }
    return mappings;
  };
  exports.SourceMapConsumer = SourceMapConsumer;
  function BasicSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }
    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }
    sources = sources.map(String).map(util.normalize).map(function(source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
    });
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);
    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }
  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
  BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);
    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
    smc.file = aSourceMap._file;
    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];
    for (var i = 0,
        length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;
      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;
        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }
        destOriginalMappings.push(destMapping);
      }
      destGeneratedMappings.push(destMapping);
    }
    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
    return smc;
  };
  BasicSourceMapConsumer.prototype._version = 3;
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {get: function() {
      return this._sources.toArray().map(function(s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }});
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }
  BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping,
        str,
        segment,
        end,
        value;
    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      } else if (aStr.charAt(index) === ',') {
        index++;
      } else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);
        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }
          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }
          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }
          cachedSegments[str] = segment;
        }
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;
        if (segment.length > 1) {
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          mapping.originalLine += 1;
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;
          if (segment.length > 4) {
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }
        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }
    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;
    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };
  BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
    }
    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };
  BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];
        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }
      mapping.lastGeneratedColumn = Infinity;
    }
  };
  BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._generatedMappings[index];
      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          if (this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
      return sc == null;
    });
  };
  BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }
    if (this.sourceRoot != null) {
      aSource = util.relative(this.sourceRoot, aSource);
    }
    if (this._sources.has(aSource)) {
      return this.sourcesContent[this._sources.indexOf(aSource)];
    }
    var url;
    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
      if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
      }
      if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
      }
    }
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };
  BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    if (this.sourceRoot != null) {
      source = util.relative(this.sourceRoot, source);
    }
    if (!this._sources.has(source)) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }
    source = this._sources.indexOf(source);
    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
      var mapping = this._originalMappings[index];
      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };
  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
  function IndexedSourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }
    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }
    this._sources = new ArraySet();
    this._names = new ArraySet();
    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function(s) {
      if (s.url) {
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');
      if (offsetLine < lastOffset.line || (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;
      return {
        generatedOffset: {
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
      };
    });
  }
  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
  IndexedSourceMapConsumer.prototype._version = 3;
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {get: function() {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      }
      return sources;
    }});
  IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };
    var sectionIndex = binarySearch.search(needle, this._sections, function(needle, section) {
      var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
      if (cmp) {
        return cmp;
      }
      return (needle.generatedColumn - section.generatedOffset.generatedColumn);
    });
    var section = this._sections[sectionIndex];
    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }
    return section.consumer.originalPositionFor({
      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
      bias: aArgs.bias
    });
  };
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function(s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };
  IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    } else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };
  IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
        };
        return ret;
      }
    }
    return {
      line: null,
      column: null
    };
  };
  IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];
        var source = section.consumer._sources.at(mapping.source);
        if (section.consumer.sourceRoot !== null) {
          source = util.join(section.consumer.sourceRoot, source);
        }
        this._sources.add(source);
        source = this._sources.indexOf(source);
        var name = section.consumer._names.at(mapping.name);
        this._names.add(name);
        name = this._names.indexOf(name);
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };
        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }
    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };
  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  return module.exports;
});

$__System.registerDynamic("23", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
  exports.encode = function(number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };
  exports.decode = function(charCode) {
    var bigA = 65;
    var bigZ = 90;
    var littleA = 97;
    var littleZ = 122;
    var zero = 48;
    var nine = 57;
    var plus = 43;
    var slash = 47;
    var littleOffset = 26;
    var numberOffset = 52;
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }
    if (charCode == plus) {
      return 62;
    }
    if (charCode == slash) {
      return 63;
    }
    return -1;
  };
  return module.exports;
});

$__System.registerDynamic("22", ["23"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var base64 = $__require('23');
  var VLQ_BASE_SHIFT = 5;
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
  var VLQ_BASE_MASK = VLQ_BASE - 1;
  var VLQ_CONTINUATION_BIT = VLQ_BASE;
  function toVLQSigned(aValue) {
    return aValue < 0 ? ((-aValue) << 1) + 1 : (aValue << 1) + 0;
  }
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
  }
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);
    return encoded;
  };
  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation,
        digit;
    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };
  return module.exports;
});

$__System.registerDynamic("21", ["20"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('20');
  var has = Object.prototype.hasOwnProperty;
  function ArraySet() {
    this._array = [];
    this._set = Object.create(null);
  }
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0,
        len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };
  ArraySet.prototype.size = function ArraySet_size() {
    return Object.getOwnPropertyNames(this._set).length;
  };
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = util.toSetString(aStr);
    var isDuplicate = has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[sStr] = idx;
    }
  };
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  };
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };
  exports.ArraySet = ArraySet;
  return module.exports;
});

$__System.registerDynamic("24", ["20"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('20');
  function generatedPositionAfter(mappingA, mappingB) {
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }
  function MappingList() {
    this._array = [];
    this._sorted = true;
    this._last = {
      generatedLine: -1,
      generatedColumn: 0
    };
  }
  MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };
  MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };
  exports.MappingList = MappingList;
  return module.exports;
});

$__System.registerDynamic("25", ["22", "20", "21", "24"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var base64VLQ = $__require('22');
  var util = $__require('20');
  var ArraySet = $__require('21').ArraySet;
  var MappingList = $__require('24').MappingList;
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }
  SourceMapGenerator.prototype._version = 3;
  SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function(mapping) {
      var newMapping = {generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }};
      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }
        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };
        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }
      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };
  SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);
    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }
    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }
    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }
    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };
  SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }
    if (aSourceContent != null) {
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };
  SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    var newSources = new ArraySet();
    var newNames = new ArraySet();
    this._mappings.unsortedForEach(function(mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }
      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }
      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }
    }, this);
    this._sources = newSources;
    this._names = newNames;
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };
  SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
      return;
    } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
      return;
    } else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };
  SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for (var i = 0,
        len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = '';
      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      } else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }
      next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;
      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;
        next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;
        next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;
        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }
      result += next;
    }
    return result;
  };
  SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
  };
  SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }
    return map;
  };
  SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };
  exports.SourceMapGenerator = SourceMapGenerator;
  return module.exports;
});

$__System.registerDynamic("20", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;
  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;
  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;
  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);
    var parts = path.split(/\/+/);
    for (var part,
        up = 0,
        i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');
    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }
    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;
  exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
  };
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, '');
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }
      ++level;
    }
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;
  var supportsNullProto = (function() {
    var obj = Object.create(null);
    return !('__proto__' in obj);
  }());
  function identity(s) {
    return s;
  }
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return '$' + aStr;
    }
    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;
  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }
    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;
  function isProtoString(s) {
    if (!s) {
      return false;
    }
    var length = s.length;
    if (length < 9) {
      return false;
    }
    if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
      return false;
    }
    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36) {
        return false;
      }
    }
    return true;
  }
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    return mappingA.name - mappingB.name;
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }
    cmp = mappingA.source - mappingB.source;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return mappingA.name - mappingB.name;
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }
    if (aStr1 > aStr2) {
      return 1;
    }
    return -1;
  }
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  return module.exports;
});

$__System.registerDynamic("26", ["25", "20"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var SourceMapGenerator = $__require('25').SourceMapGenerator;
  var util = $__require('20');
  var REGEX_NEWLINE = /(\r?\n)/;
  var NEWLINE_CODE = 10;
  var isSourceNode = "$$$isSourceNode$$$";
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null)
      this.add(aChunks);
  }
  SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    var node = new SourceNode();
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var shiftNextLine = function() {
      var lineContents = remainingLines.shift();
      var newLine = remainingLines.shift() || "";
      return lineContents + newLine;
    };
    var lastGeneratedLine = 1,
        lastGeneratedColumn = 0;
    var lastMapping = null;
    aSourceMapConsumer.eachMapping(function(mapping) {
      if (lastMapping !== null) {
        if (lastGeneratedLine < mapping.generatedLine) {
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
        } else {
          var nextLine = remainingLines[0];
          var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
          remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          lastMapping = mapping;
          return;
        }
      }
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[0];
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    if (remainingLines.length > 0) {
      if (lastMapping) {
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      node.add(remainingLines.join(""));
    }
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });
    return node;
    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
      }
    }
  };
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function(chunk) {
        this.add(chunk);
      }, this);
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length - 1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    } else {
      throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
  };
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0,
        len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      } else {
        if (chunk !== '') {
          aFn(chunk, {
            source: this.source,
            line: this.line,
            column: this.column,
            name: this.name
          });
        }
      }
    }
  };
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len - 1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    } else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    } else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };
  SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };
  SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
    for (var i = 0,
        len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }
    var sources = Object.keys(this.sourceContents);
    for (var i = 0,
        len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function(chunk) {
      str += chunk;
    });
    return str;
  };
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function(chunk, original) {
      generated.code += chunk;
      if (original.source !== null && original.line !== null && original.column !== null) {
        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({generated: {
            line: generated.line,
            column: generated.column
          }});
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0,
          length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function(sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });
    return {
      code: generated.code,
      map: map
    };
  };
  exports.SourceNode = SourceNode;
  return module.exports;
});

$__System.registerDynamic("27", ["25", "1f", "26"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.SourceMapGenerator = $__require('25').SourceMapGenerator;
  exports.SourceMapConsumer = $__require('1f').SourceMapConsumer;
  exports.SourceNode = $__require('26').SourceNode;
  return module.exports;
});

$__System.registerDynamic("28", ["d", "29", "15", "27"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _sourceMap = $__require('27');
  var _sourceMap2 = _interopRequireDefault(_sourceMap);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var SourceMap = function() {
    function SourceMap(position, opts, code) {
      var _this = this;
      (0, _classCallCheck3.default)(this, SourceMap);
      this.position = position;
      this.opts = opts;
      this.last = {
        generated: {},
        original: {}
      };
      if (opts.sourceMaps) {
        this.map = new _sourceMap2.default.SourceMapGenerator({
          file: opts.sourceMapTarget,
          sourceRoot: opts.sourceRoot
        });
        if (typeof code === "string") {
          this.map.setSourceContent(opts.sourceFileName, code);
        } else if ((typeof code === "undefined" ? "undefined" : (0, _typeof3.default)(code)) === "object") {
          (0, _keys2.default)(code).forEach(function(sourceFileName) {
            _this.map.setSourceContent(sourceFileName, code[sourceFileName]);
          });
        }
      } else {
        this.map = null;
      }
    }
    SourceMap.prototype.get = function get() {
      var map = this.map;
      if (map) {
        return map.toJSON();
      } else {
        return map;
      }
    };
    SourceMap.prototype.mark = function mark(sourcePos) {
      var map = this.map;
      if (!map)
        return;
      var position = this.position;
      if (this._lastGenLine !== position.line && sourcePos.line === null)
        return;
      if (this._lastGenLine === position.line && this._lastSourceLine === sourcePos.line && this._lastSourceColumn === sourcePos.column) {
        return;
      }
      this._lastGenLine = position.line;
      this._lastSourceLine = sourcePos.line;
      this._lastSourceColumn = sourcePos.column;
      map.addMapping({
        generated: {
          line: position.line,
          column: position.column
        },
        source: sourcePos.line == null ? null : sourcePos.filename || this.opts.sourceFileName,
        original: sourcePos.line == null ? null : {
          line: sourcePos.line,
          column: sourcePos.column
        }
      });
    };
    return SourceMap;
  }();
  exports.default = SourceMap;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("2a", ["15"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Position = function() {
    function Position() {
      (0, _classCallCheck3.default)(this, Position);
      this.line = 1;
      this.column = 0;
    }
    Position.prototype.push = function push(str) {
      for (var i = 0; i < str.length; i++) {
        if (str[i] === "\n") {
          this.line++;
          this.column = 0;
        } else {
          this.column++;
        }
      }
    };
    Position.prototype.unshift = function unshift(str) {
      for (var i = 0; i < str.length; i++) {
        if (str[i] === "\n") {
          this.line--;
        } else {
          this.column--;
        }
      }
    };
    return Position;
  }();
  exports.default = Position;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("2b", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(str) {
    var tail = str.length;
    while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
      tail--;
    }
    return str.slice(0, tail);
  };
  return module.exports;
});

$__System.registerDynamic("11", ["@node/buffer"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('@node/buffer').Buffer;
  return module.exports;
});

$__System.registerDynamic("2c", ["15", "1b", "2b", "11"], true, function($__require, exports, module) {
  "use strict";
  var Buffer = $__require("11");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _repeating = $__require('1b');
  var _repeating2 = _interopRequireDefault(_repeating);
  var _trimRight = $__require('2b');
  var _trimRight2 = _interopRequireDefault(_trimRight);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Buffer = function() {
    function Buffer(position, format) {
      (0, _classCallCheck3.default)(this, Buffer);
      this.printedCommentStarts = {};
      this.parenPushNewlineState = null;
      this.position = position;
      this._indent = format.indent.base;
      this.format = format;
      this.buf = "";
      this.last = "";
      this.map = null;
      this._sourcePosition = {
        line: null,
        column: null,
        filename: null
      };
    }
    Buffer.prototype.catchUp = function catchUp(node) {
      if (node.loc && this.format.retainLines && this.buf) {
        while (this.position.line < node.loc.start.line) {
          this._push("\n");
        }
      }
    };
    Buffer.prototype.get = function get() {
      return ((0, _trimRight2.default)(this.buf));
    };
    Buffer.prototype.getIndent = function getIndent() {
      if (this.format.compact || this.format.concise) {
        return "";
      } else {
        return ((0, _repeating2.default)(this.format.indent.style, this._indent));
      }
    };
    Buffer.prototype.indentSize = function indentSize() {
      return this.getIndent().length;
    };
    Buffer.prototype.indent = function indent() {
      this._indent++;
    };
    Buffer.prototype.dedent = function dedent() {
      this._indent--;
    };
    Buffer.prototype.semicolon = function semicolon() {
      this.push(";");
    };
    Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
      if (!this.isLast(";"))
        this.semicolon();
    };
    Buffer.prototype.rightBrace = function rightBrace() {
      this.newline(true);
      if (this.format.minified && !this._lastPrintedIsEmptyStatement) {
        this._removeLast(";");
      }
      this.push("}");
    };
    Buffer.prototype.keyword = function keyword(name) {
      this.push(name);
      this.space();
    };
    Buffer.prototype.space = function space(force) {
      if (!force && this.format.compact)
        return;
      if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
        this.push(" ");
      }
    };
    Buffer.prototype.removeLast = function removeLast(cha) {
      if (this.format.compact)
        return;
      return this._removeLast(cha);
    };
    Buffer.prototype._removeLast = function _removeLast(cha) {
      if (!this._isLast(cha))
        return;
      this.buf = this.buf.slice(0, -1);
      this.last = this.buf[this.buf.length - 1];
      this.position.unshift(cha);
    };
    Buffer.prototype.startTerminatorless = function startTerminatorless() {
      return this.parenPushNewlineState = {printed: false};
    };
    Buffer.prototype.endTerminatorless = function endTerminatorless(state) {
      if (state.printed) {
        this.dedent();
        this.newline();
        this.push(")");
      }
    };
    Buffer.prototype.newline = function newline(i, removeLast) {
      if (this.format.retainLines || this.format.compact)
        return;
      if (this.format.concise) {
        this.space();
        return;
      }
      if (this.endsWith("\n\n"))
        return;
      if (typeof i === "boolean")
        removeLast = i;
      if (typeof i !== "number")
        i = 1;
      i = Math.min(2, i);
      if (this.endsWith("{\n") || this.endsWith(":\n"))
        i--;
      if (i <= 0)
        return;
      if (removeLast) {
        this.removeLast("\n");
      }
      this.removeLast(" ");
      this._removeSpacesAfterLastNewline();
      this._push((0, _repeating2.default)("\n", i));
    };
    Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
      var lastNewlineIndex = this.buf.lastIndexOf("\n");
      if (lastNewlineIndex >= 0 && this.get().length <= lastNewlineIndex) {
        this.buf = this.buf.substring(0, lastNewlineIndex + 1);
        this.last = "\n";
      }
    };
    Buffer.prototype.source = function source(prop, loc) {
      if (prop && !loc)
        return;
      var pos = loc ? loc[prop] : null;
      this._sourcePosition.line = pos ? pos.line : null;
      this._sourcePosition.column = pos ? pos.column : null;
      this._sourcePosition.filename = loc && loc.filename || null;
    };
    Buffer.prototype.withSource = function withSource(prop, loc, cb) {
      var originalLine = this._sourcePosition.line;
      var originalColumn = this._sourcePosition.column;
      var originalFilename = this._sourcePosition.filename;
      this.source(prop, loc);
      cb();
      this._sourcePosition.line = originalLine;
      this._sourcePosition.column = originalColumn;
      this._sourcePosition.filename = originalFilename;
    };
    Buffer.prototype.push = function push(str, noIndent) {
      if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
        var indent = this.getIndent();
        str = str.replace(/\n/g, "\n" + indent);
        if (this.isLast("\n"))
          this._push(indent);
      }
      this._push(str);
    };
    Buffer.prototype._push = function _push(str) {
      var parenPushNewlineState = this.parenPushNewlineState;
      if (parenPushNewlineState) {
        for (var i = 0; i < str.length; i++) {
          var cha = str[i];
          if (cha === " ")
            continue;
          this.parenPushNewlineState = null;
          if (cha === "\n" || cha === "/") {
            this._push("(");
            this.indent();
            parenPushNewlineState.printed = true;
          }
          break;
        }
      }
      if (str[0] !== "\n")
        this.map.mark(this._sourcePosition);
      this.position.push(str);
      this.buf += str;
      this.last = str[str.length - 1];
    };
    Buffer.prototype.endsWith = function endsWith(str) {
      if (str.length === 1) {
        return this.last === str;
      } else {
        return this.buf.slice(-str.length) === str;
      }
    };
    Buffer.prototype.isLast = function isLast(cha) {
      if (this.format.compact)
        return false;
      return this._isLast(cha);
    };
    Buffer.prototype._isLast = function _isLast(cha) {
      var last = this.last;
      if (Array.isArray(cha)) {
        return cha.indexOf(last) >= 0;
      } else {
        return cha === last;
      }
    };
    return Buffer;
  }();
  exports.default = Buffer;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("2d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.TaggedTemplateExpression = TaggedTemplateExpression;
  exports.TemplateElement = TemplateElement;
  exports.TemplateLiteral = TemplateLiteral;
  function TaggedTemplateExpression(node) {
    this.print(node.tag, node);
    this.print(node.quasi, node);
  }
  function TemplateElement(node) {
    this._push(node.value.raw);
  }
  function TemplateLiteral(node) {
    this.push("`");
    var quasis = node.quasis;
    for (var i = 0; i < quasis.length; i++) {
      this.print(quasis[i], node);
      if (i + 1 < quasis.length) {
        this._push("${ ");
        this.print(node.expressions[i], node);
        this.push(" }");
      }
    }
    this._push("`");
  }
  return module.exports;
});

$__System.registerDynamic("2e", ["2f"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isFinite = $__require('2f');
  module.exports = Number.isInteger || function(val) {
    return typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  };
  return module.exports;
});

$__System.registerDynamic("30", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  module.exports = arrayMap;
  return module.exports;
});

$__System.registerDynamic("31", ["30", "32", "33", "34"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arrayMap = $__require('30'),
      baseCallback = $__require('32'),
      baseMap = $__require('33'),
      isArray = $__require('34');
  function map(collection, iteratee, thisArg) {
    var func = isArray(collection) ? arrayMap : baseMap;
    iteratee = baseCallback(iteratee, thisArg, 3);
    return func(collection, iteratee);
  }
  module.exports = map;
  return module.exports;
});

$__System.registerDynamic("35", ["36", "8", "31", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _isBoolean = $__require('36');
  var _isBoolean2 = _interopRequireDefault(_isBoolean);
  var _each = $__require('8');
  var _each2 = _interopRequireDefault(_each);
  var _map = $__require('31');
  var _map2 = _interopRequireDefault(_map);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function crawl(node) {
    var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    if (t.isMemberExpression(node)) {
      crawl(node.object, state);
      if (node.computed)
        crawl(node.property, state);
    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
      crawl(node.left, state);
      crawl(node.right, state);
    } else if (t.isCallExpression(node)) {
      state.hasCall = true;
      crawl(node.callee, state);
    } else if (t.isFunction(node)) {
      state.hasFunction = true;
    } else if (t.isIdentifier(node)) {
      state.hasHelper = state.hasHelper || isHelper(node.callee);
    }
    return state;
  }
  function isHelper(node) {
    if (t.isMemberExpression(node)) {
      return isHelper(node.object) || isHelper(node.property);
    } else if (t.isIdentifier(node)) {
      return node.name === "require" || node.name[0] === "_";
    } else if (t.isCallExpression(node)) {
      return isHelper(node.callee);
    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
      return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
    } else {
      return false;
    }
  }
  function isType(node) {
    return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
  }
  exports.nodes = {
    AssignmentExpression: function AssignmentExpression(node) {
      var state = crawl(node.right);
      if (state.hasCall && state.hasHelper || state.hasFunction) {
        return {
          before: state.hasFunction,
          after: true
        };
      }
    },
    SwitchCase: function SwitchCase(node, parent) {
      return {before: node.consequent.length || parent.cases[0] === node};
    },
    LogicalExpression: function LogicalExpression(node) {
      if (t.isFunction(node.left) || t.isFunction(node.right)) {
        return {after: true};
      }
    },
    Literal: function Literal(node) {
      if (node.value === "use strict") {
        return {after: true};
      }
    },
    CallExpression: function CallExpression(node) {
      if (t.isFunction(node.callee) || isHelper(node)) {
        return {
          before: true,
          after: true
        };
      }
    },
    VariableDeclaration: function VariableDeclaration(node) {
      for (var i = 0; i < node.declarations.length; i++) {
        var declar = node.declarations[i];
        var enabled = isHelper(declar.id) && !isType(declar.init);
        if (!enabled) {
          var state = crawl(declar.init);
          enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
        }
        if (enabled) {
          return {
            before: true,
            after: true
          };
        }
      }
    },
    IfStatement: function IfStatement(node) {
      if (t.isBlockStatement(node.consequent)) {
        return {
          before: true,
          after: true
        };
      }
    }
  };
  exports.nodes.ObjectProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function(node, parent) {
    if (parent.properties[0] === node) {
      return {before: true};
    }
  };
  exports.list = {
    VariableDeclaration: function VariableDeclaration(node) {
      return ((0, _map2.default)(node.declarations, "init"));
    },
    ArrayExpression: function ArrayExpression(node) {
      return node.elements;
    },
    ObjectExpression: function ObjectExpression(node) {
      return node.properties;
    }
  };
  (0, _each2.default)({
    Function: true,
    Class: true,
    Loop: true,
    LabeledStatement: true,
    SwitchStatement: true,
    TryStatement: true
  }, function(amounts, type) {
    if ((0, _isBoolean2.default)(amounts)) {
      amounts = {
        after: amounts,
        before: amounts
      };
    }
    (0, _each2.default)([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function(type) {
      exports.nodes[type] = function() {
        return amounts;
      };
    });
  });
  return module.exports;
});

$__System.registerDynamic("37", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.AwaitExpression = exports.FunctionTypeAnnotation = undefined;
  exports.NullableTypeAnnotation = NullableTypeAnnotation;
  exports.UpdateExpression = UpdateExpression;
  exports.ObjectExpression = ObjectExpression;
  exports.Binary = Binary;
  exports.BinaryExpression = BinaryExpression;
  exports.SequenceExpression = SequenceExpression;
  exports.YieldExpression = YieldExpression;
  exports.ClassExpression = ClassExpression;
  exports.UnaryLike = UnaryLike;
  exports.FunctionExpression = FunctionExpression;
  exports.ArrowFunctionExpression = ArrowFunctionExpression;
  exports.ConditionalExpression = ConditionalExpression;
  exports.AssignmentExpression = AssignmentExpression;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var PRECEDENCE = {
    "||": 0,
    "&&": 1,
    "|": 2,
    "^": 3,
    "&": 4,
    "==": 5,
    "===": 5,
    "!=": 5,
    "!==": 5,
    "<": 6,
    ">": 6,
    "<=": 6,
    ">=": 6,
    in: 6,
    instanceof: 6,
    ">>": 7,
    "<<": 7,
    ">>>": 7,
    "+": 8,
    "-": 8,
    "*": 9,
    "/": 9,
    "%": 9,
    "**": 10
  };
  function NullableTypeAnnotation(node, parent) {
    return t.isArrayTypeAnnotation(parent);
  }
  exports.FunctionTypeAnnotation = NullableTypeAnnotation;
  function UpdateExpression(node, parent) {
    if (t.isMemberExpression(parent) && parent.object === node) {
      return true;
    }
    return false;
  }
  function ObjectExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, {considerArrow: true});
  }
  function Binary(node, parent) {
    if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
      return true;
    }
    if (t.isUnaryLike(parent)) {
      return true;
    }
    if (t.isMemberExpression(parent) && parent.object === node) {
      return true;
    }
    if (t.isBinary(parent)) {
      var parentOp = parent.operator;
      var parentPos = PRECEDENCE[parentOp];
      var nodeOp = node.operator;
      var nodePos = PRECEDENCE[nodeOp];
      if (parentPos > nodePos) {
        return true;
      }
      if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
        return true;
      }
    }
    return false;
  }
  function BinaryExpression(node, parent) {
    if (node.operator === "in") {
      if (t.isVariableDeclarator(parent)) {
        return true;
      }
      if (t.isFor(parent)) {
        return true;
      }
    }
    return false;
  }
  function SequenceExpression(node, parent) {
    if (t.isForStatement(parent)) {
      return false;
    }
    if (t.isExpressionStatement(parent) && parent.expression === node) {
      return false;
    }
    if (t.isReturnStatement(parent)) {
      return false;
    }
    if (t.isThrowStatement(parent)) {
      return false;
    }
    if (t.isSwitchStatement(parent) && parent.discriminant === node) {
      return false;
    }
    if (t.isWhileStatement(parent) && parent.test === node) {
      return false;
    }
    if (t.isIfStatement(parent) && parent.test === node) {
      return false;
    }
    if (t.isForInStatement(parent) && parent.right === node) {
      return false;
    }
    return true;
  }
  function YieldExpression(node, parent) {
    return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
  }
  exports.AwaitExpression = YieldExpression;
  function ClassExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, {considerDefaultExports: true});
  }
  function UnaryLike(node, parent) {
    if (t.isMemberExpression(parent, {object: node})) {
      return true;
    }
    if (t.isCallExpression(parent, {callee: node}) || t.isNewExpression(parent, {callee: node})) {
      return true;
    }
    return false;
  }
  function FunctionExpression(node, parent, printStack) {
    return isFirstInStatement(printStack, {considerDefaultExports: true});
  }
  function ArrowFunctionExpression(node, parent) {
    if (t.isExportDeclaration(parent)) {
      return true;
    }
    if (t.isBinaryExpression(parent) || t.isLogicalExpression(parent)) {
      return true;
    }
    if (t.isUnaryExpression(parent)) {
      return true;
    }
    return UnaryLike(node, parent);
  }
  function ConditionalExpression(node, parent) {
    if (t.isUnaryLike(parent)) {
      return true;
    }
    if (t.isBinary(parent)) {
      return true;
    }
    if (t.isConditionalExpression(parent, {test: node})) {
      return true;
    }
    return UnaryLike(node, parent);
  }
  function AssignmentExpression(node) {
    if (t.isObjectPattern(node.left)) {
      return true;
    } else {
      return (ConditionalExpression.apply(undefined, arguments));
    }
  }
  function isFirstInStatement(printStack) {
    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var _ref$considerArrow = _ref.considerArrow;
    var considerArrow = _ref$considerArrow === undefined ? false : _ref$considerArrow;
    var _ref$considerDefaultE = _ref.considerDefaultExports;
    var considerDefaultExports = _ref$considerDefaultE === undefined ? false : _ref$considerDefaultE;
    var i = printStack.length - 1;
    var node = printStack[i];
    i--;
    var parent = printStack[i];
    while (i > 0) {
      if (t.isExpressionStatement(parent, {expression: node})) {
        return true;
      }
      if (considerDefaultExports && t.isExportDefaultDeclaration(parent, {declaration: node})) {
        return true;
      }
      if (considerArrow && t.isArrowFunctionExpression(parent, {body: node})) {
        return true;
      }
      if (t.isCallExpression(parent, {callee: node}) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, {object: node}) || t.isConditional(parent, {test: node}) || t.isBinary(parent, {left: node}) || t.isAssignmentExpression(parent, {left: node})) {
        node = parent;
        i--;
        parent = printStack[i];
      } else {
        return false;
      }
    }
    return false;
  }
  return module.exports;
});

$__System.registerDynamic("38", ["f", "d", "35", "37", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  exports.isUserWhitespacable = isUserWhitespacable;
  exports.needsWhitespace = needsWhitespace;
  exports.needsWhitespaceBefore = needsWhitespaceBefore;
  exports.needsWhitespaceAfter = needsWhitespaceAfter;
  exports.needsParens = needsParens;
  var _whitespace = $__require('35');
  var _whitespace2 = _interopRequireDefault(_whitespace);
  var _parentheses = $__require('37');
  var parens = _interopRequireWildcard(_parentheses);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function expandAliases(obj) {
    var newObj = {};
    function add(type, func) {
      var fn = newObj[type];
      newObj[type] = fn ? function(node, parent, stack) {
        var result = fn(node, parent, stack);
        return result == null ? func(node, parent, stack) : result;
      } : func;
    }
    for (var _iterator = (0, _keys2.default)(obj),
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var type = _ref;
      var aliases = t.FLIPPED_ALIAS_KEYS[type];
      if (aliases) {
        for (var _iterator2 = aliases,
            _isArray2 = Array.isArray(_iterator2),
            _i2 = 0,
            _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
          var _ref2;
          if (_isArray2) {
            if (_i2 >= _iterator2.length)
              break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done)
              break;
            _ref2 = _i2.value;
          }
          var alias = _ref2;
          add(alias, obj[type]);
        }
      } else {
        add(type, obj[type]);
      }
    }
    return newObj;
  }
  var expandedParens = expandAliases(parens);
  var expandedWhitespaceNodes = expandAliases(_whitespace2.default.nodes);
  var expandedWhitespaceList = expandAliases(_whitespace2.default.list);
  function find(obj, node, parent, printStack) {
    var fn = obj[node.type];
    return fn ? fn(node, parent, printStack) : null;
  }
  function isOrHasCallExpression(node) {
    if (t.isCallExpression(node)) {
      return true;
    }
    if (t.isMemberExpression(node)) {
      return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);
    } else {
      return false;
    }
  }
  function isUserWhitespacable(node) {
    return t.isUserWhitespacable(node);
  }
  function needsWhitespace(node, parent, type) {
    if (!node)
      return 0;
    if (t.isExpressionStatement(node)) {
      node = node.expression;
    }
    var linesInfo = find(expandedWhitespaceNodes, node, parent);
    if (!linesInfo) {
      var items = find(expandedWhitespaceList, node, parent);
      if (items) {
        for (var i = 0; i < items.length; i++) {
          linesInfo = needsWhitespace(items[i], node, type);
          if (linesInfo)
            break;
        }
      }
    }
    return linesInfo && linesInfo[type] || 0;
  }
  function needsWhitespaceBefore(node, parent) {
    return needsWhitespace(node, parent, "before");
  }
  function needsWhitespaceAfter(node, parent) {
    return needsWhitespace(node, parent, "after");
  }
  function needsParens(node, parent, printStack) {
    if (!parent)
      return false;
    if (t.isNewExpression(parent) && parent.callee === node) {
      if (isOrHasCallExpression(node))
        return true;
    }
    return find(expandedParens, node, parent, printStack);
  }
  return module.exports;
});

$__System.registerDynamic("39", ["2e", "3a", "9", "38"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.LogicalExpression = exports.BinaryExpression = exports.AwaitExpression = exports.YieldExpression = undefined;
  exports.UnaryExpression = UnaryExpression;
  exports.DoExpression = DoExpression;
  exports.ParenthesizedExpression = ParenthesizedExpression;
  exports.UpdateExpression = UpdateExpression;
  exports.ConditionalExpression = ConditionalExpression;
  exports.NewExpression = NewExpression;
  exports.SequenceExpression = SequenceExpression;
  exports.ThisExpression = ThisExpression;
  exports.Super = Super;
  exports.Decorator = Decorator;
  exports.CallExpression = CallExpression;
  exports.EmptyStatement = EmptyStatement;
  exports.ExpressionStatement = ExpressionStatement;
  exports.AssignmentPattern = AssignmentPattern;
  exports.AssignmentExpression = AssignmentExpression;
  exports.BindExpression = BindExpression;
  exports.MemberExpression = MemberExpression;
  exports.MetaProperty = MetaProperty;
  var _isInteger = $__require('2e');
  var _isInteger2 = _interopRequireDefault(_isInteger);
  var _isNumber = $__require('3a');
  var _isNumber2 = _interopRequireDefault(_isNumber);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _node = $__require('38');
  var n = _interopRequireWildcard(_node);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var SCIENTIFIC_NOTATION = /e/i;
  var ZERO_DECIMAL_INTEGER = /\.0+$/;
  var NON_DECIMAL_LITERAL = /^0[box]/;
  function UnaryExpression(node) {
    var needsSpace = /[a-z]$/.test(node.operator);
    var arg = node.argument;
    if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
      needsSpace = true;
    }
    if (t.isUnaryExpression(arg) && arg.operator === "!") {
      needsSpace = false;
    }
    this.push(node.operator);
    if (needsSpace)
      this.push(" ");
    this.print(node.argument, node);
  }
  function DoExpression(node) {
    this.push("do");
    this.space();
    this.print(node.body, node);
  }
  function ParenthesizedExpression(node) {
    this.push("(");
    this.print(node.expression, node);
    this.push(")");
  }
  function UpdateExpression(node) {
    if (node.prefix) {
      this.push(node.operator);
      this.print(node.argument, node);
    } else {
      this.print(node.argument, node);
      this.push(node.operator);
    }
  }
  function ConditionalExpression(node) {
    this.print(node.test, node);
    this.space();
    this.push("?");
    this.space();
    this.print(node.consequent, node);
    this.space();
    this.push(":");
    this.space();
    this.print(node.alternate, node);
  }
  function NewExpression(node, parent) {
    this.push("new ");
    this.print(node.callee, node);
    if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, {callee: node}) && !t.isMemberExpression(parent) && !t.isNewExpression(parent))
      return;
    this.push("(");
    this.printList(node.arguments, node);
    this.push(")");
  }
  function SequenceExpression(node) {
    this.printList(node.expressions, node);
  }
  function ThisExpression() {
    this.push("this");
  }
  function Super() {
    this.push("super");
  }
  function Decorator(node) {
    this.push("@");
    this.print(node.expression, node);
    this.newline();
  }
  function CallExpression(node) {
    this.print(node.callee, node);
    if (node.loc)
      this.printAuxAfterComment();
    this.push("(");
    var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;
    var separator = void 0;
    if (isPrettyCall) {
      separator = ",\n";
      this.newline();
      this.indent();
    }
    this.printList(node.arguments, node, {separator: separator});
    if (isPrettyCall) {
      this.newline();
      this.dedent();
    }
    this.push(")");
  }
  function buildYieldAwait(keyword) {
    return function(node) {
      this.push(keyword);
      if (node.delegate) {
        this.push("*");
      }
      if (node.argument) {
        this.push(" ");
        var terminatorState = this.startTerminatorless();
        this.print(node.argument, node);
        this.endTerminatorless(terminatorState);
      }
    };
  }
  var YieldExpression = exports.YieldExpression = buildYieldAwait("yield");
  var AwaitExpression = exports.AwaitExpression = buildYieldAwait("await");
  function EmptyStatement() {
    this._lastPrintedIsEmptyStatement = true;
    this.semicolon();
  }
  function ExpressionStatement(node) {
    this.print(node.expression, node);
    this.semicolon();
  }
  function AssignmentPattern(node) {
    this.print(node.left, node);
    this.space();
    this.push("=");
    this.space();
    this.print(node.right, node);
  }
  function AssignmentExpression(node, parent) {
    var parens = this._inForStatementInitCounter && node.operator === "in" && !n.needsParens(node, parent);
    if (parens) {
      this.push("(");
    }
    this.print(node.left, node);
    var spaces = !this.format.compact || node.operator === "in" || node.operator === "instanceof";
    if (spaces)
      this.push(" ");
    this.push(node.operator);
    if (!spaces) {
      spaces = node.operator === "<" && t.isUnaryExpression(node.right, {
        prefix: true,
        operator: "!"
      }) && t.isUnaryExpression(node.right.argument, {
        prefix: true,
        operator: "--"
      });
      if (!spaces) {
        var right = getLeftMost(node.right);
        spaces = t.isUnaryExpression(right, {
          prefix: true,
          operator: node.operator
        }) || t.isUpdateExpression(right, {
          prefix: true,
          operator: node.operator + node.operator
        });
      }
    }
    if (spaces)
      this.push(" ");
    this.print(node.right, node);
    if (parens) {
      this.push(")");
    }
  }
  function BindExpression(node) {
    this.print(node.object, node);
    this.push("::");
    this.print(node.callee, node);
  }
  exports.BinaryExpression = AssignmentExpression;
  exports.LogicalExpression = AssignmentExpression;
  function MemberExpression(node) {
    this.print(node.object, node);
    if (!node.computed && t.isMemberExpression(node.property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    var computed = node.computed;
    if (t.isLiteral(node.property) && (0, _isNumber2.default)(node.property.value)) {
      computed = true;
    }
    if (computed) {
      this.push("[");
      this.print(node.property, node);
      this.push("]");
    } else {
      if (t.isNumericLiteral(node.object)) {
        var val = this.getPossibleRaw(node.object) || node.object.value;
        if ((0, _isInteger2.default)(+val) && !NON_DECIMAL_LITERAL.test(val) && !SCIENTIFIC_NOTATION.test(val) && !ZERO_DECIMAL_INTEGER.test(val) && !this.endsWith(".")) {
          this.push(".");
        }
      }
      this.push(".");
      this.print(node.property, node);
    }
  }
  function MetaProperty(node) {
    this.print(node.meta, node);
    this.push(".");
    this.print(node.property, node);
  }
  function getLeftMost(binaryExpr) {
    if (!t.isBinaryExpression(binaryExpr)) {
      return binaryExpr;
    }
    return getLeftMost(binaryExpr.left);
  }
  return module.exports;
});

$__System.registerDynamic("3b", ["f", "1b", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.WithStatement = WithStatement;
  exports.IfStatement = IfStatement;
  exports.ForStatement = ForStatement;
  exports.WhileStatement = WhileStatement;
  exports.DoWhileStatement = DoWhileStatement;
  exports.LabeledStatement = LabeledStatement;
  exports.TryStatement = TryStatement;
  exports.CatchClause = CatchClause;
  exports.SwitchStatement = SwitchStatement;
  exports.SwitchCase = SwitchCase;
  exports.DebuggerStatement = DebuggerStatement;
  exports.VariableDeclaration = VariableDeclaration;
  exports.VariableDeclarator = VariableDeclarator;
  var _repeating = $__require('1b');
  var _repeating2 = _interopRequireDefault(_repeating);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var NON_ALPHABETIC_UNARY_OPERATORS = t.UPDATE_OPERATORS.concat(t.NUMBER_UNARY_OPERATORS).concat(["!"]);
  function WithStatement(node) {
    this.keyword("with");
    this.push("(");
    this.print(node.object, node);
    this.push(")");
    this.printBlock(node);
  }
  function IfStatement(node) {
    this.keyword("if");
    this.push("(");
    this.print(node.test, node);
    this.push(")");
    this.space();
    var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));
    if (needsBlock) {
      this.push("{");
      this.newline();
      this.indent();
    }
    this.printAndIndentOnComments(node.consequent, node);
    if (needsBlock) {
      this.dedent();
      this.newline();
      this.push("}");
    }
    if (node.alternate) {
      if (this.isLast("}"))
        this.space();
      this.push("else ");
      this.printAndIndentOnComments(node.alternate, node);
    }
  }
  function getLastStatement(statement) {
    if (!t.isStatement(statement.body))
      return statement;
    return getLastStatement(statement.body);
  }
  function ForStatement(node) {
    this.keyword("for");
    this.push("(");
    this._inForStatementInitCounter++;
    this.print(node.init, node);
    this._inForStatementInitCounter--;
    this.push(";");
    if (node.test) {
      this.space();
      this.print(node.test, node);
    }
    this.push(";");
    if (node.update) {
      this.space();
      this.print(node.update, node);
    }
    this.push(")");
    this.printBlock(node);
  }
  function WhileStatement(node) {
    this.keyword("while");
    this.push("(");
    this.print(node.test, node);
    this.push(")");
    this.printBlock(node);
  }
  var buildForXStatement = function buildForXStatement(op) {
    return function(node) {
      this.keyword("for");
      this.push("(");
      this.print(node.left, node);
      this.push(" " + op + " ");
      this.print(node.right, node);
      this.push(")");
      this.printBlock(node);
    };
  };
  var ForInStatement = exports.ForInStatement = buildForXStatement("in");
  var ForOfStatement = exports.ForOfStatement = buildForXStatement("of");
  function DoWhileStatement(node) {
    this.push("do ");
    this.print(node.body, node);
    this.space();
    this.keyword("while");
    this.push("(");
    this.print(node.test, node);
    this.push(");");
  }
  function buildLabelStatement(prefix) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];
    return function(node) {
      this.push(prefix);
      var label = node[key];
      if (label) {
        if (!(this.format.minified && (t.isUnaryExpression(label, {prefix: true}) || t.isUpdateExpression(label, {prefix: true})) && NON_ALPHABETIC_UNARY_OPERATORS.indexOf(label.operator) > -1)) {
          this.push(" ");
        }
        var terminatorState = this.startTerminatorless();
        this.print(label, node);
        this.endTerminatorless(terminatorState);
      }
      this.semicolon();
    };
  }
  var ContinueStatement = exports.ContinueStatement = buildLabelStatement("continue");
  var ReturnStatement = exports.ReturnStatement = buildLabelStatement("return", "argument");
  var BreakStatement = exports.BreakStatement = buildLabelStatement("break");
  var ThrowStatement = exports.ThrowStatement = buildLabelStatement("throw", "argument");
  function LabeledStatement(node) {
    this.print(node.label, node);
    this.push(": ");
    this.print(node.body, node);
  }
  function TryStatement(node) {
    this.keyword("try");
    this.print(node.block, node);
    this.space();
    if (node.handlers) {
      this.print(node.handlers[0], node);
    } else {
      this.print(node.handler, node);
    }
    if (node.finalizer) {
      this.space();
      this.push("finally ");
      this.print(node.finalizer, node);
    }
  }
  function CatchClause(node) {
    this.keyword("catch");
    this.push("(");
    this.print(node.param, node);
    this.push(")");
    this.space();
    this.print(node.body, node);
  }
  function SwitchStatement(node) {
    this.keyword("switch");
    this.push("(");
    this.print(node.discriminant, node);
    this.push(")");
    this.space();
    this.push("{");
    this.printSequence(node.cases, node, {
      indent: true,
      addNewlines: function addNewlines(leading, cas) {
        if (!leading && node.cases[node.cases.length - 1] === cas)
          return -1;
      }
    });
    this.push("}");
  }
  function SwitchCase(node) {
    if (node.test) {
      this.push("case ");
      this.print(node.test, node);
      this.push(":");
    } else {
      this.push("default:");
    }
    if (node.consequent.length) {
      this.newline();
      this.printSequence(node.consequent, node, {indent: true});
    }
  }
  function DebuggerStatement() {
    this.push("debugger;");
  }
  function VariableDeclaration(node, parent) {
    this.push(node.kind + " ");
    var hasInits = false;
    if (!t.isFor(parent)) {
      for (var _iterator = node.declarations,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var declar = _ref;
        if (declar.init) {
          hasInits = true;
        }
      }
    }
    var sep = void 0;
    if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
      sep = ",\n" + (0, _repeating2.default)(" ", node.kind.length + 1);
    }
    this.printList(node.declarations, node, {separator: sep});
    if (t.isFor(parent)) {
      if (parent.left === node || parent.init === node)
        return;
    }
    this.semicolon();
  }
  function VariableDeclarator(node) {
    this.print(node.id, node);
    this.print(node.id.typeAnnotation, node);
    if (node.init) {
      this.space();
      this.push("=");
      this.space();
      this.print(node.init, node);
    }
  }
  return module.exports;
});

$__System.registerDynamic("3c", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.ClassDeclaration = ClassDeclaration;
  exports.ClassBody = ClassBody;
  exports.ClassProperty = ClassProperty;
  exports.ClassMethod = ClassMethod;
  function ClassDeclaration(node) {
    this.printJoin(node.decorators, node, {separator: ""});
    this.push("class");
    if (node.id) {
      this.push(" ");
      this.print(node.id, node);
    }
    this.print(node.typeParameters, node);
    if (node.superClass) {
      this.push(" extends ");
      this.print(node.superClass, node);
      this.print(node.superTypeParameters, node);
    }
    if (node.implements) {
      this.push(" implements ");
      this.printJoin(node.implements, node, {separator: ", "});
    }
    this.space();
    this.print(node.body, node);
  }
  exports.ClassExpression = ClassDeclaration;
  function ClassBody(node) {
    this.push("{");
    this.printInnerComments(node);
    if (node.body.length === 0) {
      this.push("}");
    } else {
      this.newline();
      this.indent();
      this.printSequence(node.body, node);
      this.dedent();
      this.rightBrace();
    }
  }
  function ClassProperty(node) {
    this.printJoin(node.decorators, node, {separator: ""});
    if (node.static)
      this.push("static ");
    this.print(node.key, node);
    this.print(node.typeAnnotation, node);
    if (node.value) {
      this.space();
      this.push("=");
      this.space();
      this.print(node.value, node);
    }
    this.semicolon();
  }
  function ClassMethod(node) {
    this.printJoin(node.decorators, node, {separator: ""});
    if (node.static) {
      this.push("static ");
    }
    if (node.kind === "constructorCall") {
      this.push("call ");
    }
    this._method(node);
  }
  return module.exports;
});

$__System.registerDynamic("3d", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.FunctionDeclaration = undefined;
  exports._params = _params;
  exports._method = _method;
  exports.FunctionExpression = FunctionExpression;
  exports.ArrowFunctionExpression = ArrowFunctionExpression;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _params(node) {
    var _this = this;
    this.print(node.typeParameters, node);
    this.push("(");
    this.printList(node.params, node, {iterator: function iterator(node) {
        if (node.optional)
          _this.push("?");
        _this.print(node.typeAnnotation, node);
      }});
    this.push(")");
    if (node.returnType) {
      this.print(node.returnType, node);
    }
  }
  function _method(node) {
    var kind = node.kind;
    var key = node.key;
    if (kind === "method" || kind === "init") {
      if (node.generator) {
        this.push("*");
      }
    }
    if (kind === "get" || kind === "set") {
      this.push(kind + " ");
    }
    if (node.async)
      this.push("async ");
    if (node.computed) {
      this.push("[");
      this.print(key, node);
      this.push("]");
    } else {
      this.print(key, node);
    }
    this._params(node);
    this.space();
    this.print(node.body, node);
  }
  function FunctionExpression(node) {
    if (node.async)
      this.push("async ");
    this.push("function");
    if (node.generator)
      this.push("*");
    if (node.id) {
      this.push(" ");
      this.print(node.id, node);
    } else {
      this.space();
    }
    this._params(node);
    this.space();
    this.print(node.body, node);
  }
  exports.FunctionDeclaration = FunctionExpression;
  function ArrowFunctionExpression(node) {
    if (node.async)
      this.push("async ");
    if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
      this.print(node.params[0], node);
    } else {
      this._params(node);
    }
    this.push(" => ");
    this.print(node.body, node);
  }
  return module.exports;
});

$__System.registerDynamic("3e", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.ImportSpecifier = ImportSpecifier;
  exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
  exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
  exports.ExportSpecifier = ExportSpecifier;
  exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
  exports.ExportAllDeclaration = ExportAllDeclaration;
  exports.ExportNamedDeclaration = ExportNamedDeclaration;
  exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
  exports.ImportDeclaration = ImportDeclaration;
  exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function ImportSpecifier(node) {
    this.print(node.imported, node);
    if (node.local && node.local.name !== node.imported.name) {
      this.push(" as ");
      this.print(node.local, node);
    }
  }
  function ImportDefaultSpecifier(node) {
    this.print(node.local, node);
  }
  function ExportDefaultSpecifier(node) {
    this.print(node.exported, node);
  }
  function ExportSpecifier(node) {
    this.print(node.local, node);
    if (node.exported && node.local.name !== node.exported.name) {
      this.push(" as ");
      this.print(node.exported, node);
    }
  }
  function ExportNamespaceSpecifier(node) {
    this.push("* as ");
    this.print(node.exported, node);
  }
  function ExportAllDeclaration(node) {
    this.push("export *");
    if (node.exported) {
      this.push(" as ");
      this.print(node.exported, node);
    }
    this.push(" from ");
    this.print(node.source, node);
    this.semicolon();
  }
  function ExportNamedDeclaration() {
    this.push("export ");
    ExportDeclaration.apply(this, arguments);
  }
  function ExportDefaultDeclaration() {
    this.push("export default ");
    ExportDeclaration.apply(this, arguments);
  }
  function ExportDeclaration(node) {
    if (node.declaration) {
      var declar = node.declaration;
      this.print(declar, node);
      if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar))
        return;
    } else {
      if (node.exportKind === "type") {
        this.push("type ");
      }
      var specifiers = node.specifiers.slice(0);
      var hasSpecial = false;
      while (true) {
        var first = specifiers[0];
        if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
          hasSpecial = true;
          this.print(specifiers.shift(), node);
          if (specifiers.length) {
            this.push(", ");
          }
        } else {
          break;
        }
      }
      if (specifiers.length || !specifiers.length && !hasSpecial) {
        this.push("{");
        if (specifiers.length) {
          this.space();
          this.printJoin(specifiers, node, {separator: ", "});
          this.space();
        }
        this.push("}");
      }
      if (node.source) {
        this.push(" from ");
        this.print(node.source, node);
      }
    }
    this.ensureSemicolon();
  }
  function ImportDeclaration(node) {
    this.push("import ");
    if (node.importKind === "type" || node.importKind === "typeof") {
      this.push(node.importKind + " ");
    }
    var specifiers = node.specifiers.slice(0);
    if (specifiers && specifiers.length) {
      while (true) {
        var first = specifiers[0];
        if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
          this.print(specifiers.shift(), node);
          if (specifiers.length) {
            this.push(", ");
          }
        } else {
          break;
        }
      }
      if (specifiers.length) {
        this.push("{");
        this.space();
        this.printJoin(specifiers, node, {separator: ", "});
        this.space();
        this.push("}");
      }
      this.push(" from ");
    }
    this.print(node.source, node);
    this.semicolon();
  }
  function ImportNamespaceSpecifier(node) {
    this.push("* as ");
    this.print(node.local, node);
  }
  return module.exports;
});

$__System.registerDynamic("3f", ["40", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.ArrayPattern = exports.ObjectPattern = exports.RestProperty = exports.SpreadProperty = exports.SpreadElement = undefined;
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  exports.Identifier = Identifier;
  exports.RestElement = RestElement;
  exports.ObjectExpression = ObjectExpression;
  exports.ObjectMethod = ObjectMethod;
  exports.ObjectProperty = ObjectProperty;
  exports.ArrayExpression = ArrayExpression;
  exports.RegExpLiteral = RegExpLiteral;
  exports.BooleanLiteral = BooleanLiteral;
  exports.NullLiteral = NullLiteral;
  exports.NumericLiteral = NumericLiteral;
  exports.StringLiteral = StringLiteral;
  exports._stringLiteral = _stringLiteral;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function Identifier(node) {
    if (node.variance === "plus") {
      this.push("+");
    } else if (node.variance === "minus") {
      this.push("-");
    }
    this.push(node.name);
  }
  function RestElement(node) {
    this.push("...");
    this.print(node.argument, node);
  }
  exports.SpreadElement = RestElement;
  exports.SpreadProperty = RestElement;
  exports.RestProperty = RestElement;
  function ObjectExpression(node) {
    var props = node.properties;
    this.push("{");
    this.printInnerComments(node);
    if (props.length) {
      this.space();
      this.printList(props, node, {indent: true});
      this.space();
    }
    this.push("}");
  }
  exports.ObjectPattern = ObjectExpression;
  function ObjectMethod(node) {
    this.printJoin(node.decorators, node, {separator: ""});
    this._method(node);
  }
  function ObjectProperty(node) {
    this.printJoin(node.decorators, node, {separator: ""});
    if (node.computed) {
      this.push("[");
      this.print(node.key, node);
      this.push("]");
    } else {
      if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
        this.print(node.value, node);
        return;
      }
      this.print(node.key, node);
      if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
        return;
      }
    }
    this.push(":");
    this.space();
    this.print(node.value, node);
  }
  function ArrayExpression(node) {
    var elems = node.elements;
    var len = elems.length;
    this.push("[");
    this.printInnerComments(node);
    for (var i = 0; i < elems.length; i++) {
      var elem = elems[i];
      if (elem) {
        if (i > 0)
          this.space();
        this.print(elem, node);
        if (i < len - 1)
          this.push(",");
      } else {
        this.push(",");
      }
    }
    this.push("]");
  }
  exports.ArrayPattern = ArrayExpression;
  function RegExpLiteral(node) {
    this.push("/" + node.pattern + "/" + node.flags);
  }
  function BooleanLiteral(node) {
    this.push(node.value ? "true" : "false");
  }
  function NullLiteral() {
    this.push("null");
  }
  function NumericLiteral(node) {
    this.push(node.value + "");
  }
  function StringLiteral(node, parent) {
    this.push(this._stringLiteral(node.value, parent));
  }
  function _stringLiteral(val, parent) {
    val = (0, _stringify2.default)(val);
    val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function(c) {
      return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
    });
    if (this.format.quotes === "single" && !t.isJSX(parent)) {
      val = val.slice(1, -1);
      val = val.replace(/\\"/g, '"');
      val = val.replace(/'/g, "\\'");
      val = "'" + val + "'";
    }
    return val;
  }
  return module.exports;
});

$__System.registerDynamic("41", ["3f", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.TypeParameterDeclaration = exports.NumericLiteralTypeAnnotation = exports.GenericTypeAnnotation = exports.ClassImplements = undefined;
  exports.AnyTypeAnnotation = AnyTypeAnnotation;
  exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
  exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
  exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
  exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
  exports.DeclareClass = DeclareClass;
  exports.DeclareFunction = DeclareFunction;
  exports.DeclareInterface = DeclareInterface;
  exports.DeclareModule = DeclareModule;
  exports.DeclareTypeAlias = DeclareTypeAlias;
  exports.DeclareVariable = DeclareVariable;
  exports.ExistentialTypeParam = ExistentialTypeParam;
  exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
  exports.FunctionTypeParam = FunctionTypeParam;
  exports.InterfaceExtends = InterfaceExtends;
  exports._interfaceish = _interfaceish;
  exports.InterfaceDeclaration = InterfaceDeclaration;
  exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
  exports.MixedTypeAnnotation = MixedTypeAnnotation;
  exports.NullableTypeAnnotation = NullableTypeAnnotation;
  var _types = $__require('3f');
  Object.defineProperty(exports, "NumericLiteralTypeAnnotation", {
    enumerable: true,
    get: function get() {
      return _types.NumericLiteral;
    }
  });
  exports.NumberTypeAnnotation = NumberTypeAnnotation;
  exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
  exports.StringTypeAnnotation = StringTypeAnnotation;
  exports.ThisTypeAnnotation = ThisTypeAnnotation;
  exports.TupleTypeAnnotation = TupleTypeAnnotation;
  exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
  exports.TypeAlias = TypeAlias;
  exports.TypeAnnotation = TypeAnnotation;
  exports.TypeParameterInstantiation = TypeParameterInstantiation;
  exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
  exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
  exports.ObjectTypeIndexer = ObjectTypeIndexer;
  exports.ObjectTypeProperty = ObjectTypeProperty;
  exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
  exports.UnionTypeAnnotation = UnionTypeAnnotation;
  exports.TypeCastExpression = TypeCastExpression;
  exports.VoidTypeAnnotation = VoidTypeAnnotation;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function AnyTypeAnnotation() {
    this.push("any");
  }
  function ArrayTypeAnnotation(node) {
    this.print(node.elementType, node);
    this.push("[");
    this.push("]");
  }
  function BooleanTypeAnnotation() {
    this.push("bool");
  }
  function BooleanLiteralTypeAnnotation(node) {
    this.push(node.value ? "true" : "false");
  }
  function NullLiteralTypeAnnotation() {
    this.push("null");
  }
  function DeclareClass(node) {
    this.push("declare class ");
    this._interfaceish(node);
  }
  function DeclareFunction(node) {
    this.push("declare function ");
    this.print(node.id, node);
    this.print(node.id.typeAnnotation.typeAnnotation, node);
    this.semicolon();
  }
  function DeclareInterface(node) {
    this.push("declare ");
    this.InterfaceDeclaration(node);
  }
  function DeclareModule(node) {
    this.push("declare module ");
    this.print(node.id, node);
    this.space();
    this.print(node.body, node);
  }
  function DeclareTypeAlias(node) {
    this.push("declare ");
    this.TypeAlias(node);
  }
  function DeclareVariable(node) {
    this.push("declare var ");
    this.print(node.id, node);
    this.print(node.id.typeAnnotation, node);
    this.semicolon();
  }
  function ExistentialTypeParam() {
    this.push("*");
  }
  function FunctionTypeAnnotation(node, parent) {
    this.print(node.typeParameters, node);
    this.push("(");
    this.printList(node.params, node);
    if (node.rest) {
      if (node.params.length) {
        this.push(",");
        this.space();
      }
      this.push("...");
      this.print(node.rest, node);
    }
    this.push(")");
    if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
      this.push(":");
    } else {
      this.space();
      this.push("=>");
    }
    this.space();
    this.print(node.returnType, node);
  }
  function FunctionTypeParam(node) {
    this.print(node.name, node);
    if (node.optional)
      this.push("?");
    this.push(":");
    this.space();
    this.print(node.typeAnnotation, node);
  }
  function InterfaceExtends(node) {
    this.print(node.id, node);
    this.print(node.typeParameters, node);
  }
  exports.ClassImplements = InterfaceExtends;
  exports.GenericTypeAnnotation = InterfaceExtends;
  function _interfaceish(node) {
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    if (node.extends.length) {
      this.push(" extends ");
      this.printJoin(node.extends, node, {separator: ", "});
    }
    if (node.mixins && node.mixins.length) {
      this.push(" mixins ");
      this.printJoin(node.mixins, node, {separator: ", "});
    }
    this.space();
    this.print(node.body, node);
  }
  function InterfaceDeclaration(node) {
    this.push("interface ");
    this._interfaceish(node);
  }
  function IntersectionTypeAnnotation(node) {
    this.printJoin(node.types, node, {separator: " & "});
  }
  function MixedTypeAnnotation() {
    this.push("mixed");
  }
  function NullableTypeAnnotation(node) {
    this.push("?");
    this.print(node.typeAnnotation, node);
  }
  function NumberTypeAnnotation() {
    this.push("number");
  }
  function StringLiteralTypeAnnotation(node) {
    this.push(this._stringLiteral(node.value));
  }
  function StringTypeAnnotation() {
    this.push("string");
  }
  function ThisTypeAnnotation() {
    this.push("this");
  }
  function TupleTypeAnnotation(node) {
    this.push("[");
    this.printJoin(node.types, node, {separator: ", "});
    this.push("]");
  }
  function TypeofTypeAnnotation(node) {
    this.push("typeof ");
    this.print(node.argument, node);
  }
  function TypeAlias(node) {
    this.push("type ");
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    this.space();
    this.push("=");
    this.space();
    this.print(node.right, node);
    this.semicolon();
  }
  function TypeAnnotation(node) {
    this.push(":");
    this.space();
    if (node.optional)
      this.push("?");
    this.print(node.typeAnnotation, node);
  }
  function TypeParameterInstantiation(node) {
    var _this = this;
    this.push("<");
    this.printJoin(node.params, node, {
      separator: ", ",
      iterator: function iterator(node) {
        _this.print(node.typeAnnotation, node);
      }
    });
    this.push(">");
  }
  exports.TypeParameterDeclaration = TypeParameterInstantiation;
  function ObjectTypeAnnotation(node) {
    var _this2 = this;
    this.push("{");
    var props = node.properties.concat(node.callProperties, node.indexers);
    if (props.length) {
      this.space();
      this.printJoin(props, node, {
        separator: false,
        indent: true,
        iterator: function iterator() {
          if (props.length !== 1) {
            _this2.semicolon();
            _this2.space();
          }
        }
      });
      this.space();
    }
    this.push("}");
  }
  function ObjectTypeCallProperty(node) {
    if (node.static)
      this.push("static ");
    this.print(node.value, node);
  }
  function ObjectTypeIndexer(node) {
    if (node.static)
      this.push("static ");
    this.push("[");
    this.print(node.id, node);
    this.push(":");
    this.space();
    this.print(node.key, node);
    this.push("]");
    this.push(":");
    this.space();
    this.print(node.value, node);
  }
  function ObjectTypeProperty(node) {
    if (node.static)
      this.push("static ");
    this.print(node.key, node);
    if (node.optional)
      this.push("?");
    if (!t.isFunctionTypeAnnotation(node.value)) {
      this.push(":");
      this.space();
    }
    this.print(node.value, node);
  }
  function QualifiedTypeIdentifier(node) {
    this.print(node.qualification, node);
    this.push(".");
    this.print(node.id, node);
  }
  function UnionTypeAnnotation(node) {
    this.printJoin(node.types, node, {separator: " | "});
  }
  function TypeCastExpression(node) {
    this.push("(");
    this.print(node.expression, node);
    this.print(node.typeAnnotation, node);
    this.push(")");
  }
  function VoidTypeAnnotation() {
    this.push("void");
  }
  return module.exports;
});

$__System.registerDynamic("42", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.File = File;
  exports.Program = Program;
  exports.BlockStatement = BlockStatement;
  exports.Noop = Noop;
  exports.Directive = Directive;
  exports.DirectiveLiteral = DirectiveLiteral;
  function File(node) {
    this.print(node.program, node);
  }
  function Program(node) {
    this.printInnerComments(node, false);
    this.printSequence(node.directives, node);
    if (node.directives && node.directives.length)
      this.newline();
    this.printSequence(node.body, node);
  }
  function BlockStatement(node) {
    this.push("{");
    this.printInnerComments(node);
    if (node.body.length) {
      this.newline();
      this.printSequence(node.directives, node, {indent: true});
      if (node.directives && node.directives.length)
        this.newline();
      this.printSequence(node.body, node, {indent: true});
      if (!this.format.retainLines && !this.format.concise)
        this.removeLast("\n");
      this.source("end", node.loc);
      this.rightBrace();
    } else {
      this.source("end", node.loc);
      this.push("}");
    }
  }
  function Noop() {}
  function Directive(node) {
    this.print(node.value, node);
    this.semicolon();
  }
  function DirectiveLiteral(node) {
    this.push(this._stringLiteral(node.value));
  }
  return module.exports;
});

$__System.registerDynamic("43", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.JSXAttribute = JSXAttribute;
  exports.JSXIdentifier = JSXIdentifier;
  exports.JSXNamespacedName = JSXNamespacedName;
  exports.JSXMemberExpression = JSXMemberExpression;
  exports.JSXSpreadAttribute = JSXSpreadAttribute;
  exports.JSXExpressionContainer = JSXExpressionContainer;
  exports.JSXText = JSXText;
  exports.JSXElement = JSXElement;
  exports.JSXOpeningElement = JSXOpeningElement;
  exports.JSXClosingElement = JSXClosingElement;
  exports.JSXEmptyExpression = JSXEmptyExpression;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function JSXAttribute(node) {
    this.print(node.name, node);
    if (node.value) {
      this.push("=");
      this.print(node.value, node);
    }
  }
  function JSXIdentifier(node) {
    this.push(node.name);
  }
  function JSXNamespacedName(node) {
    this.print(node.namespace, node);
    this.push(":");
    this.print(node.name, node);
  }
  function JSXMemberExpression(node) {
    this.print(node.object, node);
    this.push(".");
    this.print(node.property, node);
  }
  function JSXSpreadAttribute(node) {
    this.push("{...");
    this.print(node.argument, node);
    this.push("}");
  }
  function JSXExpressionContainer(node) {
    this.push("{");
    this.print(node.expression, node);
    this.push("}");
  }
  function JSXText(node) {
    this.push(node.value, true);
  }
  function JSXElement(node) {
    var open = node.openingElement;
    this.print(open, node);
    if (open.selfClosing)
      return;
    this.indent();
    for (var _iterator = node.children,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var child = _ref;
      this.print(child, node);
    }
    this.dedent();
    this.print(node.closingElement, node);
  }
  function JSXOpeningElement(node) {
    this.push("<");
    this.print(node.name, node);
    if (node.attributes.length > 0) {
      this.push(" ");
      this.printJoin(node.attributes, node, {separator: " "});
    }
    this.push(node.selfClosing ? " />" : ">");
  }
  function JSXClosingElement(node) {
    this.push("</");
    this.print(node.name, node);
    this.push(">");
  }
  function JSXEmptyExpression() {}
  return module.exports;
});

$__System.registerDynamic("44", ["45", "f", "40", "15", "16", "17", "1b", "2c", "38", "9", "2d", "39", "3b", "3c", "3d", "3e", "3f", "41", "42", "43"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _assign = $__require('45');
  var _assign2 = _interopRequireDefault(_assign);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _repeating = $__require('1b');
  var _repeating2 = _interopRequireDefault(_repeating);
  var _buffer = $__require('2c');
  var _buffer2 = _interopRequireDefault(_buffer);
  var _node = $__require('38');
  var n = _interopRequireWildcard(_node);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Printer = function(_Buffer) {
    (0, _inherits3.default)(Printer, _Buffer);
    function Printer() {
      (0, _classCallCheck3.default)(this, Printer);
      for (var _len = arguments.length,
          args = Array(_len),
          _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var _this = (0, _possibleConstructorReturn3.default)(this, _Buffer.call.apply(_Buffer, [this].concat(args)));
      _this.insideAux = false;
      _this.printAuxAfterOnNextUserNode = false;
      _this._printStack = [];
      return _this;
    }
    Printer.prototype.print = function print(node, parent) {
      var _this2 = this;
      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      if (!node)
        return;
      this._lastPrintedIsEmptyStatement = false;
      if (parent && parent._compact) {
        node._compact = true;
      }
      var oldInAux = this.insideAux;
      this.insideAux = !node.loc;
      var oldConcise = this.format.concise;
      if (node._compact) {
        this.format.concise = true;
      }
      var printMethod = this[node.type];
      if (!printMethod) {
        throw new ReferenceError("unknown node of type " + (0, _stringify2.default)(node.type) + " with constructor " + (0, _stringify2.default)(node && node.constructor.name));
      }
      this._printStack.push(node);
      if (node.loc)
        this.printAuxAfterComment();
      this.printAuxBeforeComment(oldInAux);
      var needsParens = n.needsParens(node, parent, this._printStack);
      if (needsParens)
        this.push("(");
      this.printLeadingComments(node, parent);
      this.catchUp(node);
      this._printNewline(true, node, parent, opts);
      if (opts.before)
        opts.before();
      var loc = t.isProgram(node) || t.isFile(node) ? null : node.loc;
      this.withSource("start", loc, function() {
        _this2._print(node, parent);
      });
      if (node.loc)
        this.printAuxAfterComment();
      this.printTrailingComments(node, parent);
      if (needsParens)
        this.push(")");
      this._printStack.pop();
      if (opts.after)
        opts.after();
      this.format.concise = oldConcise;
      this.insideAux = oldInAux;
      this._printNewline(false, node, parent, opts);
    };
    Printer.prototype.printAuxBeforeComment = function printAuxBeforeComment(wasInAux) {
      var comment = this.format.auxiliaryCommentBefore;
      if (!wasInAux && this.insideAux && !this.printAuxAfterOnNextUserNode) {
        this.printAuxAfterOnNextUserNode = true;
        if (comment)
          this.printComment({
            type: "CommentBlock",
            value: comment
          });
      }
    };
    Printer.prototype.printAuxAfterComment = function printAuxAfterComment() {
      if (this.printAuxAfterOnNextUserNode) {
        this.printAuxAfterOnNextUserNode = false;
        var comment = this.format.auxiliaryCommentAfter;
        if (comment)
          this.printComment({
            type: "CommentBlock",
            value: comment
          });
      }
    };
    Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
      var extra = node.extra;
      if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
        return extra.raw;
      }
    };
    Printer.prototype._print = function _print(node, parent) {
      if (!this.format.minified) {
        var extra = this.getPossibleRaw(node);
        if (extra) {
          this.push("");
          this._push(extra);
          return;
        }
      }
      var printMethod = this[node.type];
      printMethod.call(this, node, parent);
    };
    Printer.prototype.printJoin = function printJoin(nodes, parent) {
      var _this3 = this;
      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      if (!nodes || !nodes.length)
        return;
      var len = nodes.length;
      var node = void 0,
          i = void 0;
      if (opts.indent)
        this.indent();
      var printOpts = {
        statement: opts.statement,
        addNewlines: opts.addNewlines,
        after: function after() {
          if (opts.iterator) {
            opts.iterator(node, i);
          }
          if (opts.separator && parent.loc) {
            _this3.printAuxAfterComment();
          }
          if (opts.separator && i < len - 1) {
            _this3.push(opts.separator);
          }
        }
      };
      for (i = 0; i < nodes.length; i++) {
        node = nodes[i];
        this.print(node, parent, printOpts);
      }
      if (opts.indent)
        this.dedent();
    };
    Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
      var indent = !!node.leadingComments;
      if (indent)
        this.indent();
      this.print(node, parent);
      if (indent)
        this.dedent();
    };
    Printer.prototype.printBlock = function printBlock(parent) {
      var node = parent.body;
      if (!t.isEmptyStatement(node)) {
        this.space();
      }
      this.print(node, parent);
    };
    Printer.prototype.generateComment = function generateComment(comment) {
      var val = comment.value;
      if (comment.type === "CommentLine") {
        val = "//" + val;
      } else {
        val = "/*" + val + "*/";
      }
      return val;
    };
    Printer.prototype.printTrailingComments = function printTrailingComments(node, parent) {
      this.printComments(this.getComments(false, node, parent));
    };
    Printer.prototype.printLeadingComments = function printLeadingComments(node, parent) {
      this.printComments(this.getComments(true, node, parent));
    };
    Printer.prototype.printInnerComments = function printInnerComments(node) {
      var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      if (!node.innerComments)
        return;
      if (indent)
        this.indent();
      this.printComments(node.innerComments);
      if (indent)
        this.dedent();
    };
    Printer.prototype.printSequence = function printSequence(nodes, parent) {
      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      opts.statement = true;
      return this.printJoin(nodes, parent, opts);
    };
    Printer.prototype.printList = function printList(items, parent) {
      var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      if (opts.separator == null) {
        opts.separator = ",";
        if (!this.format.compact)
          opts.separator += " ";
      }
      return this.printJoin(items, parent, opts);
    };
    Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
      if (this.format.retainLines || this.format.compact)
        return;
      if (!opts.statement && !n.isUserWhitespacable(node, parent)) {
        return;
      }
      if (this.format.concise) {
        this.space();
        return;
      }
      var lines = 0;
      if (node.start != null && !node._ignoreUserWhitespace && this.tokens.length) {
        if (leading) {
          lines = this.whitespace.getNewlinesBefore(node);
        } else {
          lines = this.whitespace.getNewlinesAfter(node);
        }
      } else {
        if (!leading)
          lines++;
        if (opts.addNewlines)
          lines += opts.addNewlines(leading, node) || 0;
        var needs = n.needsWhitespaceAfter;
        if (leading)
          needs = n.needsWhitespaceBefore;
        if (needs(node, parent))
          lines++;
        if (!this.buf)
          lines = 0;
      }
      this.newline(lines);
    };
    Printer.prototype.getComments = function getComments(leading, node) {
      return node && (leading ? node.leadingComments : node.trailingComments) || [];
    };
    Printer.prototype.shouldPrintComment = function shouldPrintComment(comment) {
      if (this.format.shouldPrintComment) {
        return this.format.shouldPrintComment(comment.value);
      } else {
        if (!this.format.minified && (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0)) {
          return true;
        } else {
          return this.format.comments;
        }
      }
    };
    Printer.prototype.printComment = function printComment(comment) {
      var _this4 = this;
      if (!this.shouldPrintComment(comment))
        return;
      if (comment.ignore)
        return;
      comment.ignore = true;
      if (comment.start != null) {
        if (this.printedCommentStarts[comment.start])
          return;
        this.printedCommentStarts[comment.start] = true;
      }
      this.withSource(null, null, function() {
        _this4.catchUp(comment);
        _this4.newline(_this4.whitespace.getNewlinesBefore(comment));
        var column = _this4.position.column;
        var val = _this4.generateComment(comment);
        if (column && !_this4.isLast(["\n", " ", "[", "{"])) {
          _this4._push(" ");
          column++;
        }
        if (comment.type === "CommentBlock" && _this4.format.indent.adjustMultilineComment) {
          var offset = comment.loc && comment.loc.start.column;
          if (offset) {
            var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }
          var indent = Math.max(_this4.indentSize(), column);
          val = val.replace(/\n/g, "\n" + (0, _repeating2.default)(" ", indent));
        }
        if (column === 0) {
          val = _this4.getIndent() + val;
        }
        if ((_this4.format.compact || _this4.format.concise || _this4.format.retainLines) && comment.type === "CommentLine") {
          val += "\n";
        }
        _this4._push(val);
        _this4.newline(_this4.whitespace.getNewlinesAfter(comment));
      });
    };
    Printer.prototype.printComments = function printComments(comments) {
      if (!comments || !comments.length)
        return;
      for (var _iterator = comments,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var comment = _ref;
        this.printComment(comment);
      }
    };
    return Printer;
  }(_buffer2.default);
  exports.default = Printer;
  var _arr = [$__require('2d'), $__require('39'), $__require('3b'), $__require('3c'), $__require('3d'), $__require('3e'), $__require('3f'), $__require('41'), $__require('42'), $__require('43')];
  for (var _i2 = 0; _i2 < _arr.length; _i2++) {
    var generator = _arr[_i2];
    (0, _assign2.default)(Printer.prototype, generator);
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("5", ["15", "16", "17", "1a", "1c", "28", "2a", "6", "44"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.CodeGenerator = undefined;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  exports.default = function(ast, opts, code) {
    var gen = new CodeGenerator(ast, opts, code);
    return gen.generate();
  };
  var _detectIndent = $__require('1a');
  var _detectIndent2 = _interopRequireDefault(_detectIndent);
  var _whitespace = $__require('1c');
  var _whitespace2 = _interopRequireDefault(_whitespace);
  var _sourceMap = $__require('28');
  var _sourceMap2 = _interopRequireDefault(_sourceMap);
  var _position = $__require('2a');
  var _position2 = _interopRequireDefault(_position);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _printer = $__require('44');
  var _printer2 = _interopRequireDefault(_printer);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var CodeGenerator = exports.CodeGenerator = function(_Printer) {
    (0, _inherits3.default)(CodeGenerator, _Printer);
    function CodeGenerator(ast, opts, code) {
      (0, _classCallCheck3.default)(this, CodeGenerator);
      opts = opts || {};
      var comments = ast.comments || [];
      var tokens = ast.tokens || [];
      var format = CodeGenerator.normalizeOptions(code, opts, tokens);
      var position = new _position2.default();
      var _this = (0, _possibleConstructorReturn3.default)(this, _Printer.call(this, position, format));
      _this.comments = comments;
      _this.position = position;
      _this.tokens = tokens;
      _this.format = format;
      _this.opts = opts;
      _this.ast = ast;
      _this._inForStatementInitCounter = 0;
      _this.whitespace = new _whitespace2.default(tokens);
      _this.map = new _sourceMap2.default(position, opts, code);
      return _this;
    }
    CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
      var style = "  ";
      if (code && typeof code === "string") {
        var _indent = (0, _detectIndent2.default)(code).indent;
        if (_indent && _indent !== " ")
          style = _indent;
      }
      var format = {
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        shouldPrintComment: opts.shouldPrintComment,
        retainLines: opts.retainLines,
        comments: opts.comments == null || opts.comments,
        compact: opts.compact,
        minified: opts.minified,
        concise: opts.concise,
        quotes: opts.quotes || CodeGenerator.findCommonStringDelimiter(code, tokens),
        indent: {
          adjustMultilineComment: true,
          style: style,
          base: 0
        }
      };
      if (format.minified) {
        format.compact = true;
      }
      if (format.compact === "auto") {
        format.compact = code.length > 100000;
        if (format.compact) {
          console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
        }
      }
      if (format.compact) {
        format.indent.adjustMultilineComment = false;
      }
      return format;
    };
    CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
      var occurences = {
        single: 0,
        double: 0
      };
      var checked = 0;
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (token.type.label !== "string")
          continue;
        var raw = code.slice(token.start, token.end);
        if (raw[0] === "'") {
          occurences.single++;
        } else {
          occurences.double++;
        }
        checked++;
        if (checked >= 3)
          break;
      }
      if (occurences.single > occurences.double) {
        return "single";
      } else {
        return "double";
      }
    };
    CodeGenerator.prototype.generate = function generate() {
      this.print(this.ast);
      this.printAuxAfterComment();
      return {
        map: this.map.get(),
        code: this.get()
      };
    };
    return CodeGenerator;
  }(_printer2.default);
  return module.exports;
});

$__System.registerDynamic("46", ["15", "47", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _node = $__require('47');
  var _node2 = _interopRequireDefault(_node);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var verboseDebug = (0, _node2.default)("babel:verbose");
  var generalDebug = (0, _node2.default)("babel");
  var seenDeprecatedMessages = [];
  var Logger = function() {
    function Logger(file, filename) {
      (0, _classCallCheck3.default)(this, Logger);
      this.filename = filename;
      this.file = file;
    }
    Logger.prototype._buildMessage = function _buildMessage(msg) {
      var parts = "[BABEL] " + this.filename;
      if (msg)
        parts += ": " + msg;
      return parts;
    };
    Logger.prototype.warn = function warn(msg) {
      console.warn(this._buildMessage(msg));
    };
    Logger.prototype.error = function error(msg) {
      var Constructor = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];
      throw new Constructor(this._buildMessage(msg));
    };
    Logger.prototype.deprecate = function deprecate(msg) {
      if (this.file.opts && this.file.opts.suppressDeprecationMessages)
        return;
      msg = this._buildMessage(msg);
      if (seenDeprecatedMessages.indexOf(msg) >= 0)
        return;
      seenDeprecatedMessages.push(msg);
      console.error(msg);
    };
    Logger.prototype.verbose = function verbose(msg) {
      if (verboseDebug.enabled)
        verboseDebug(this._buildMessage(msg));
    };
    Logger.prototype.debug = function debug(msg) {
      if (generalDebug.enabled)
        generalDebug(this._buildMessage(msg));
    };
    Logger.prototype.deopt = function deopt(node, msg) {
      this.debug(msg);
    };
    return Logger;
  }();
  exports.default = Logger;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("33", ["48", "49"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseEach = $__require('48'),
      isArrayLike = $__require('49');
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];
    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }
  module.exports = baseMap;
  return module.exports;
});

$__System.registerDynamic("4a", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseSortBy(array, comparer) {
    var length = array.length;
    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }
  module.exports = baseSortBy;
  return module.exports;
});

$__System.registerDynamic("4b", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;
      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;
      if ((value > other && !othIsNull) || !valIsReflexive || (valIsNull && !othIsUndef && othIsReflexive) || (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive || (othIsNull && !valIsUndef && valIsReflexive) || (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }
  module.exports = baseCompareAscending;
  return module.exports;
});

$__System.registerDynamic("4c", ["4b"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseCompareAscending = $__require('4b');
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }
  module.exports = compareAscending;
  return module.exports;
});

$__System.registerDynamic("4d", ["32", "33", "4a", "4c", "4e"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseCallback = $__require('32'),
      baseMap = $__require('33'),
      baseSortBy = $__require('4a'),
      compareAscending = $__require('4c'),
      isIterateeCall = $__require('4e');
  function sortBy(collection, iteratee, thisArg) {
    if (collection == null) {
      return [];
    }
    if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
      iteratee = undefined;
    }
    var index = -1;
    iteratee = baseCallback(iteratee, thisArg, 3);
    var result = baseMap(collection, function(value, key, collection) {
      return {
        'criteria': iteratee(value, key, collection),
        'index': ++index,
        'value': value
      };
    });
    return baseSortBy(result, compareAscending);
  }
  module.exports = sortBy;
  return module.exports;
});

$__System.registerDynamic("4f", ["50", "4d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _plugin = $__require('50');
  var _plugin2 = _interopRequireDefault(_plugin);
  var _sortBy = $__require('4d');
  var _sortBy2 = _interopRequireDefault(_sortBy);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.default = new _plugin2.default({visitor: {Block: {exit: function exit(_ref) {
          var node = _ref.node;
          var hasChange = false;
          for (var i = 0; i < node.body.length; i++) {
            var bodyNode = node.body[i];
            if (bodyNode && bodyNode._blockHoist != null) {
              hasChange = true;
              break;
            }
          }
          if (!hasChange)
            return;
          node.body = (0, _sortBy2.default)(node.body, function(bodyNode) {
            var priority = bodyNode && bodyNode._blockHoist;
            if (priority == null)
              priority = 1;
            if (priority === true)
              priority = 2;
            return -1 * priority;
          });
        }}}});
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("51", ["52", "53", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.S + $export.F, 'Object', {assign: $__require('53')});
  return module.exports;
});

$__System.registerDynamic("54", ["51", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('51');
  module.exports = $__require('55').Object.assign;
  return module.exports;
});

$__System.registerDynamic("45", ["54", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('54'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("56", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var regexpEscapes = {
    '0': 'x30',
    '1': 'x31',
    '2': 'x32',
    '3': 'x33',
    '4': 'x34',
    '5': 'x35',
    '6': 'x36',
    '7': 'x37',
    '8': 'x38',
    '9': 'x39',
    'A': 'x41',
    'B': 'x42',
    'C': 'x43',
    'D': 'x44',
    'E': 'x45',
    'F': 'x46',
    'a': 'x61',
    'b': 'x62',
    'c': 'x63',
    'd': 'x64',
    'e': 'x65',
    'f': 'x66',
    'n': 'x6e',
    'r': 'x72',
    't': 'x74',
    'u': 'x75',
    'v': 'x76',
    'x': 'x78'
  };
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }
  module.exports = escapeRegExpChar;
  return module.exports;
});

$__System.registerDynamic("57", ["58", "56"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseToString = $__require('58'),
      escapeRegExpChar = $__require('56');
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);
  function escapeRegExp(string) {
    string = baseToString(string);
    return (string && reHasRegExpChars.test(string)) ? string.replace(reRegExpChars, escapeRegExpChar) : (string || '(?:)');
  }
  module.exports = escapeRegExp;
  return module.exports;
});

$__System.registerDynamic("59", ["58"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseToString = $__require('58');
  var nativeMin = Math.min;
  function startsWith(string, target, position) {
    string = baseToString(string);
    position = position == null ? 0 : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
    return string.lastIndexOf(target, position) == position;
  }
  module.exports = startsWith;
  return module.exports;
});

$__System.registerDynamic("36", ["5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObjectLike = $__require('5a');
  var boolTag = '[object Boolean]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isBoolean(value) {
    return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
  }
  module.exports = isBoolean;
  return module.exports;
});

$__System.registerDynamic("5b", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      var x = fn(xs[i], i);
      if (isArray(x))
        res.push.apply(res, x);
      else
        res.push(x);
    }
    return res;
  };
  var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  return module.exports;
});

$__System.registerDynamic("5c", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs,
        beg,
        left,
        right,
        result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;
      while (i < str.length && i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
  return module.exports;
});

$__System.registerDynamic("5d", ["5b", "5c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var concatMap = $__require('5b');
  var balanced = $__require('5c');
  module.exports = expandTop;
  var escSlash = '\0SLASH' + Math.random() + '\0';
  var escOpen = '\0OPEN' + Math.random() + '\0';
  var escClose = '\0CLOSE' + Math.random() + '\0';
  var escComma = '\0COMMA' + Math.random() + '\0';
  var escPeriod = '\0PERIOD' + Math.random() + '\0';
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
  }
  function escapeBraces(str) {
    return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
  }
  function unescapeBraces(str) {
    return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
  }
  function parseCommaParts(str) {
    if (!str)
      return [''];
    var parts = [];
    var m = balanced('{', '}', str);
    if (!m)
      return str.split(',');
    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(',');
    p[p.length - 1] += '{' + body + '}';
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length - 1] += postParts.shift();
      p.push.apply(p, postParts);
    }
    parts.push.apply(parts, p);
    return parts;
  }
  function expandTop(str) {
    if (!str)
      return [];
    return expand(escapeBraces(str), true).map(unescapeBraces);
  }
  function identity(e) {
    return e;
  }
  function embrace(str) {
    return '{' + str + '}';
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }
  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }
  function expand(str, isTop) {
    var expansions = [];
    var m = balanced('{', '}', str);
    if (!m || /\$$/.test(m.pre))
      return [str];
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = /^(.*,)+(.+)?$/.test(m.body);
    if (!isSequence && !isOptions) {
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }
    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length ? expand(m.post, false) : [''];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }
    var pre = m.pre;
    var post = m.post.length ? expand(m.post, false) : [''];
    var N;
    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length);
      var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);
      N = [];
      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) {
        return expand(el, false);
      });
    }
    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
    return expansions;
  }
  return module.exports;
});

$__System.registerDynamic("5e", ["@node/path", "5d"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = minimatch;
  minimatch.Minimatch = Minimatch;
  var path = {sep: '/'};
  try {
    path = $__require('@node/path');
  } catch (er) {}
  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
  var expand = $__require('5d');
  var qmark = '[^/]';
  var star = qmark + '*?';
  var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';
  var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';
  var reSpecials = charSet('().*{}+?[]^$\\!');
  function charSet(s) {
    return s.split('').reduce(function(set, c) {
      set[c] = true;
      return set;
    }, {});
  }
  var slashSplit = /\/+/;
  minimatch.filter = filter;
  function filter(pattern, options) {
    options = options || {};
    return function(p, i, list) {
      return minimatch(p, pattern, options);
    };
  }
  function ext(a, b) {
    a = a || {};
    b = b || {};
    var t = {};
    Object.keys(b).forEach(function(k) {
      t[k] = b[k];
    });
    Object.keys(a).forEach(function(k) {
      t[k] = a[k];
    });
    return t;
  }
  minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return minimatch;
    var orig = minimatch;
    var m = function minimatch(p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options));
    };
    m.Minimatch = function Minimatch(pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options));
    };
    return m;
  };
  Minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return Minimatch;
    return minimatch.defaults(def).Minimatch;
  };
  function minimatch(p, pattern, options) {
    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required');
    }
    if (!options)
      options = {};
    if (!options.nocomment && pattern.charAt(0) === '#') {
      return false;
    }
    if (pattern.trim() === '')
      return p === '';
    return new Minimatch(pattern, options).match(p);
  }
  function Minimatch(pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options);
    }
    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required');
    }
    if (!options)
      options = {};
    pattern = pattern.trim();
    if (path.sep !== '/') {
      pattern = pattern.split(path.sep).join('/');
    }
    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;
    this.make();
  }
  Minimatch.prototype.debug = function() {};
  Minimatch.prototype.make = make;
  function make() {
    if (this._made)
      return;
    var pattern = this.pattern;
    var options = this.options;
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    var set = this.globSet = this.braceExpand();
    if (options.debug)
      this.debug = console.error;
    this.debug(this.pattern, set);
    set = this.globParts = set.map(function(s) {
      return s.split(slashSplit);
    });
    this.debug(this.pattern, set);
    set = set.map(function(s, si, set) {
      return s.map(this.parse, this);
    }, this);
    this.debug(this.pattern, set);
    set = set.filter(function(s) {
      return s.indexOf(false) === -1;
    });
    this.debug(this.pattern, set);
    this.set = set;
  }
  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate() {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;
    if (options.nonegate)
      return;
    for (var i = 0,
        l = pattern.length; i < l && pattern.charAt(i) === '!'; i++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
  }
  minimatch.braceExpand = function(pattern, options) {
    return braceExpand(pattern, options);
  };
  Minimatch.prototype.braceExpand = braceExpand;
  function braceExpand(pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }
    pattern = typeof pattern === 'undefined' ? this.pattern : pattern;
    if (typeof pattern === 'undefined') {
      throw new Error('undefined pattern');
    }
    if (options.nobrace || !pattern.match(/\{.*\}/)) {
      return [pattern];
    }
    return expand(pattern);
  }
  Minimatch.prototype.parse = parse;
  var SUBPARSE = {};
  function parse(pattern, isSub) {
    var options = this.options;
    if (!options.noglobstar && pattern === '**')
      return GLOBSTAR;
    if (pattern === '')
      return '';
    var re = '';
    var hasMagic = !!options.nocase;
    var escaping = false;
    var patternListStack = [];
    var negativeLists = [];
    var plType;
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    var patternStart = pattern.charAt(0) === '.' ? '' : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))' : '(?!\\.)';
    var self = this;
    function clearStateChar() {
      if (stateChar) {
        switch (stateChar) {
          case '*':
            re += star;
            hasMagic = true;
            break;
          case '?':
            re += qmark;
            hasMagic = true;
            break;
          default:
            re += '\\' + stateChar;
            break;
        }
        self.debug('clearStateChar %j %j', stateChar, re);
        stateChar = false;
      }
    }
    for (var i = 0,
        len = pattern.length,
        c; (i < len) && (c = pattern.charAt(i)); i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c);
      if (escaping && reSpecials[c]) {
        re += '\\' + c;
        escaping = false;
        continue;
      }
      switch (c) {
        case '/':
          return false;
        case '\\':
          clearStateChar();
          escaping = true;
          continue;
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);
          if (inClass) {
            this.debug('  in class');
            if (c === '!' && i === classStart + 1)
              c = '^';
            re += c;
            continue;
          }
          self.debug('call clearStateChar %j', stateChar);
          clearStateChar();
          stateChar = c;
          if (options.noext)
            clearStateChar();
          continue;
        case '(':
          if (inClass) {
            re += '(';
            continue;
          }
          if (!stateChar) {
            re += '\\(';
            continue;
          }
          plType = stateChar;
          patternListStack.push({
            type: plType,
            start: i - 1,
            reStart: re.length
          });
          re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
          this.debug('plType %j %j', stateChar, re);
          stateChar = false;
          continue;
        case ')':
          if (inClass || !patternListStack.length) {
            re += '\\)';
            continue;
          }
          clearStateChar();
          hasMagic = true;
          re += ')';
          var pl = patternListStack.pop();
          plType = pl.type;
          switch (plType) {
            case '!':
              negativeLists.push(pl);
              re += ')[^/]*?)';
              pl.reEnd = re.length;
              break;
            case '?':
            case '+':
            case '*':
              re += plType;
              break;
            case '@':
              break;
          }
          continue;
        case '|':
          if (inClass || !patternListStack.length || escaping) {
            re += '\\|';
            escaping = false;
            continue;
          }
          clearStateChar();
          re += '|';
          continue;
        case '[':
          clearStateChar();
          if (inClass) {
            re += '\\' + c;
            continue;
          }
          inClass = true;
          classStart = i;
          reClassStart = re.length;
          re += c;
          continue;
        case ']':
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c;
            escaping = false;
            continue;
          }
          if (inClass) {
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp('[' + cs + ']');
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
          }
          hasMagic = true;
          inClass = false;
          re += c;
          continue;
        default:
          clearStateChar();
          if (escaping) {
            escaping = false;
          } else if (reSpecials[c] && !(c === '^' && inClass)) {
            re += '\\';
          }
          re += c;
      }
    }
    if (inClass) {
      cs = pattern.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + '\\[' + sp[0];
      hasMagic = hasMagic || sp[1];
    }
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + 3);
      tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function(_, $1, $2) {
        if (!$2) {
          $2 = '\\';
        }
        return $1 + $1 + $2 + '|';
      });
      this.debug('tail=%j\n   %s', tail, tail);
      var t = pl.type === '*' ? star : pl.type === '?' ? qmark : '\\' + pl.type;
      hasMagic = true;
      re = re.slice(0, pl.reStart) + t + '\\(' + tail;
    }
    clearStateChar();
    if (escaping) {
      re += '\\\\';
    }
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case '.':
      case '[':
      case '(':
        addPatternStart = true;
    }
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n];
      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);
      nlLast += nlAfter;
      var openParensBefore = nlBefore.split('(').length - 1;
      var cleanAfter = nlAfter;
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
      }
      nlAfter = cleanAfter;
      var dollar = '';
      if (nlAfter === '' && isSub !== SUBPARSE) {
        dollar = '$';
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re;
    }
    if (addPatternStart) {
      re = patternStart + re;
    }
    if (isSub === SUBPARSE) {
      return [re, hasMagic];
    }
    if (!hasMagic) {
      return globUnescape(pattern);
    }
    var flags = options.nocase ? 'i' : '';
    var regExp = new RegExp('^' + re + '$', flags);
    regExp._glob = pattern;
    regExp._src = re;
    return regExp;
  }
  minimatch.makeRe = function(pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe();
  };
  Minimatch.prototype.makeRe = makeRe;
  function makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    var set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    var options = this.options;
    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
    var flags = options.nocase ? 'i' : '';
    var re = set.map(function(pattern) {
      return pattern.map(function(p) {
        return (p === GLOBSTAR) ? twoStar : (typeof p === 'string') ? regExpEscape(p) : p._src;
      }).join('\\\/');
    }).join('|');
    re = '^(?:' + re + ')$';
    if (this.negate)
      re = '^(?!' + re + ').*$';
    try {
      this.regexp = new RegExp(re, flags);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  minimatch.match = function(list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function(f) {
      return mm.match(f);
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list;
  };
  Minimatch.prototype.match = match;
  function match(f, partial) {
    this.debug('match', f, this.pattern);
    if (this.comment)
      return false;
    if (this.empty)
      return f === '';
    if (f === '/' && partial)
      return true;
    var options = this.options;
    if (path.sep !== '/') {
      f = f.split(path.sep).join('/');
    }
    f = f.split(slashSplit);
    this.debug(this.pattern, 'split', f);
    var set = this.set;
    this.debug(this.pattern, 'set', set);
    var filename;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i];
      if (filename)
        break;
    }
    for (i = 0; i < set.length; i++) {
      var pattern = set[i];
      var file = f;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate)
          return true;
        return !this.negate;
      }
    }
    if (options.flipNegate)
      return false;
    return this.negate;
  }
  Minimatch.prototype.matchOne = function(file, pattern, partial) {
    var options = this.options;
    this.debug('matchOne', {
      'this': this,
      file: file,
      pattern: pattern
    });
    this.debug('matchOne', file.length, pattern.length);
    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length; (fi < fl) && (pi < pl); fi++, pi++) {
      this.debug('matchOne loop');
      var p = pattern[pi];
      var f = file[fi];
      this.debug(pattern, p, f);
      if (p === false)
        return false;
      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug('** at the end');
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' || (!options.dot && file[fi].charAt(0) === '.'))
              return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === '.' || swallowee === '..' || (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr);
              break;
            }
            this.debug('globstar swallow a segment, and continue');
            fr++;
          }
        }
        if (partial) {
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
          if (fr === fl)
            return true;
        }
        return false;
      }
      var hit;
      if (typeof p === 'string') {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase();
        } else {
          hit = f === p;
        }
        this.debug('string match', p, f, hit);
      } else {
        hit = f.match(p);
        this.debug('pattern match', p, f, hit);
      }
      if (!hit)
        return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
      return emptyFileEnd;
    }
    throw new Error('wtf?');
  };
  function globUnescape(s) {
    return s.replace(/\\(.)/g, '$1');
  }
  function regExpEscape(s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
  }
  return module.exports;
});

$__System.registerDynamic("5f", ["60"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('60');
  return module.exports;
});

$__System.registerDynamic("61", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(str) {
    var isExtendedLengthPath = /^\\\\\?\\/.test(str);
    var hasNonAscii = /[^\x00-\x80]+/.test(str);
    if (isExtendedLengthPath || hasNonAscii) {
      return str;
    }
    return str.replace(/\\/g, '/');
  };
  return module.exports;
});

$__System.registerDynamic("62", ["f", "@node/util", "57", "59", "36", "5e", "5f", "63", "64", "@node/path", "61", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.inspect = exports.inherits = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _util = $__require('@node/util');
  Object.defineProperty(exports, "inherits", {
    enumerable: true,
    get: function get() {
      return _util.inherits;
    }
  });
  Object.defineProperty(exports, "inspect", {
    enumerable: true,
    get: function get() {
      return _util.inspect;
    }
  });
  exports.canCompile = canCompile;
  exports.list = list;
  exports.regexify = regexify;
  exports.arrayify = arrayify;
  exports.booleanify = booleanify;
  exports.shouldIgnore = shouldIgnore;
  var _escapeRegExp = $__require('57');
  var _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);
  var _startsWith = $__require('59');
  var _startsWith2 = _interopRequireDefault(_startsWith);
  var _isBoolean = $__require('36');
  var _isBoolean2 = _interopRequireDefault(_isBoolean);
  var _minimatch = $__require('5e');
  var _minimatch2 = _interopRequireDefault(_minimatch);
  var _contains = $__require('5f');
  var _contains2 = _interopRequireDefault(_contains);
  var _isString = $__require('63');
  var _isString2 = _interopRequireDefault(_isString);
  var _isRegExp = $__require('64');
  var _isRegExp2 = _interopRequireDefault(_isRegExp);
  var _path = $__require('@node/path');
  var _path2 = _interopRequireDefault(_path);
  var _slash = $__require('61');
  var _slash2 = _interopRequireDefault(_slash);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function canCompile(filename, altExts) {
    var exts = altExts || canCompile.EXTENSIONS;
    var ext = _path2.default.extname(filename);
    return ((0, _contains2.default)(exts, ext));
  }
  canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];
  function list(val) {
    if (!val) {
      return [];
    } else if (Array.isArray(val)) {
      return val;
    } else if (typeof val === "string") {
      return val.split(",");
    } else {
      return [val];
    }
  }
  function regexify(val) {
    if (!val) {
      return new RegExp(/.^/);
    }
    if (Array.isArray(val)) {
      val = new RegExp(val.map(_escapeRegExp2.default).join("|"), "i");
    }
    if (typeof val === "string") {
      val = (0, _slash2.default)(val);
      if ((0, _startsWith2.default)(val, "./") || (0, _startsWith2.default)(val, "*/"))
        val = val.slice(2);
      if ((0, _startsWith2.default)(val, "**/"))
        val = val.slice(3);
      var regex = _minimatch2.default.makeRe(val, {nocase: true});
      return new RegExp(regex.source.slice(1, -1), "i");
    }
    if ((0, _isRegExp2.default)(val)) {
      return val;
    }
    throw new TypeError("illegal type for regexify");
  }
  function arrayify(val, mapFn) {
    if (!val)
      return [];
    if ((0, _isBoolean2.default)(val))
      return arrayify([val], mapFn);
    if ((0, _isString2.default)(val))
      return arrayify(list(val), mapFn);
    if (Array.isArray(val)) {
      if (mapFn)
        val = val.map(mapFn);
      return val;
    }
    return [val];
  }
  function booleanify(val) {
    if (val === "true" || val == 1) {
      return true;
    }
    if (val === "false" || val == 0 || !val) {
      return false;
    }
    return val;
  }
  function shouldIgnore(filename) {
    var ignore = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var only = arguments[2];
    filename = (0, _slash2.default)(filename);
    if (only) {
      for (var _iterator = only,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var pattern = _ref;
        if (_shouldIgnore(pattern, filename))
          return false;
      }
      return true;
    } else if (ignore.length) {
      for (var _iterator2 = ignore,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var _pattern = _ref2;
        if (_shouldIgnore(_pattern, filename))
          return true;
      }
    }
    return false;
  }
  function _shouldIgnore(pattern, filename) {
    if (typeof pattern === "function") {
      return pattern(filename);
    } else {
      return pattern.test(filename);
    }
  }
  return module.exports;
});

$__System.registerDynamic("65", ["61", "62", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.filename = undefined;
  exports.boolean = boolean;
  exports.booleanString = booleanString;
  exports.list = list;
  var _slash = $__require('61');
  var _slash2 = _interopRequireDefault(_slash);
  var _util = $__require('62');
  var util = _interopRequireWildcard(_util);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var filename = exports.filename = _slash2.default;
  function boolean(val) {
    return !!val;
  }
  function booleanString(val) {
    return util.booleanify(val);
  }
  function list(val) {
    return util.list(val);
  }
  return module.exports;
});

$__System.registerDynamic("66", ["65", "67", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.config = undefined;
  exports.normaliseOptions = normaliseOptions;
  var _parsers = $__require('65');
  var parsers = _interopRequireWildcard(_parsers);
  var _config = $__require('67');
  var _config2 = _interopRequireDefault(_config);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  exports.config = _config2.default;
  function normaliseOptions() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    for (var key in options) {
      var val = options[key];
      if (val == null)
        continue;
      var opt = _config2.default[key];
      if (opt && opt.alias)
        opt = _config2.default[opt.alias];
      if (!opt)
        continue;
      var parser = parsers[opt.type];
      if (parser)
        val = parser(val);
      options[key] = val;
    }
    return options;
  }
  return module.exports;
});

$__System.registerDynamic("68", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__System._nodeRequire && $__System._nodeRequire('module');
  return module.exports;
});

$__System.registerDynamic("69", ["29", "68", "@node/path", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  exports.default = function(loc) {
    var relative = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];
    if ((typeof _module2.default === "undefined" ? "undefined" : (0, _typeof3.default)(_module2.default)) === "object")
      return null;
    var relativeMod = relativeModules[relative];
    if (!relativeMod) {
      relativeMod = new _module2.default();
      var filename = _path2.default.join(relative, ".babelrc");
      relativeMod.id = filename;
      relativeMod.filename = filename;
      relativeMod.paths = _module2.default._nodeModulePaths(relative);
      relativeModules[relative] = relativeMod;
    }
    try {
      return (_module2.default._resolveFilename(loc, relativeMod));
    } catch (err) {
      return null;
    }
  };
  var _module = $__require('68');
  var _module2 = _interopRequireDefault(_module);
  var _path = $__require('@node/path');
  var _path2 = _interopRequireDefault(_path);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var relativeModules = {};
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("6a", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var JSON5 = (typeof exports === 'object' ? exports : {});
  JSON5.parse = (function() {
    "use strict";
    var at,
        ch,
        escapee = {
          "'": "'",
          '"': '"',
          '\\': '\\',
          '/': '/',
          '\n': '',
          b: '\b',
          f: '\f',
          n: '\n',
          r: '\r',
          t: '\t'
        },
        ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', '\uFEFF'],
        text,
        error = function(m) {
          var error = new SyntaxError();
          error.message = m;
          error.at = at;
          error.text = text;
          throw error;
        },
        next = function(c) {
          if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
          }
          ch = text.charAt(at);
          at += 1;
          return ch;
        },
        peek = function() {
          return text.charAt(at);
        },
        identifier = function() {
          var key = ch;
          if ((ch !== '_' && ch !== '$') && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
            error("Bad identifier");
          }
          while (next() && (ch === '_' || ch === '$' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9'))) {
            key += ch;
          }
          return key;
        },
        number = function() {
          var number,
              sign = '',
              string = '',
              base = 10;
          if (ch === '-' || ch === '+') {
            sign = ch;
            next(ch);
          }
          if (ch === 'I') {
            number = word();
            if (typeof number !== 'number' || isNaN(number)) {
              error('Unexpected word for number');
            }
            return (sign === '-') ? -number : number;
          }
          if (ch === 'N') {
            number = word();
            if (!isNaN(number)) {
              error('expected word to be NaN');
            }
            return number;
          }
          if (ch === '0') {
            string += ch;
            next();
            if (ch === 'x' || ch === 'X') {
              string += ch;
              next();
              base = 16;
            } else if (ch >= '0' && ch <= '9') {
              error('Octal literal');
            }
          }
          switch (base) {
            case 10:
              while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
              }
              if (ch === '.') {
                string += '.';
                while (next() && ch >= '0' && ch <= '9') {
                  string += ch;
                }
              }
              if (ch === 'e' || ch === 'E') {
                string += ch;
                next();
                if (ch === '-' || ch === '+') {
                  string += ch;
                  next();
                }
                while (ch >= '0' && ch <= '9') {
                  string += ch;
                  next();
                }
              }
              break;
            case 16:
              while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                string += ch;
                next();
              }
              break;
          }
          if (sign === '-') {
            number = -string;
          } else {
            number = +string;
          }
          if (!isFinite(number)) {
            error("Bad number");
          } else {
            return number;
          }
        },
        string = function() {
          var hex,
              i,
              string = '',
              delim,
              uffff;
          if (ch === '"' || ch === "'") {
            delim = ch;
            while (next()) {
              if (ch === delim) {
                next();
                return string;
              } else if (ch === '\\') {
                next();
                if (ch === 'u') {
                  uffff = 0;
                  for (i = 0; i < 4; i += 1) {
                    hex = parseInt(next(), 16);
                    if (!isFinite(hex)) {
                      break;
                    }
                    uffff = uffff * 16 + hex;
                  }
                  string += String.fromCharCode(uffff);
                } else if (ch === '\r') {
                  if (peek() === '\n') {
                    next();
                  }
                } else if (typeof escapee[ch] === 'string') {
                  string += escapee[ch];
                } else {
                  break;
                }
              } else if (ch === '\n') {
                break;
              } else {
                string += ch;
              }
            }
          }
          error("Bad string");
        },
        inlineComment = function() {
          if (ch !== '/') {
            error("Not an inline comment");
          }
          do {
            next();
            if (ch === '\n' || ch === '\r') {
              next();
              return;
            }
          } while (ch);
        },
        blockComment = function() {
          if (ch !== '*') {
            error("Not a block comment");
          }
          do {
            next();
            while (ch === '*') {
              next('*');
              if (ch === '/') {
                next('/');
                return;
              }
            }
          } while (ch);
          error("Unterminated block comment");
        },
        comment = function() {
          if (ch !== '/') {
            error("Not a comment");
          }
          next('/');
          if (ch === '/') {
            inlineComment();
          } else if (ch === '*') {
            blockComment();
          } else {
            error("Unrecognized comment");
          }
        },
        white = function() {
          while (ch) {
            if (ch === '/') {
              comment();
            } else if (ws.indexOf(ch) >= 0) {
              next();
            } else {
              return;
            }
          }
        },
        word = function() {
          switch (ch) {
            case 't':
              next('t');
              next('r');
              next('u');
              next('e');
              return true;
            case 'f':
              next('f');
              next('a');
              next('l');
              next('s');
              next('e');
              return false;
            case 'n':
              next('n');
              next('u');
              next('l');
              next('l');
              return null;
            case 'I':
              next('I');
              next('n');
              next('f');
              next('i');
              next('n');
              next('i');
              next('t');
              next('y');
              return Infinity;
            case 'N':
              next('N');
              next('a');
              next('N');
              return NaN;
          }
          error("Unexpected '" + ch + "'");
        },
        value,
        array = function() {
          var array = [];
          if (ch === '[') {
            next('[');
            white();
            while (ch) {
              if (ch === ']') {
                next(']');
                return array;
              }
              if (ch === ',') {
                error("Missing array element");
              } else {
                array.push(value());
              }
              white();
              if (ch !== ',') {
                next(']');
                return array;
              }
              next(',');
              white();
            }
          }
          error("Bad array");
        },
        object = function() {
          var key,
              object = {};
          if (ch === '{') {
            next('{');
            white();
            while (ch) {
              if (ch === '}') {
                next('}');
                return object;
              }
              if (ch === '"' || ch === "'") {
                key = string();
              } else {
                key = identifier();
              }
              white();
              next(':');
              object[key] = value();
              white();
              if (ch !== ',') {
                next('}');
                return object;
              }
              next(',');
              white();
            }
          }
          error("Bad object");
        };
    value = function() {
      white();
      switch (ch) {
        case '{':
          return object();
        case '[':
          return array();
        case '"':
        case "'":
          return string();
        case '-':
        case '+':
        case '.':
          return number();
        default:
          return ch >= '0' && ch <= '9' ? number() : word();
      }
    };
    return function(source, reviver) {
      var result;
      text = String(source);
      at = 0;
      ch = ' ';
      result = value();
      white();
      if (ch) {
        error("Syntax error");
      }
      return typeof reviver === 'function' ? (function walk(holder, key) {
        var k,
            v,
            value = holder[key];
        if (value && typeof value === 'object') {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return reviver.call(holder, key, value);
      }({'': result}, '')) : result;
    };
  }());
  JSON5.stringify = function(obj, replacer, space) {
    if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
      throw new Error('Replacer must be a function or an array');
    }
    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
      var value = holder[key];
      if (value && value.toJSON && typeof value.toJSON === "function") {
        value = value.toJSON();
      }
      if (typeof(replacer) === "function") {
        return replacer.call(holder, key, value);
      } else if (replacer) {
        if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
          return value;
        } else {
          return undefined;
        }
      } else {
        return value;
      }
    };
    function isWordChar(char) {
      return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || (char >= '0' && char <= '9') || char === '_' || char === '$';
    }
    function isWordStart(char) {
      return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || char === '_' || char === '$';
    }
    function isWord(key) {
      if (typeof key !== 'string') {
        return false;
      }
      if (!isWordStart(key[0])) {
        return false;
      }
      var i = 1,
          length = key.length;
      while (i < length) {
        if (!isWordChar(key[i])) {
          return false;
        }
        i++;
      }
      return true;
    }
    JSON5.isWord = isWord;
    function isArray(obj) {
      if (Array.isArray) {
        return Array.isArray(obj);
      } else {
        return Object.prototype.toString.call(obj) === '[object Array]';
      }
    }
    function isDate(obj) {
      return Object.prototype.toString.call(obj) === '[object Date]';
    }
    isNaN = isNaN || function(val) {
      return typeof val === 'number' && val !== val;
    };
    var objStack = [];
    function checkForCircular(obj) {
      for (var i = 0; i < objStack.length; i++) {
        if (objStack[i] === obj) {
          throw new TypeError("Converting circular structure to JSON");
        }
      }
    }
    function makeIndent(str, num, noNewLine) {
      if (!str) {
        return "";
      }
      if (str.length > 10) {
        str = str.substring(0, 10);
      }
      var indent = noNewLine ? "" : "\n";
      for (var i = 0; i < num; i++) {
        indent += str;
      }
      return indent;
    }
    var indentStr;
    if (space) {
      if (typeof space === "string") {
        indentStr = space;
      } else if (typeof space === "number" && space >= 0) {
        indentStr = makeIndent(" ", space, true);
      } else {}
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        meta = {
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"': '\\"',
          '\\': '\\\\'
        };
    function escapeString(string) {
      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
        var c = meta[a];
        return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string + '"';
    }
    function internalStringify(holder, key, isTopLevel) {
      var buffer,
          res;
      var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);
      if (obj_part && !isDate(obj_part)) {
        obj_part = obj_part.valueOf();
      }
      switch (typeof obj_part) {
        case "boolean":
          return obj_part.toString();
        case "number":
          if (isNaN(obj_part) || !isFinite(obj_part)) {
            return "null";
          }
          return obj_part.toString();
        case "string":
          return escapeString(obj_part.toString());
        case "object":
          if (obj_part === null) {
            return "null";
          } else if (isArray(obj_part)) {
            checkForCircular(obj_part);
            buffer = "[";
            objStack.push(obj_part);
            for (var i = 0; i < obj_part.length; i++) {
              res = internalStringify(obj_part, i, false);
              buffer += makeIndent(indentStr, objStack.length);
              if (res === null || typeof res === "undefined") {
                buffer += "null";
              } else {
                buffer += res;
              }
              if (i < obj_part.length - 1) {
                buffer += ",";
              } else if (indentStr) {
                buffer += "\n";
              }
            }
            objStack.pop();
            buffer += makeIndent(indentStr, objStack.length, true) + "]";
          } else {
            checkForCircular(obj_part);
            buffer = "{";
            var nonEmpty = false;
            objStack.push(obj_part);
            for (var prop in obj_part) {
              if (obj_part.hasOwnProperty(prop)) {
                var value = internalStringify(obj_part, prop, false);
                isTopLevel = false;
                if (typeof value !== "undefined" && value !== null) {
                  buffer += makeIndent(indentStr, objStack.length);
                  nonEmpty = true;
                  var key = isWord(prop) ? prop : escapeString(prop);
                  buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
                }
              }
            }
            objStack.pop();
            if (nonEmpty) {
              buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + "}";
            } else {
              buffer = '{}';
            }
          }
          return buffer;
        default:
          return undefined;
      }
    }
    var topLevelHolder = {"": obj};
    if (obj === undefined) {
      return getReplacedValueOrUndefined(topLevelHolder, '', true);
    }
    return internalStringify(topLevelHolder, '', true);
  };
  return module.exports;
});

$__System.registerDynamic("6b", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  function posix(path) {
    return path.charAt(0) === '/';
  }
  ;
  function win32(path) {
    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    var result = splitDeviceRe.exec(path);
    var device = result[1] || '';
    var isUnc = !!device && device.charAt(1) !== ':';
    return !!result[2] || isUnc;
  }
  ;
  module.exports = process.platform === 'win32' ? win32 : posix;
  module.exports.posix = posix;
  module.exports.win32 = win32;
  return module.exports;
});

$__System.registerDynamic("6c", ["@node/fs"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  module.exports = function(pth, cb) {
    var fn = typeof fs.access === 'function' ? fs.access : fs.stat;
    fn(pth, function(err) {
      cb(null, !err);
    });
  };
  module.exports.sync = function(pth) {
    var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;
    try {
      fn(pth);
      return true;
    } catch (err) {
      return false;
    }
  };
  return module.exports;
});

$__System.registerDynamic("6d", ["6e", "6f"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseCopy = $__require('6e'),
      keysIn = $__require('6f');
  function toPlainObject(value) {
    return baseCopy(value, keysIn(value));
  }
  module.exports = toPlainObject;
  return module.exports;
});

$__System.registerDynamic("70", ["71", "72", "34", "49", "73", "74", "6d"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arrayCopy = $__require('71'),
      isArguments = $__require('72'),
      isArray = $__require('34'),
      isArrayLike = $__require('49'),
      isPlainObject = $__require('73'),
      isTypedArray = $__require('74'),
      toPlainObject = $__require('6d');
  function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
    var length = stackA.length,
        srcValue = source[key];
    while (length--) {
      if (stackA[length] == srcValue) {
        object[key] = stackB[length];
        return;
      }
    }
    var value = object[key],
        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
        isCommon = result === undefined;
    if (isCommon) {
      result = srcValue;
      if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
        result = isArray(value) ? value : (isArrayLike(value) ? arrayCopy(value) : []);
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        result = isArguments(value) ? toPlainObject(value) : (isPlainObject(value) ? value : {});
      } else {
        isCommon = false;
      }
    }
    stackA.push(srcValue);
    stackB.push(result);
    if (isCommon) {
      object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
    } else if (result === result ? (result !== value) : (value === value)) {
      object[key] = result;
    }
  }
  module.exports = baseMergeDeep;
  return module.exports;
});

$__System.registerDynamic("75", ["76", "70", "34", "49", "77", "5a", "74", "78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arrayEach = $__require('76'),
      baseMergeDeep = $__require('70'),
      isArray = $__require('34'),
      isArrayLike = $__require('49'),
      isObject = $__require('77'),
      isObjectLike = $__require('5a'),
      isTypedArray = $__require('74'),
      keys = $__require('78');
  function baseMerge(object, source, customizer, stackA, stackB) {
    if (!isObject(object)) {
      return object;
    }
    var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
        props = isSrcArr ? undefined : keys(source);
    arrayEach(props || source, function(srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }
      if (isObjectLike(srcValue)) {
        stackA || (stackA = []);
        stackB || (stackB = []);
        baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
      } else {
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;
        if (isCommon) {
          result = srcValue;
        }
        if ((result !== undefined || (isSrcArr && !(key in object))) && (isCommon || (result === result ? (result !== value) : (value === value)))) {
          object[key] = result;
        }
      }
    });
    return object;
  }
  module.exports = baseMerge;
  return module.exports;
});

$__System.registerDynamic("79", ["75", "7a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseMerge = $__require('75'),
      createAssigner = $__require('7a');
  var merge = createAssigner(baseMerge);
  module.exports = merge;
  return module.exports;
});

$__System.registerDynamic("7b", ["f", "79", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(dest, src) {
    if (!dest || !src)
      return;
    return ((0, _merge2.default)(dest, src, function(a, b) {
      if (b && Array.isArray(a)) {
        var newArray = b.slice(0);
        for (var _iterator = a,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var item = _ref;
          if (newArray.indexOf(item) < 0) {
            newArray.push(item);
          }
        }
        return newArray;
      }
    }));
  };
  var _merge = $__require('79');
  var _merge2 = _interopRequireDefault(_merge);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("67", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    filename: {
      type: "filename",
      description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
      default: "unknown",
      shorthand: "f"
    },
    filenameRelative: {
      hidden: true,
      type: "string"
    },
    inputSourceMap: {hidden: true},
    env: {
      hidden: true,
      default: {}
    },
    mode: {
      description: "",
      hidden: true
    },
    retainLines: {
      type: "boolean",
      default: false,
      description: "retain line numbers - will result in really ugly code"
    },
    highlightCode: {
      description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
      type: "boolean",
      default: true
    },
    suppressDeprecationMessages: {
      type: "boolean",
      default: false,
      hidden: true
    },
    presets: {
      type: "list",
      description: "",
      default: []
    },
    plugins: {
      type: "list",
      default: [],
      description: ""
    },
    ignore: {
      type: "list",
      description: "list of glob paths to **not** compile",
      default: []
    },
    only: {
      type: "list",
      description: "list of glob paths to **only** compile"
    },
    code: {
      hidden: true,
      default: true,
      type: "boolean"
    },
    metadata: {
      hidden: true,
      default: true,
      type: "boolean"
    },
    ast: {
      hidden: true,
      default: true,
      type: "boolean"
    },
    extends: {
      type: "string",
      hidden: true
    },
    comments: {
      type: "boolean",
      default: true,
      description: "write comments to generated output (true by default)"
    },
    shouldPrintComment: {
      hidden: true,
      description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
    },
    compact: {
      type: "booleanString",
      default: "auto",
      description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
    },
    minified: {
      type: "boolean",
      default: false,
      description: "save as much bytes when printing [true|false]"
    },
    sourceMap: {
      alias: "sourceMaps",
      hidden: true
    },
    sourceMaps: {
      type: "booleanString",
      description: "[true|false|inline]",
      default: false,
      shorthand: "s"
    },
    sourceMapTarget: {
      type: "string",
      description: "set `file` on returned source map"
    },
    sourceFileName: {
      type: "string",
      description: "set `sources[0]` on returned source map"
    },
    sourceRoot: {
      type: "filename",
      description: "the root from which all sources are relative"
    },
    babelrc: {
      description: "Whether or not to look up .babelrc and .babelignore files",
      type: "boolean",
      default: true
    },
    sourceType: {
      description: "",
      default: "module"
    },
    auxiliaryCommentBefore: {
      type: "string",
      description: "print a comment before any injected non-user code"
    },
    auxiliaryCommentAfter: {
      type: "string",
      description: "print a comment after any injected non-user code"
    },
    resolveModuleSource: {hidden: true},
    getModuleId: {hidden: true},
    moduleRoot: {
      type: "filename",
      description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
    },
    moduleIds: {
      type: "boolean",
      default: false,
      shorthand: "M",
      description: "insert an explicit id for modules"
    },
    moduleId: {
      description: "specify a custom name for module ids",
      type: "string"
    },
    passPerPreset: {
      description: "Whether to spawn a traversal pass per a preset. By default all presets are merged.",
      type: "boolean",
      default: false,
      hidden: true
    }
  };
  return module.exports;
});

$__System.registerDynamic("7c", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "auxiliaryComment": {"message": "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"},
    "blacklist": {"message": "Put the specific transforms you want in the `plugins` option"},
    "breakConfig": {"message": "This is not a necessary option in Babel 6"},
    "experimental": {"message": "Put the specific transforms you want in the `plugins` option"},
    "externalHelpers": {"message": "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"},
    "extra": {"message": ""},
    "jsxPragma": {"message": "use the `pragma` option in the `react-jsx` plugin . Check out http://babeljs.io/docs/plugins/transform-react-jsx/"},
    "loose": {"message": "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."},
    "metadataUsedHelpers": {"message": "Not required anymore as this is enabled by default"},
    "modules": {"message": "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"},
    "nonStandard": {"message": "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"},
    "optional": {"message": "Put the specific transforms you want in the `plugins` option"},
    "sourceMapName": {"message": "Use the `sourceMapTarget` option"},
    "stage": {"message": "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"},
    "whitelist": {"message": "Put the specific transforms you want in the `plugins` option"}
  };
  return module.exports;
});

$__System.registerDynamic("7d", ["40", "45", "f", "29", "15", "7e", "50", "6", "66", "69", "6a", "6b", "6c", "7f", "80", "7b", "67", "7c", "@node/path", "@node/fs", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _assign = $__require('45');
  var _assign2 = _interopRequireDefault(_assign);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _node = $__require('7e');
  var context = _interopRequireWildcard(_node);
  var _plugin2 = $__require('50');
  var _plugin3 = _interopRequireDefault(_plugin2);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _index = $__require('66');
  var _resolve = $__require('69');
  var _resolve2 = _interopRequireDefault(_resolve);
  var _json = $__require('6a');
  var _json2 = _interopRequireDefault(_json);
  var _pathIsAbsolute = $__require('6b');
  var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);
  var _pathExists = $__require('6c');
  var _pathExists2 = _interopRequireDefault(_pathExists);
  var _cloneDeep = $__require('7f');
  var _cloneDeep2 = _interopRequireDefault(_cloneDeep);
  var _clone = $__require('80');
  var _clone2 = _interopRequireDefault(_clone);
  var _merge = $__require('7b');
  var _merge2 = _interopRequireDefault(_merge);
  var _config = $__require('67');
  var _config2 = _interopRequireDefault(_config);
  var _removed = $__require('7c');
  var _removed2 = _interopRequireDefault(_removed);
  var _path = $__require('@node/path');
  var _path2 = _interopRequireDefault(_path);
  var _fs = $__require('@node/fs');
  var _fs2 = _interopRequireDefault(_fs);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var existsCache = {};
  var jsonCache = {};
  var BABELIGNORE_FILENAME = ".babelignore";
  var BABELRC_FILENAME = ".babelrc";
  var PACKAGE_FILENAME = "package.json";
  function exists(filename) {
    var cached = existsCache[filename];
    if (cached == null) {
      return existsCache[filename] = _pathExists2.default.sync(filename);
    } else {
      return cached;
    }
  }
  var OptionManager = function() {
    function OptionManager(log) {
      (0, _classCallCheck3.default)(this, OptionManager);
      this.resolvedConfigs = [];
      this.options = OptionManager.createBareOptions();
      this.log = log;
    }
    OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
      for (var _iterator = OptionManager.memoisedPlugins,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var cache = _ref;
        if (cache.container === fn)
          return cache.plugin;
      }
      var obj = void 0;
      if (typeof fn === "function") {
        obj = fn(context);
      } else {
        obj = fn;
      }
      if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === "object") {
        var _plugin = new _plugin3.default(obj, alias);
        OptionManager.memoisedPlugins.push({
          container: fn,
          plugin: _plugin
        });
        return _plugin;
      } else {
        throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) + loc + i);
      }
    };
    OptionManager.createBareOptions = function createBareOptions() {
      var opts = {};
      for (var _key in _config2.default) {
        var opt = _config2.default[_key];
        opts[_key] = (0, _clone2.default)(opt.default);
      }
      return opts;
    };
    OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
      plugin = plugin.__esModule ? plugin.default : plugin;
      if (!(plugin instanceof _plugin3.default)) {
        if (typeof plugin === "function" || (typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)) === "object") {
          plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
        } else {
          throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)));
        }
      }
      plugin.init(loc, i);
      return plugin;
    };
    OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
      return plugins.map(function(val, i) {
        var plugin = void 0,
            options = void 0;
        if (!val) {
          throw new TypeError("Falsy value found in plugins");
        }
        if (Array.isArray(val)) {
          plugin = val[0];
          options = val[1];
        } else {
          plugin = val;
        }
        var alias = typeof plugin === "string" ? plugin : loc + "$" + i;
        if (typeof plugin === "string") {
          var pluginLoc = (0, _resolve2.default)("babel-plugin-" + plugin, dirname) || (0, _resolve2.default)(plugin, dirname);
          if (pluginLoc) {
            plugin = $__require(pluginLoc);
          } else {
            throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
          }
        }
        plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);
        return [plugin, options];
      });
    };
    OptionManager.prototype.addConfig = function addConfig(loc, key) {
      var json = arguments.length <= 2 || arguments[2] === undefined ? _json2.default : arguments[2];
      if (this.resolvedConfigs.indexOf(loc) >= 0) {
        return false;
      }
      var content = _fs2.default.readFileSync(loc, "utf8");
      var opts = void 0;
      try {
        opts = jsonCache[content] = jsonCache[content] || json.parse(content);
        if (key)
          opts = opts[key];
      } catch (err) {
        err.message = loc + ": Error while parsing JSON - " + err.message;
        throw err;
      }
      this.mergeOptions({
        options: opts,
        alias: loc,
        dirname: _path2.default.dirname(loc)
      });
      this.resolvedConfigs.push(loc);
      return !!opts;
    };
    OptionManager.prototype.mergeOptions = function mergeOptions(_ref2) {
      var _this = this;
      var rawOpts = _ref2.options;
      var extendingOpts = _ref2.extending;
      var alias = _ref2.alias;
      var loc = _ref2.loc;
      var dirname = _ref2.dirname;
      alias = alias || "foreign";
      if (!rawOpts)
        return;
      if ((typeof rawOpts === "undefined" ? "undefined" : (0, _typeof3.default)(rawOpts)) !== "object" || Array.isArray(rawOpts)) {
        this.log.error("Invalid options type for " + alias, TypeError);
      }
      var opts = (0, _cloneDeep2.default)(rawOpts, function(val) {
        if (val instanceof _plugin3.default) {
          return val;
        }
      });
      dirname = dirname || process.cwd();
      loc = loc || alias;
      for (var _key2 in opts) {
        var option = _config2.default[_key2];
        if (!option && this.log) {
          var pluginOptsInfo = "Check out http://babeljs.io/docs/usage/options/ for more info";
          if (_removed2.default[_key2]) {
            this.log.error("Using removed Babel 5 option: " + alias + "." + _key2 + " - " + _removed2.default[_key2].message, ReferenceError);
          } else {
            this.log.error("Unknown option: " + alias + "." + _key2 + ". " + pluginOptsInfo, ReferenceError);
          }
        }
      }
      (0, _index.normaliseOptions)(opts);
      if (opts.plugins) {
        opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
      }
      if (opts.extends) {
        var extendsLoc = (0, _resolve2.default)(opts.extends, dirname);
        if (extendsLoc) {
          this.addConfig(extendsLoc);
        } else {
          if (this.log)
            this.log.error("Couldn't resolve extends clause of " + opts.extends + " in " + alias);
        }
        delete opts.extends;
      }
      if (opts.presets) {
        if (opts.passPerPreset) {
          opts.presets = this.resolvePresets(opts.presets, dirname, function(preset, presetLoc) {
            _this.mergeOptions({
              options: preset,
              extending: preset,
              alias: presetLoc,
              loc: presetLoc,
              dirname: dirname
            });
          });
        } else {
          this.mergePresets(opts.presets, dirname);
          delete opts.presets;
        }
      }
      var envOpts = void 0;
      var envKey = process.env.BABEL_ENV || "production" || "development";
      if (opts.env) {
        envOpts = opts.env[envKey];
        delete opts.env;
      }
      if (rawOpts === extendingOpts) {
        (0, _assign2.default)(extendingOpts, opts);
      } else {
        (0, _merge2.default)(extendingOpts || this.options, opts);
      }
      this.mergeOptions({
        options: envOpts,
        extending: extendingOpts,
        alias: alias + ".env." + envKey,
        dirname: dirname
      });
    };
    OptionManager.prototype.mergePresets = function mergePresets(presets, dirname) {
      var _this2 = this;
      this.resolvePresets(presets, dirname, function(presetOpts, presetLoc) {
        _this2.mergeOptions({
          options: presetOpts,
          alias: presetLoc,
          loc: presetLoc,
          dirname: _path2.default.dirname(presetLoc || "")
        });
      });
    };
    OptionManager.prototype.resolvePresets = function resolvePresets(presets, dirname, onResolve) {
      return presets.map(function(val) {
        if (typeof val === "string") {
          var presetLoc = (0, _resolve2.default)("babel-preset-" + val, dirname) || (0, _resolve2.default)(val, dirname);
          if (presetLoc) {
            var _val = $__require(presetLoc);
            onResolve && onResolve(_val, presetLoc);
            return _val;
          } else {
            throw new Error("Couldn't find preset " + (0, _stringify2.default)(val) + " relative to directory " + (0, _stringify2.default)(dirname));
          }
        } else if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) === "object") {
          onResolve && onResolve(val);
          return val;
        } else {
          throw new Error("Unsupported preset format: " + val + ".");
        }
      });
    };
    OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
      var file = _fs2.default.readFileSync(loc, "utf8");
      var lines = file.split("\n");
      lines = lines.map(function(line) {
        return line.replace(/#(.*?)$/, "").trim();
      }).filter(function(line) {
        return !!line;
      });
      this.mergeOptions({
        options: {ignore: lines},
        loc: loc
      });
    };
    OptionManager.prototype.findConfigs = function findConfigs(loc) {
      if (!loc)
        return;
      if (!(0, _pathIsAbsolute2.default)(loc)) {
        loc = _path2.default.join(process.cwd(), loc);
      }
      var foundConfig = false;
      var foundIgnore = false;
      while (loc !== (loc = _path2.default.dirname(loc))) {
        if (!foundConfig) {
          var configLoc = _path2.default.join(loc, BABELRC_FILENAME);
          if (exists(configLoc)) {
            this.addConfig(configLoc);
            foundConfig = true;
          }
          var pkgLoc = _path2.default.join(loc, PACKAGE_FILENAME);
          if (!foundConfig && exists(pkgLoc)) {
            foundConfig = this.addConfig(pkgLoc, "babel", JSON);
          }
        }
        if (!foundIgnore) {
          var ignoreLoc = _path2.default.join(loc, BABELIGNORE_FILENAME);
          if (exists(ignoreLoc)) {
            this.addIgnoreConfig(ignoreLoc);
            foundIgnore = true;
          }
        }
        if (foundIgnore && foundConfig)
          return;
      }
    };
    OptionManager.prototype.normaliseOptions = function normaliseOptions() {
      var opts = this.options;
      for (var _key3 in _config2.default) {
        var option = _config2.default[_key3];
        var val = opts[_key3];
        if (!val && option.optional)
          continue;
        if (option.alias) {
          opts[option.alias] = opts[option.alias] || val;
        } else {
          opts[_key3] = val;
        }
      }
    };
    OptionManager.prototype.init = function init() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var filename = opts.filename;
      if (opts.babelrc !== false) {
        this.findConfigs(filename);
      }
      this.mergeOptions({
        options: opts,
        alias: "base",
        dirname: filename && _path2.default.dirname(filename)
      });
      this.normaliseOptions(opts);
      return this.options;
    };
    return OptionManager;
  }();
  exports.default = OptionManager;
  OptionManager.memoisedPlugins = [];
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("81", ["82", "55", "83", "84", "85", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      core = $__require('55'),
      dP = $__require('83'),
      DESCRIPTORS = $__require('84'),
      SPECIES = $__require('85')('species');
  module.exports = function(KEY) {
    var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES])
      dP.f(C, SPECIES, {
        configurable: true,
        get: function() {
          return this;
        }
      });
  };
  return module.exports;
});

$__System.registerDynamic("86", ["83", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "81", "84", "90", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var dP = $__require('83').f,
      create = $__require('87'),
      hide = $__require('88'),
      redefineAll = $__require('89'),
      ctx = $__require('8a'),
      anInstance = $__require('8b'),
      defined = $__require('8c'),
      forOf = $__require('8d'),
      $iterDefine = $__require('8e'),
      step = $__require('8f'),
      setSpecies = $__require('81'),
      DESCRIPTORS = $__require('84'),
      fastKey = $__require('90').fastKey,
      SIZE = DESCRIPTORS ? '_s' : 'size';
  var getEntry = function(that, key) {
    var index = fastKey(key),
        entry;
    if (index !== 'F')
      return that._i[index];
    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key)
        return entry;
    }
  };
  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function(that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = create(null);
        that._f = undefined;
        that._l = undefined;
        that[SIZE] = 0;
        if (iterable != undefined)
          forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        clear: function clear() {
          for (var that = this,
              data = that._i,
              entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p)
              entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        'delete': function(key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev)
              prev.n = next;
            if (next)
              next.p = prev;
            if (that._f == entry)
              that._f = next;
            if (that._l == entry)
              that._l = prev;
            that[SIZE]--;
          }
          return !!entry;
        },
        forEach: function forEach(callbackfn) {
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
              entry;
          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this);
            while (entry && entry.r)
              entry = entry.p;
          }
        },
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if (DESCRIPTORS)
        dP(C.prototype, 'size', {get: function() {
            return defined(this[SIZE]);
          }});
      return C;
    },
    def: function(that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;
      if (entry) {
        entry.v = value;
      } else {
        that._l = entry = {
          i: index = fastKey(key, true),
          k: key,
          v: value,
          p: prev = that._l,
          n: undefined,
          r: false
        };
        if (!that._f)
          that._f = entry;
        if (prev)
          prev.n = entry;
        that[SIZE]++;
        if (index !== 'F')
          that._i[index] = entry;
      }
      return that;
    },
    getEntry: getEntry,
    setStrong: function(C, NAME, IS_MAP) {
      $iterDefine(C, NAME, function(iterated, kind) {
        this._t = iterated;
        this._k = kind;
        this._l = undefined;
      }, function() {
        var that = this,
            kind = that._k,
            entry = that._l;
        while (entry && entry.r)
          entry = entry.p;
        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          that._t = undefined;
          return step(1);
        }
        if (kind == 'keys')
          return step(0, entry.k);
        if (kind == 'values')
          return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
      setSpecies(NAME);
    }
  };
  return module.exports;
});

$__System.registerDynamic("91", ["86", "92", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var strong = $__require('86');
  module.exports = $__require('92')('Map', function(get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    get: function get(key) {
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    set: function set(key, value) {
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);
  return module.exports;
});

$__System.registerDynamic("93", ["8d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var forOf = $__require('8d');
  module.exports = function(iter, ITERATOR) {
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };
  return module.exports;
});

$__System.registerDynamic("94", ["95", "93", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var classof = $__require('95'),
      from = $__require('93');
  module.exports = function(NAME) {
    return function toJSON() {
      if (classof(this) != NAME)
        throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };
  return module.exports;
});

$__System.registerDynamic("96", ["52", "94", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.P + $export.R, 'Map', {toJSON: $__require('94')('Map')});
  return module.exports;
});

$__System.registerDynamic("97", ["98", "99", "9a", "91", "96", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('98');
  $__require('99');
  $__require('9a');
  $__require('91');
  $__require('96');
  module.exports = $__require('55').Map;
  return module.exports;
});

$__System.registerDynamic("9b", ["97", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('97'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("13", ["9b", "15", "16", "17", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _map = $__require('9b');
  var _map2 = _interopRequireDefault(_map);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Store = function(_Map) {
    (0, _inherits3.default)(Store, _Map);
    function Store() {
      (0, _classCallCheck3.default)(this, Store);
      var _this = (0, _possibleConstructorReturn3.default)(this, _Map.call(this));
      _this.dynamicData = {};
      return _this;
    }
    Store.prototype.setDynamic = function setDynamic(key, fn) {
      this.dynamicData[key] = fn;
    };
    Store.prototype.get = function get(key) {
      if (this.has(key)) {
        return (_Map.prototype.get.call(this, key));
      } else {
        if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
          var val = this.dynamicData[key]();
          this.set(key, val);
          return val;
        }
      }
    };
    return Store;
  }(_map2.default);
  exports.default = Store;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("50", ["f", "15", "16", "17", "7d", "6", "13", "18", "9c", "80", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _optionManager = $__require('7d');
  var _optionManager2 = _interopRequireDefault(_optionManager);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _store = $__require('13');
  var _store2 = _interopRequireDefault(_store);
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _assign = $__require('9c');
  var _assign2 = _interopRequireDefault(_assign);
  var _clone = $__require('80');
  var _clone2 = _interopRequireDefault(_clone);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var GLOBAL_VISITOR_PROPS = ["enter", "exit"];
  var Plugin = function(_Store) {
    (0, _inherits3.default)(Plugin, _Store);
    function Plugin(plugin, key) {
      (0, _classCallCheck3.default)(this, Plugin);
      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));
      _this.initialized = false;
      _this.raw = (0, _assign2.default)({}, plugin);
      _this.key = key;
      _this.manipulateOptions = _this.take("manipulateOptions");
      _this.post = _this.take("post");
      _this.pre = _this.take("pre");
      _this.visitor = _this.normaliseVisitor((0, _clone2.default)(_this.take("visitor")) || {});
      return _this;
    }
    Plugin.prototype.take = function take(key) {
      var val = this.raw[key];
      delete this.raw[key];
      return val;
    };
    Plugin.prototype.chain = function chain(target, key) {
      if (!target[key])
        return this[key];
      if (!this[key])
        return target[key];
      var fns = [target[key], this[key]];
      return function() {
        var val = void 0;
        for (var _len = arguments.length,
            args = Array(_len),
            _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        for (var _iterator = fns,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var fn = _ref;
          if (fn) {
            var ret = fn.apply(this, args);
            if (ret != null)
              val = ret;
          }
        }
        return val;
      };
    };
    Plugin.prototype.maybeInherit = function maybeInherit(loc) {
      var inherits = this.take("inherits");
      if (!inherits)
        return;
      inherits = _optionManager2.default.normalisePlugin(inherits, loc, "inherits");
      this.manipulateOptions = this.chain(inherits, "manipulateOptions");
      this.post = this.chain(inherits, "post");
      this.pre = this.chain(inherits, "pre");
      this.visitor = _babelTraverse2.default.visitors.merge([inherits.visitor, this.visitor]);
    };
    Plugin.prototype.init = function init(loc, i) {
      if (this.initialized)
        return;
      this.initialized = true;
      this.maybeInherit(loc);
      for (var key in this.raw) {
        throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
      }
    };
    Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor) {
      for (var _iterator2 = GLOBAL_VISITOR_PROPS,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var key = _ref2;
        if (visitor[key]) {
          throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
        }
      }
      _babelTraverse2.default.explode(visitor);
      return visitor;
    };
    return Plugin;
  }(_store2.default);
  exports.default = Plugin;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("9d", ["9e", "50", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  var _plugin = $__require('50');
  var _plugin2 = _interopRequireDefault(_plugin);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var SUPER_THIS_BOUND = (0, _symbol2.default)("super this bound");
  var superVisitor = {CallExpression: function CallExpression(path) {
      if (!path.get("callee").isSuper())
        return;
      var node = path.node;
      if (node[SUPER_THIS_BOUND])
        return;
      node[SUPER_THIS_BOUND] = true;
      path.replaceWith(t.assignmentExpression("=", this.id, node));
    }};
  exports.default = new _plugin2.default({visitor: {
      ThisExpression: function ThisExpression(path) {
        remap(path, "this");
      },
      ReferencedIdentifier: function ReferencedIdentifier(path) {
        if (path.node.name === "arguments") {
          remap(path, "arguments");
        }
      }
    }});
  function shouldShadow(path, shadowPath) {
    if (path.is("_forceShadow")) {
      return true;
    } else {
      return shadowPath;
    }
  }
  function remap(path, key) {
    var shadowPath = path.inShadow(key);
    if (!shouldShadow(path, shadowPath))
      return;
    var shadowFunction = path.node._shadowedFunctionLiteral;
    var currentFunction = void 0;
    var passedShadowFunction = false;
    var fnPath = path.findParent(function(path) {
      if (path.isProgram() || path.isFunction()) {
        currentFunction = currentFunction || path;
      }
      if (path.isProgram()) {
        passedShadowFunction = true;
        return true;
      } else if (path.isFunction() && !path.isArrowFunctionExpression()) {
        if (shadowFunction) {
          if (path === shadowFunction || path.node === shadowFunction.node)
            return true;
        } else {
          if (!path.is("shadow"))
            return true;
        }
        passedShadowFunction = true;
        return false;
      }
      return false;
    });
    if (shadowFunction && fnPath.isProgram() && !shadowFunction.isProgram()) {
      fnPath = path.findParent(function(p) {
        return p.isProgram() || p.isFunction();
      });
    }
    if (fnPath === currentFunction)
      return;
    if (!passedShadowFunction)
      return;
    var cached = fnPath.getData(key);
    if (cached)
      return path.replaceWith(cached);
    var id = path.scope.generateUidIdentifier(key);
    fnPath.setData(key, id);
    if (key === "this" && fnPath.isMethod({kind: "constructor"})) {
      fnPath.scope.push({id: id});
      fnPath.traverse(superVisitor, {id: id});
    } else {
      var init = key === "this" ? t.thisExpression() : t.identifier(key);
      fnPath.scope.push({
        id: id,
        init: init
      });
    }
    return path.replaceWith(id);
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("14", ["29", "f", "9f", "45", "15", "16", "17", "4", "e", "10", "7d", "12", "19", "18", "27", "5", "a0", "a1", "46", "13", "a2", "62", "@node/path", "9", "4f", "9d", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.File = undefined;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _assign = $__require('45');
  var _assign2 = _interopRequireDefault(_assign);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _babelHelpers = $__require('4');
  var _babelHelpers2 = _interopRequireDefault(_babelHelpers);
  var _metadata = $__require('e');
  var metadataVisitor = _interopRequireWildcard(_metadata);
  var _convertSourceMap = $__require('10');
  var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);
  var _optionManager = $__require('7d');
  var _optionManager2 = _interopRequireDefault(_optionManager);
  var _pluginPass = $__require('12');
  var _pluginPass2 = _interopRequireDefault(_pluginPass);
  var _shebangRegex = $__require('19');
  var _shebangRegex2 = _interopRequireDefault(_shebangRegex);
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _sourceMap = $__require('27');
  var _sourceMap2 = _interopRequireDefault(_sourceMap);
  var _babelGenerator = $__require('5');
  var _babelGenerator2 = _interopRequireDefault(_babelGenerator);
  var _babelCodeFrame = $__require('a0');
  var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);
  var _defaults = $__require('a1');
  var _defaults2 = _interopRequireDefault(_defaults);
  var _logger = $__require('46');
  var _logger2 = _interopRequireDefault(_logger);
  var _store = $__require('13');
  var _store2 = _interopRequireDefault(_store);
  var _babylon = $__require('a2');
  var _util = $__require('62');
  var util = _interopRequireWildcard(_util);
  var _path = $__require('@node/path');
  var _path2 = _interopRequireDefault(_path);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _blockHoist = $__require('4f');
  var _blockHoist2 = _interopRequireDefault(_blockHoist);
  var _shadowFunctions = $__require('9d');
  var _shadowFunctions2 = _interopRequireDefault(_shadowFunctions);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var INTERNAL_PLUGINS = [[_blockHoist2.default], [_shadowFunctions2.default]];
  var errorVisitor = {enter: function enter(path, state) {
      var loc = path.node.loc;
      if (loc) {
        state.loc = loc;
        path.stop();
      }
    }};
  var File = function(_Store) {
    (0, _inherits3.default)(File, _Store);
    function File() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var pipeline = arguments[1];
      (0, _classCallCheck3.default)(this, File);
      var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));
      _this.pipeline = pipeline;
      _this.log = new _logger2.default(_this, opts.filename || "unknown");
      _this.opts = _this.initOptions(opts);
      _this.parserOpts = {
        highlightCode: _this.opts.highlightCode,
        nonStandard: _this.opts.nonStandard,
        sourceType: _this.opts.sourceType,
        filename: _this.opts.filename,
        plugins: []
      };
      _this.pluginVisitors = [];
      _this.pluginPasses = [];
      _this.buildPluginsForOptions(_this.opts);
      if (_this.opts.passPerPreset) {
        _this.perPresetOpts = [];
        _this.opts.presets.forEach(function(presetOpts) {
          var perPresetOpts = (0, _assign2.default)((0, _create2.default)(_this.opts), presetOpts);
          _this.perPresetOpts.push(perPresetOpts);
          _this.buildPluginsForOptions(perPresetOpts);
        });
      }
      _this.metadata = {
        usedHelpers: [],
        marked: [],
        modules: {
          imports: [],
          exports: {
            exported: [],
            specifiers: []
          }
        }
      };
      _this.dynamicImportTypes = {};
      _this.dynamicImportIds = {};
      _this.dynamicImports = [];
      _this.declarations = {};
      _this.usedHelpers = {};
      _this.path = null;
      _this.ast = {};
      _this.code = "";
      _this.shebang = "";
      _this.hub = new _babelTraverse.Hub(_this);
      return _this;
    }
    File.prototype.getMetadata = function getMetadata() {
      var has = false;
      for (var _iterator = this.ast.program.body,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var node = _ref;
        if (t.isModuleDeclaration(node)) {
          has = true;
          break;
        }
      }
      if (has) {
        this.path.traverse(metadataVisitor, this);
      }
    };
    File.prototype.initOptions = function initOptions(opts) {
      opts = new _optionManager2.default(this.log, this.pipeline).init(opts);
      if (opts.inputSourceMap) {
        opts.sourceMaps = true;
      }
      if (opts.moduleId) {
        opts.moduleIds = true;
      }
      opts.basename = _path2.default.basename(opts.filename, _path2.default.extname(opts.filename));
      opts.ignore = util.arrayify(opts.ignore, util.regexify);
      if (opts.only)
        opts.only = util.arrayify(opts.only, util.regexify);
      (0, _defaults2.default)(opts, {moduleRoot: opts.sourceRoot});
      (0, _defaults2.default)(opts, {sourceRoot: opts.moduleRoot});
      (0, _defaults2.default)(opts, {filenameRelative: opts.filename});
      var basenameRelative = _path2.default.basename(opts.filenameRelative);
      (0, _defaults2.default)(opts, {
        sourceFileName: basenameRelative,
        sourceMapTarget: basenameRelative
      });
      return opts;
    };
    File.prototype.buildPluginsForOptions = function buildPluginsForOptions(opts) {
      if (!Array.isArray(opts.plugins)) {
        return;
      }
      var plugins = opts.plugins.concat(INTERNAL_PLUGINS);
      var currentPluginVisitors = [];
      var currentPluginPasses = [];
      for (var _iterator2 = plugins,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var ref = _ref2;
        var plugin = ref[0];
        var pluginOpts = ref[1];
        currentPluginVisitors.push(plugin.visitor);
        currentPluginPasses.push(new _pluginPass2.default(this, plugin, pluginOpts));
        if (plugin.manipulateOptions) {
          plugin.manipulateOptions(opts, this.parserOpts, this);
        }
      }
      this.pluginVisitors.push(currentPluginVisitors);
      this.pluginPasses.push(currentPluginPasses);
    };
    File.prototype.getModuleName = function getModuleName() {
      var opts = this.opts;
      if (!opts.moduleIds) {
        return null;
      }
      if (opts.moduleId != null && !opts.getModuleId) {
        return opts.moduleId;
      }
      var filenameRelative = opts.filenameRelative;
      var moduleName = "";
      if (opts.moduleRoot != null) {
        moduleName = opts.moduleRoot + "/";
      }
      if (!opts.filenameRelative) {
        return moduleName + opts.filename.replace(/^\//, "");
      }
      if (opts.sourceRoot != null) {
        var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
        filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
      }
      filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");
      moduleName += filenameRelative;
      moduleName = moduleName.replace(/\\/g, "/");
      if (opts.getModuleId) {
        return opts.getModuleId(moduleName) || moduleName;
      } else {
        return moduleName;
      }
    };
    File.prototype.resolveModuleSource = function resolveModuleSource(source) {
      var resolveModuleSource = this.opts.resolveModuleSource;
      if (resolveModuleSource)
        source = resolveModuleSource(source, this.opts.filename);
      return source;
    };
    File.prototype.addImport = function addImport(source, imported) {
      var name = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];
      var alias = source + ":" + imported;
      var id = this.dynamicImportIds[alias];
      if (!id) {
        source = this.resolveModuleSource(source);
        id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);
        var specifiers = [];
        if (imported === "*") {
          specifiers.push(t.importNamespaceSpecifier(id));
        } else if (imported === "default") {
          specifiers.push(t.importDefaultSpecifier(id));
        } else {
          specifiers.push(t.importSpecifier(id, t.identifier(imported)));
        }
        var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
        declar._blockHoist = 3;
        this.path.unshiftContainer("body", declar);
      }
      return id;
    };
    File.prototype.addHelper = function addHelper(name) {
      var declar = this.declarations[name];
      if (declar)
        return declar;
      if (!this.usedHelpers[name]) {
        this.metadata.usedHelpers.push(name);
        this.usedHelpers[name] = true;
      }
      var generator = this.get("helperGenerator");
      var runtime = this.get("helpersNamespace");
      if (generator) {
        var res = generator(name);
        if (res)
          return res;
      } else if (runtime) {
        return t.memberExpression(runtime, t.identifier(name));
      }
      var ref = (0, _babelHelpers2.default)(name);
      var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
      if (t.isFunctionExpression(ref) && !ref.id) {
        ref.body._compact = true;
        ref._generated = true;
        ref.id = uid;
        ref.type = "FunctionDeclaration";
        this.path.unshiftContainer("body", ref);
      } else {
        ref._compact = true;
        this.scope.push({
          id: uid,
          init: ref,
          unique: true
        });
      }
      return uid;
    };
    File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {
      var stringIds = raw.elements.map(function(string) {
        return string.value;
      });
      var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");
      var declar = this.declarations[name];
      if (declar)
        return declar;
      var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");
      var helperId = this.addHelper(helperName);
      var init = t.callExpression(helperId, [strings, raw]);
      init._compact = true;
      this.scope.push({
        id: uid,
        init: init,
        _blockHoist: 1.9
      });
      return uid;
    };
    File.prototype.buildCodeFrameError = function buildCodeFrameError(node, msg) {
      var Error = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];
      var loc = node && (node.loc || node._loc);
      var err = new Error(msg);
      if (loc) {
        err.loc = loc.start;
      } else {
        (0, _babelTraverse2.default)(node, errorVisitor, this.scope, err);
        err.message += " (This is an error on an internal node. Probably an internal error";
        if (err.loc) {
          err.message += ". Location has been estimated.";
        }
        err.message += ")";
      }
      return err;
    };
    File.prototype.mergeSourceMap = function mergeSourceMap(map) {
      var inputMap = this.opts.inputSourceMap;
      if (inputMap) {
        var _ret = function() {
          var inputMapConsumer = new _sourceMap2.default.SourceMapConsumer(inputMap);
          var outputMapConsumer = new _sourceMap2.default.SourceMapConsumer(map);
          var mergedGenerator = new _sourceMap2.default.SourceMapGenerator({
            file: inputMapConsumer.file,
            sourceRoot: inputMapConsumer.sourceRoot
          });
          var source = outputMapConsumer.sources[0];
          inputMapConsumer.eachMapping(function(mapping) {
            var generatedPosition = outputMapConsumer.generatedPositionFor({
              line: mapping.generatedLine,
              column: mapping.generatedColumn,
              source: source
            });
            if (generatedPosition.column != null) {
              mergedGenerator.addMapping({
                source: mapping.source,
                original: mapping.source == null ? null : {
                  line: mapping.originalLine,
                  column: mapping.originalColumn
                },
                generated: generatedPosition
              });
            }
          });
          var mergedMap = mergedGenerator.toJSON();
          inputMap.mappings = mergedMap.mappings;
          return ({v: inputMap});
        }();
        if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object")
          return _ret.v;
      } else {
        return map;
      }
    };
    File.prototype.parse = function parse(code) {
      this.log.debug("Parse start");
      var ast = (0, _babylon.parse)(code, this.parserOpts);
      this.log.debug("Parse stop");
      return ast;
    };
    File.prototype._addAst = function _addAst(ast) {
      this.path = _babelTraverse.NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: ast,
        container: ast,
        key: "program"
      }).setContext();
      this.scope = this.path.scope;
      this.ast = ast;
      this.getMetadata();
    };
    File.prototype.addAst = function addAst(ast) {
      this.log.debug("Start set AST");
      this._addAst(ast);
      this.log.debug("End set AST");
    };
    File.prototype.transform = function transform() {
      for (var i = 0; i < this.pluginPasses.length; i++) {
        var pluginPasses = this.pluginPasses[i];
        this.call("pre", pluginPasses);
        this.log.debug("Start transform traverse");
        (0, _babelTraverse2.default)(this.ast, _babelTraverse2.default.visitors.merge(this.pluginVisitors[i], pluginPasses), this.scope);
        this.log.debug("End transform traverse");
        this.call("post", pluginPasses);
      }
      return this.generate();
    };
    File.prototype.wrap = function wrap(code, callback) {
      code = code + "";
      try {
        if (this.shouldIgnore()) {
          return this.makeResult({
            code: code,
            ignored: true
          });
        } else {
          return callback();
        }
      } catch (err) {
        if (err._babel) {
          throw err;
        } else {
          err._babel = true;
        }
        var message = err.message = this.opts.filename + ": " + err.message;
        var loc = err.loc;
        if (loc) {
          err.codeFrame = (0, _babelCodeFrame2.default)(code, loc.line, loc.column + 1, this.opts);
          message += "\n" + err.codeFrame;
        }
        if (process.browser) {
          err.message = message;
        }
        if (err.stack) {
          var newStack = err.stack.replace(err.message, message);
          err.stack = newStack;
        }
        throw err;
      }
    };
    File.prototype.addCode = function addCode(code) {
      code = (code || "") + "";
      code = this.parseInputSourceMap(code);
      this.code = code;
    };
    File.prototype.parseCode = function parseCode() {
      this.parseShebang();
      var ast = this.parse(this.code);
      this.addAst(ast);
    };
    File.prototype.shouldIgnore = function shouldIgnore() {
      var opts = this.opts;
      return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
    };
    File.prototype.call = function call(key, pluginPasses) {
      for (var _iterator3 = pluginPasses,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var pass = _ref3;
        var plugin = pass.plugin;
        var fn = plugin[key];
        if (fn)
          fn.call(pass, this);
      }
    };
    File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {
      var opts = this.opts;
      if (opts.inputSourceMap !== false) {
        var inputMap = _convertSourceMap2.default.fromSource(code);
        if (inputMap) {
          opts.inputSourceMap = inputMap.toObject();
          code = _convertSourceMap2.default.removeComments(code);
        }
      }
      return code;
    };
    File.prototype.parseShebang = function parseShebang() {
      var shebangMatch = _shebangRegex2.default.exec(this.code);
      if (shebangMatch) {
        this.shebang = shebangMatch[0];
        this.code = this.code.replace(_shebangRegex2.default, "");
      }
    };
    File.prototype.makeResult = function makeResult(_ref4) {
      var code = _ref4.code;
      var map = _ref4.map;
      var ast = _ref4.ast;
      var ignored = _ref4.ignored;
      var result = {
        metadata: null,
        options: this.opts,
        ignored: !!ignored,
        code: null,
        ast: null,
        map: map || null
      };
      if (this.opts.code) {
        result.code = code;
      }
      if (this.opts.ast) {
        result.ast = ast;
      }
      if (this.opts.metadata) {
        result.metadata = this.metadata;
      }
      return result;
    };
    File.prototype.generate = function generate() {
      var opts = this.opts;
      var ast = this.ast;
      var result = {ast: ast};
      if (!opts.code)
        return this.makeResult(result);
      this.log.debug("Generation start");
      var _result = (0, _babelGenerator2.default)(ast, opts, this.code);
      result.code = _result.code;
      result.map = _result.map;
      this.log.debug("Generation end");
      if (this.shebang) {
        result.code = this.shebang + "\n" + result.code;
      }
      if (result.map) {
        result.map = this.mergeSourceMap(result.map);
      }
      if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
        result.code += "\n" + _convertSourceMap2.default.fromObject(result.map).toComment();
      }
      if (opts.sourceMaps === "inline") {
        result.map = null;
      }
      return this.makeResult(result);
    };
    return File;
  }(_store2.default);
  exports.default = File;
  exports.File = File;
  return module.exports;
});

$__System.registerDynamic("a3", ["15", "b", "50", "14", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _normalizeAst = $__require('b');
  var _normalizeAst2 = _interopRequireDefault(_normalizeAst);
  var _plugin = $__require('50');
  var _plugin2 = _interopRequireDefault(_plugin);
  var _file = $__require('14');
  var _file2 = _interopRequireDefault(_file);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Pipeline = function() {
    function Pipeline() {
      (0, _classCallCheck3.default)(this, Pipeline);
    }
    Pipeline.prototype.lint = function lint(code) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      opts.code = false;
      opts.mode = "lint";
      return this.transform(code, opts);
    };
    Pipeline.prototype.pretransform = function pretransform(code, opts) {
      var file = new _file2.default(opts, this);
      return file.wrap(code, function() {
        file.addCode(code);
        file.parseCode(code);
        return file;
      });
    };
    Pipeline.prototype.transform = function transform(code, opts) {
      var file = new _file2.default(opts, this);
      return file.wrap(code, function() {
        file.addCode(code);
        file.parseCode(code);
        return file.transform();
      });
    };
    Pipeline.prototype.analyse = function analyse(code) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var visitor = arguments[2];
      opts.code = false;
      if (visitor) {
        opts.plugins = opts.plugins || [];
        opts.plugins.push(new _plugin2.default({visitor: visitor}));
      }
      return this.transform(code, opts).metadata;
    };
    Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {
      ast = (0, _normalizeAst2.default)(ast);
      var file = new _file2.default(opts, this);
      return file.wrap(code, function() {
        file.addCode(code);
        file.addAst(ast);
        return file.transform();
      });
    };
    return Pipeline;
  }();
  exports.default = Pipeline;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("7e", ["14", "67", "2", "7", "a", "a4", "@node/fs", "62", "6", "9", "18", "7d", "a3", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.transformFromAst = exports.transform = exports.analyse = exports.Pipeline = exports.OptionManager = exports.traverse = exports.types = exports.messages = exports.util = exports.version = exports.template = exports.buildExternalHelpers = exports.options = exports.File = undefined;
  var _file = $__require('14');
  Object.defineProperty(exports, "File", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_file).default;
    }
  });
  var _config = $__require('67');
  Object.defineProperty(exports, "options", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_config).default;
    }
  });
  var _buildExternalHelpers = $__require('2');
  Object.defineProperty(exports, "buildExternalHelpers", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_buildExternalHelpers).default;
    }
  });
  var _babelTemplate = $__require('7');
  Object.defineProperty(exports, "template", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_babelTemplate).default;
    }
  });
  var _package = $__require('a');
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function get() {
      return _package.version;
    }
  });
  exports.Plugin = Plugin;
  exports.transformFile = transformFile;
  exports.transformFileSync = transformFileSync;
  var _isFunction = $__require('a4');
  var _isFunction2 = _interopRequireDefault(_isFunction);
  var _fs = $__require('@node/fs');
  var _fs2 = _interopRequireDefault(_fs);
  var _util = $__require('62');
  var util = _interopRequireWildcard(_util);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _optionManager = $__require('7d');
  var _optionManager2 = _interopRequireDefault(_optionManager);
  var _pipeline = $__require('a3');
  var _pipeline2 = _interopRequireDefault(_pipeline);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.util = util;
  exports.messages = messages;
  exports.types = t;
  exports.traverse = _babelTraverse2.default;
  exports.OptionManager = _optionManager2.default;
  function Plugin(alias) {
    throw new Error("The (" + alias + ") Babel 5 plugin is being run with Babel 6.");
  }
  exports.Pipeline = _pipeline2.default;
  var pipeline = new _pipeline2.default();
  var analyse = exports.analyse = pipeline.analyse.bind(pipeline);
  var transform = exports.transform = pipeline.transform.bind(pipeline);
  var transformFromAst = exports.transformFromAst = pipeline.transformFromAst.bind(pipeline);
  function transformFile(filename, opts, callback) {
    if ((0, _isFunction2.default)(opts)) {
      callback = opts;
      opts = {};
    }
    opts.filename = filename;
    _fs2.default.readFile(filename, function(err, code) {
      var result = void 0;
      if (!err) {
        try {
          result = transform(code, opts);
        } catch (_err) {
          err = _err;
        }
      }
      if (err) {
        callback(err);
      } else {
        callback(null, result);
      }
    });
  }
  function transformFileSync(filename) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    opts.filename = filename;
    return transform(_fs2.default.readFileSync(filename, "utf8"), opts);
  }
  return module.exports;
});

$__System.registerDynamic("a5", ["7e", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('7e');
  return module.exports;
});

$__System.registerDynamic("a6", ["f", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function() {
    return {visitor: {Program: function Program(path, state) {
          if (state.opts.strict === false)
            return;
          var node = path.node;
          for (var _iterator = node.directives,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
            var _ref;
            if (_isArray) {
              if (_i >= _iterator.length)
                break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done)
                break;
              _ref = _i.value;
            }
            var directive = _ref;
            if (directive.value.value === "use strict")
              return;
          }
          path.unshiftContainer("directives", t.directive(t.directiveLiteral("use strict")));
        }}};
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("a7", ["9f", "f", "9e", "a6", "a8", "7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  exports.default = function(_ref) {
    var t = _ref.types;
    var IGNORE_REASSIGNMENT_SYMBOL = (0, _symbol2.default)();
    var reassignmentVisitor = {"AssignmentExpression|UpdateExpression": function AssignmentExpressionUpdateExpression(path) {
        if (path.node[IGNORE_REASSIGNMENT_SYMBOL])
          return;
        path.node[IGNORE_REASSIGNMENT_SYMBOL] = true;
        var arg = path.get(path.isAssignmentExpression() ? "left" : "argument");
        if (!arg.isIdentifier())
          return;
        var name = arg.node.name;
        if (this.scope.getBinding(name) !== path.scope.getBinding(name))
          return;
        var exportedNames = this.exports[name];
        if (!exportedNames)
          return;
        var node = path.node;
        for (var _iterator = exportedNames,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref2;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref2 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref2 = _i.value;
          }
          var exportedName = _ref2;
          node = this.buildCall(exportedName, node).expression;
        }
        path.replaceWith(node);
      }};
    return {
      inherits: $__require('a6'),
      visitor: {
        ReferencedIdentifier: function ReferencedIdentifier(path, state) {
          if (path.node.name == "__moduleName" && !path.scope.hasBinding("__moduleName")) {
            path.replaceWith(t.memberExpression(state.contextIdent, t.identifier("id")));
          }
        },
        Program: {
          enter: function enter(path, state) {
            state.contextIdent = path.scope.generateUidIdentifier("context");
          },
          exit: function exit(path, state) {
            var exportIdent = path.scope.generateUidIdentifier("export");
            var contextIdent = state.contextIdent;
            var exportNames = (0, _create2.default)(null);
            var modules = (0, _create2.default)(null);
            var beforeBody = [];
            var setters = [];
            var sources = [];
            var variableIds = [];
            function addExportName(key, val) {
              exportNames[key] = exportNames[key] || [];
              exportNames[key].push(val);
            }
            function pushModule(source, key, specifiers) {
              var _modules = modules[source] = modules[source] || {
                imports: [],
                exports: []
              };
              _modules[key] = _modules[key].concat(specifiers);
            }
            function buildExportCall(name, val) {
              return t.expressionStatement(t.callExpression(exportIdent, [t.stringLiteral(name), val]));
            }
            var body = path.get("body");
            var canHoist = true;
            for (var _iterator2 = body,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
              var _ref3;
              if (_isArray2) {
                if (_i2 >= _iterator2.length)
                  break;
                _ref3 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done)
                  break;
                _ref3 = _i2.value;
              }
              var _path = _ref3;
              if (_path.isExportDeclaration())
                _path = _path.get("declaration");
              if (_path.isVariableDeclaration() && _path.node.kind !== "var") {
                canHoist = false;
                break;
              }
            }
            for (var _iterator3 = body,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
              var _ref4;
              if (_isArray3) {
                if (_i3 >= _iterator3.length)
                  break;
                _ref4 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done)
                  break;
                _ref4 = _i3.value;
              }
              var _path2 = _ref4;
              if (canHoist && _path2.isFunctionDeclaration()) {
                beforeBody.push(_path2.node);
                _path2.remove();
              } else if (_path2.isImportDeclaration()) {
                var _source = _path2.node.source.value;
                pushModule(_source, "imports", _path2.node.specifiers);
                for (var name in _path2.getBindingIdentifiers()) {
                  _path2.scope.removeBinding(name);
                  variableIds.push(t.identifier(name));
                }
                _path2.remove();
              } else if (_path2.isExportAllDeclaration()) {
                pushModule(_path2.node.source.value, "exports", _path2.node);
                _path2.remove();
              } else if (_path2.isExportDefaultDeclaration()) {
                var declar = _path2.get("declaration");
                if (declar.isClassDeclaration() || declar.isFunctionDeclaration()) {
                  var id = declar.node.id;
                  var nodes = [];
                  if (id) {
                    nodes.push(declar.node);
                    nodes.push(buildExportCall("default", id));
                    addExportName(id.name, "default");
                  } else {
                    nodes.push(buildExportCall("default", t.toExpression(declar.node)));
                  }
                  if (!canHoist || declar.isClassDeclaration()) {
                    _path2.replaceWithMultiple(nodes);
                  } else {
                    beforeBody = beforeBody.concat(nodes);
                    _path2.remove();
                  }
                } else {
                  _path2.replaceWith(buildExportCall("default", declar.node));
                }
              } else if (_path2.isExportNamedDeclaration()) {
                var _declar = _path2.get("declaration");
                if (_declar.node) {
                  _path2.replaceWith(_declar);
                  var _nodes = [];
                  var bindingIdentifiers = void 0;
                  if (_path2.isFunction()) {
                    var _bindingIdentifiers;
                    bindingIdentifiers = (_bindingIdentifiers = {}, _bindingIdentifiers[_declar.node.id.name] = _declar.node.id, _bindingIdentifiers);
                  } else {
                    bindingIdentifiers = _declar.getBindingIdentifiers();
                  }
                  for (var _name in bindingIdentifiers) {
                    addExportName(_name, _name);
                    _nodes.push(buildExportCall(_name, t.identifier(_name)));
                  }
                  _path2.insertAfter(_nodes);
                }
                var _specifiers = _path2.node.specifiers;
                if (_specifiers && _specifiers.length) {
                  if (_path2.node.source) {
                    pushModule(_path2.node.source.value, "exports", _specifiers);
                    _path2.remove();
                  } else {
                    var _nodes2 = [];
                    for (var _iterator6 = _specifiers,
                        _isArray6 = Array.isArray(_iterator6),
                        _i6 = 0,
                        _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6); ; ) {
                      var _ref7;
                      if (_isArray6) {
                        if (_i6 >= _iterator6.length)
                          break;
                        _ref7 = _iterator6[_i6++];
                      } else {
                        _i6 = _iterator6.next();
                        if (_i6.done)
                          break;
                        _ref7 = _i6.value;
                      }
                      var _specifier = _ref7;
                      _nodes2.push(buildExportCall(_specifier.exported.name, _specifier.local));
                      addExportName(_specifier.local.name, _specifier.exported.name);
                    }
                    _path2.replaceWithMultiple(_nodes2);
                  }
                }
              }
            }
            for (var source in modules) {
              var specifiers = modules[source];
              var setterBody = [];
              var target = path.scope.generateUidIdentifier(source);
              for (var _iterator4 = specifiers.imports,
                  _isArray4 = Array.isArray(_iterator4),
                  _i4 = 0,
                  _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
                var _ref5;
                if (_isArray4) {
                  if (_i4 >= _iterator4.length)
                    break;
                  _ref5 = _iterator4[_i4++];
                } else {
                  _i4 = _iterator4.next();
                  if (_i4.done)
                    break;
                  _ref5 = _i4.value;
                }
                var specifier = _ref5;
                if (t.isImportNamespaceSpecifier(specifier)) {
                  setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, target)));
                } else if (t.isImportDefaultSpecifier(specifier)) {
                  specifier = t.importSpecifier(specifier.local, t.identifier("default"));
                }
                if (t.isImportSpecifier(specifier)) {
                  setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, t.memberExpression(target, specifier.imported))));
                }
              }
              if (specifiers.exports.length) {
                var exportObjRef = path.scope.generateUidIdentifier("exportObj");
                setterBody.push(t.variableDeclaration("var", [t.variableDeclarator(exportObjRef, t.objectExpression([]))]));
                for (var _iterator5 = specifiers.exports,
                    _isArray5 = Array.isArray(_iterator5),
                    _i5 = 0,
                    _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
                  var _ref6;
                  if (_isArray5) {
                    if (_i5 >= _iterator5.length)
                      break;
                    _ref6 = _iterator5[_i5++];
                  } else {
                    _i5 = _iterator5.next();
                    if (_i5.done)
                      break;
                    _ref6 = _i5.value;
                  }
                  var node = _ref6;
                  if (t.isExportAllDeclaration(node)) {
                    setterBody.push(buildExportAll({
                      KEY: path.scope.generateUidIdentifier("key"),
                      EXPORT_OBJ: exportObjRef,
                      TARGET: target
                    }));
                  } else if (t.isExportSpecifier(node)) {
                    setterBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(exportObjRef, node.exported), t.memberExpression(target, node.local))));
                  } else {}
                }
                setterBody.push(t.expressionStatement(t.callExpression(exportIdent, [exportObjRef])));
              }
              sources.push(t.stringLiteral(source));
              setters.push(t.functionExpression(null, [target], t.blockStatement(setterBody)));
            }
            var moduleName = this.getModuleName();
            if (moduleName)
              moduleName = t.stringLiteral(moduleName);
            if (canHoist) {
              (0, _babelHelperHoistVariables2.default)(path, function(id) {
                return variableIds.push(id);
              });
            }
            if (variableIds.length) {
              beforeBody.unshift(t.variableDeclaration("var", variableIds.map(function(id) {
                return t.variableDeclarator(id);
              })));
            }
            path.traverse(reassignmentVisitor, {
              exports: exportNames,
              buildCall: buildExportCall,
              scope: path.scope
            });
            path.node.body = [buildTemplate({
              BEFORE_BODY: beforeBody,
              MODULE_NAME: moduleName,
              SETTERS: setters,
              SOURCES: sources,
              BODY: path.node.body,
              EXPORT_IDENTIFIER: exportIdent,
              CONTEXT_IDENTIFIER: contextIdent
            })];
          }
        }
      }
    };
  };
  var _babelHelperHoistVariables = $__require('a8');
  var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildTemplate = (0, _babelTemplate2.default)("\n  System.register(MODULE_NAME, [SOURCES], function (EXPORT_IDENTIFIER, CONTEXT_IDENTIFIER) {\n    BEFORE_BODY;\n    return {\n      setters: [SETTERS],\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n");
  var buildExportAll = (0, _babelTemplate2.default)("\n  for (var KEY in TARGET) {\n    if (KEY !== \"default\") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n");
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("a9", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var t = _ref.types;
    return {pre: function pre(file) {
        file.set("helpersNamespace", t.identifier("babelHelpers"));
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("aa", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    builtins: {
      Symbol: "symbol",
      Promise: "promise",
      Map: "map",
      WeakMap: "weak-map",
      Set: "set",
      WeakSet: "weak-set",
      setImmediate: "set-immediate",
      clearImmediate: "clear-immediate"
    },
    methods: {
      Array: {
        concat: "array/concat",
        copyWithin: "array/copy-within",
        entries: "array/entries",
        every: "array/every",
        fill: "array/fill",
        filter: "array/filter",
        findIndex: "array/find-index",
        find: "array/find",
        forEach: "array/for-each",
        from: "array/from",
        includes: "array/includes",
        indexOf: "array/index-of",
        join: "array/join",
        keys: "array/keys",
        lastIndexOf: "array/last-index-of",
        map: "array/map",
        of: "array/of",
        pop: "array/pop",
        push: "array/push",
        reduceRight: "array/reduce-right",
        reduce: "array/reduce",
        reverse: "array/reverse",
        shift: "array/shift",
        slice: "array/slice",
        some: "array/some",
        sort: "array/sort",
        splice: "array/splice",
        unshift: "array/unshift",
        values: "array/values"
      },
      JSON: {stringify: "json/stringify"},
      Object: {
        assign: "object/assign",
        create: "object/create",
        defineProperties: "object/define-properties",
        defineProperty: "object/define-property",
        entries: "object/entries",
        freeze: "object/freeze",
        getOwnPropertyDescriptor: "object/get-own-property-descriptor",
        getOwnPropertyDescriptors: "object/get-own-property-descriptors",
        getOwnPropertyNames: "object/get-own-property-names",
        getOwnPropertySymbols: "object/get-own-property-symbols",
        getPrototypeOf: "object/get-prototype-of",
        isExtensible: "object/is-extensible",
        isFrozen: "object/is-frozen",
        isSealed: "object/is-sealed",
        is: "object/is",
        keys: "object/keys",
        preventExtensions: "object/prevent-extensions",
        seal: "object/seal",
        setPrototypeOf: "object/set-prototype-of",
        values: "object/values"
      },
      RegExp: {escape: "regexp/escape"},
      Math: {
        acosh: "math/acosh",
        asinh: "math/asinh",
        atanh: "math/atanh",
        cbrt: "math/cbrt",
        clz32: "math/clz32",
        cosh: "math/cosh",
        expm1: "math/expm1",
        fround: "math/fround",
        hypot: "math/hypot",
        imul: "math/imul",
        log10: "math/log10",
        log1p: "math/log1p",
        log2: "math/log2",
        sign: "math/sign",
        sinh: "math/sinh",
        tanh: "math/tanh",
        trunc: "math/trunc",
        iaddh: "math/iaddh",
        isubh: "math/isubh",
        imulh: "math/imulh",
        umulh: "math/umulh"
      },
      Symbol: {
        for: "symbol/for",
        hasInstance: "symbol/has-instance",
        isConcatSpreadable: "symbol/is-concat-spreadable",
        iterator: "symbol/iterator",
        keyFor: "symbol/key-for",
        match: "symbol/match",
        replace: "symbol/replace",
        search: "symbol/search",
        species: "symbol/species",
        split: "symbol/split",
        toPrimitive: "symbol/to-primitive",
        toStringTag: "symbol/to-string-tag",
        unscopables: "symbol/unscopables"
      },
      String: {
        at: "string/at",
        codePointAt: "string/code-point-at",
        endsWith: "string/ends-with",
        fromCodePoint: "string/from-code-point",
        includes: "string/includes",
        padLeft: "string/pad-left",
        padRight: "string/pad-right",
        padStart: "string/pad-start",
        padEnd: "string/pad-end",
        raw: "string/raw",
        repeat: "string/repeat",
        startsWith: "string/starts-with",
        trim: "string/trim",
        trimLeft: "string/trim-left",
        trimRight: "string/trim-right",
        trimStart: "string/trim-start",
        trimEnd: "string/trim-end"
      },
      Number: {
        EPSILON: "number/epsilon",
        isFinite: "number/is-finite",
        isInteger: "number/is-integer",
        isNaN: "number/is-nan",
        isSafeInteger: "number/is-safe-integer",
        MAX_SAFE_INTEGER: "number/max-safe-integer",
        MIN_SAFE_INTEGER: "number/min-safe-integer",
        parseFloat: "number/parse-float",
        parseInt: "number/parse-int"
      },
      Reflect: {
        apply: "reflect/apply",
        construct: "reflect/construct",
        defineProperty: "reflect/define-property",
        deleteProperty: "reflect/delete-property",
        enumerate: "reflect/enumerate",
        getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
        getPrototypeOf: "reflect/get-prototype-of",
        get: "reflect/get",
        has: "reflect/has",
        isExtensible: "reflect/is-extensible",
        ownKeys: "reflect/own-keys",
        preventExtensions: "reflect/prevent-extensions",
        setPrototypeOf: "reflect/set-prototype-of",
        set: "reflect/set",
        defineMetadata: "reflect/define-metadata",
        deleteMetadata: "reflect/delete-metadata",
        getMetadata: "reflect/get-metadata",
        getMetadataKeys: "reflect/get-metadata-keys",
        getOwnMetadata: "reflect/get-own-metadata",
        getOwnMetadataKeys: "reflect/get-own-metadata-keys",
        hasMetadata: "reflect/has-metadata",
        hasOwnMetadata: "reflect/has-own-metadata",
        metadata: "reflect/metadata"
      },
      System: {global: "system/global"},
      Error: {isError: "error/is-error"},
      Date: {},
      Function: {}
    }
  };
  return module.exports;
});

$__System.registerDynamic("ab", ["aa"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.definitions = undefined;
  exports.default = function(_ref) {
    var t = _ref.types;
    var RUNTIME_MODULE_NAME = "babel-runtime";
    function has(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    var HELPER_BLACKLIST = ["interopRequireWildcard", "interopRequireDefault"];
    return {
      pre: function pre(file) {
        file.set("helperGenerator", function(name) {
          if (HELPER_BLACKLIST.indexOf(name) < 0) {
            return file.addImport(RUNTIME_MODULE_NAME + "/helpers/" + name, "default", name);
          }
        });
        this.setDynamic("regeneratorIdentifier", function() {
          return file.addImport(RUNTIME_MODULE_NAME + "/regenerator", "default", "regeneratorRuntime");
        });
      },
      visitor: {
        ReferencedIdentifier: function ReferencedIdentifier(path, state) {
          var node = path.node;
          var parent = path.parent;
          var scope = path.scope;
          if (node.name === "regeneratorRuntime" && state.opts.regenerator !== false) {
            path.replaceWith(state.get("regeneratorIdentifier"));
            return;
          }
          if (state.opts.polyfill === false)
            return;
          if (t.isMemberExpression(parent))
            return;
          if (!has(_definitions2.default.builtins, node.name))
            return;
          if (scope.getBindingIdentifier(node.name))
            return;
          path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2.default.builtins[node.name], "default", node.name));
        },
        CallExpression: function CallExpression(path, state) {
          if (state.opts.polyfill === false)
            return;
          if (path.node.arguments.length)
            return;
          var callee = path.node.callee;
          if (!t.isMemberExpression(callee))
            return;
          if (!callee.computed)
            return;
          if (!path.get("callee.property").matchesPattern("Symbol.iterator"))
            return;
          path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/get-iterator", "default", "getIterator"), [callee.object]));
        },
        BinaryExpression: function BinaryExpression(path, state) {
          if (state.opts.polyfill === false)
            return;
          if (path.node.operator !== "in")
            return;
          if (!path.get("left").matchesPattern("Symbol.iterator"))
            return;
          path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/is-iterable", "default", "isIterable"), [path.node.right]));
        },
        MemberExpression: {
          enter: function enter(path, state) {
            if (state.opts.polyfill === false)
              return;
            if (!path.isReferenced())
              return;
            var node = path.node;
            var obj = node.object;
            var prop = node.property;
            if (!t.isReferenced(obj, node))
              return;
            if (node.computed)
              return;
            if (!has(_definitions2.default.methods, obj.name))
              return;
            var methods = _definitions2.default.methods[obj.name];
            if (!has(methods, prop.name))
              return;
            if (path.scope.getBindingIdentifier(obj.name))
              return;
            if (obj.name === "Object" && prop.name === "defineProperty" && path.parentPath.isCallExpression()) {
              var call = path.parentPath.node;
              if (call.arguments.length === 3 && t.isLiteral(call.arguments[1]))
                return;
            }
            path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + methods[prop.name], "default", obj.name + "$" + prop.name));
          },
          exit: function exit(path, state) {
            if (state.opts.polyfill === false)
              return;
            if (!path.isReferenced())
              return;
            var node = path.node;
            var obj = node.object;
            if (!has(_definitions2.default.builtins, obj.name))
              return;
            if (path.scope.getBindingIdentifier(obj.name))
              return;
            path.replaceWith(t.memberExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2.default.builtins[obj.name], "default", obj.name), node.property, node.computed));
          }
        }
      }
    };
  };
  var _definitions = $__require('aa');
  var _definitions2 = _interopRequireDefault(_definitions);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.definitions = _definitions2.default;
  return module.exports;
});

$__System.registerDynamic("ac", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classConstructorCall");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("ad", ["f", "9e", "ac", "7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  exports.default = function(_ref) {
    var t = _ref.types;
    var ALREADY_VISITED = (0, _symbol2.default)();
    function findConstructorCall(path) {
      var methods = path.get("body.body");
      for (var _iterator = methods,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref2;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref2 = _i.value;
        }
        var method = _ref2;
        if (method.node.kind === "constructorCall") {
          return method;
        }
      }
      return null;
    }
    function handleClassWithCall(constructorCall, classPath) {
      var _classPath = classPath;
      var node = _classPath.node;
      var ref = node.id || classPath.scope.generateUidIdentifier("class");
      if (classPath.parentPath.isExportDefaultDeclaration()) {
        classPath = classPath.parentPath;
        classPath.insertAfter(t.exportDefaultDeclaration(ref));
      }
      classPath.replaceWithMultiple(buildWrapper({
        CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),
        CALL_REF: classPath.scope.generateUidIdentifier(ref.name + "Call"),
        CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),
        CLASS: t.toExpression(node),
        WRAPPER_REF: ref
      }));
      constructorCall.remove();
    }
    return {
      inherits: $__require('ac'),
      visitor: {Class: function Class(path) {
          if (path.node[ALREADY_VISITED])
            return;
          path.node[ALREADY_VISITED] = true;
          var constructorCall = findConstructorCall(path);
          if (constructorCall) {
            handleClassWithCall(constructorCall, path);
          } else {
            return;
          }
        }}
    };
  };
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildWrapper = (0, _babelTemplate2.default)("\n  let CLASS_REF = CLASS;\n  var CALL_REF = CALL;\n  var WRAPPER_REF = function (...args) {\n    if (this instanceof WRAPPER_REF) {\n      return Reflect.construct(CLASS_REF, args);\n    } else {\n      return CALL_REF.apply(this, args);\n    }\n  };\n  WRAPPER_REF.__proto__ = CLASS_REF;\n  WRAPPER_REF;\n");
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("ae", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classProperties");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("af", ["f", "ae"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    var findBareSupers = {Super: function Super(path) {
        if (path.parentPath.isCallExpression({callee: path.node})) {
          this.push(path.parentPath);
        }
      }};
    var referenceVisitor = {ReferencedIdentifier: function ReferencedIdentifier(path) {
        if (this.scope.hasOwnBinding(path.node.name)) {
          this.collision = true;
          path.skip();
        }
      }};
    return {
      inherits: $__require('ae'),
      visitor: {Class: function Class(path) {
          var isDerived = !!path.node.superClass;
          var constructor = void 0;
          var props = [];
          var body = path.get("body");
          for (var _iterator = body.get("body"),
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
            var _ref2;
            if (_isArray) {
              if (_i >= _iterator.length)
                break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done)
                break;
              _ref2 = _i.value;
            }
            var _path = _ref2;
            if (_path.isClassProperty()) {
              props.push(_path);
            } else if (_path.isClassMethod({kind: "constructor"})) {
              constructor = _path;
            }
          }
          if (!props.length)
            return;
          var nodes = [];
          var ref = void 0;
          if (path.isClassExpression() || !path.node.id) {
            ref = path.scope.generateUidIdentifier("class");
          } else {
            ref = path.node.id;
          }
          var instanceBody = [];
          for (var _iterator2 = props,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
            var _ref3;
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                break;
              _ref3 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                break;
              _ref3 = _i2.value;
            }
            var _prop = _ref3;
            var propNode = _prop.node;
            if (propNode.decorators && propNode.decorators.length > 0)
              continue;
            if (!propNode.value)
              continue;
            var isStatic = propNode.static;
            if (isStatic) {
              nodes.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(ref, propNode.key), propNode.value)));
            } else {
              instanceBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), propNode.key), propNode.value)));
            }
          }
          if (instanceBody.length) {
            if (!constructor) {
              var newConstructor = t.classMethod("constructor", t.identifier("constructor"), [], t.blockStatement([]));
              if (isDerived) {
                newConstructor.params = [t.restElement(t.identifier("args"))];
                newConstructor.body.body.push(t.returnStatement(t.callExpression(t.super(), [t.spreadElement(t.identifier("args"))])));
              }
              var _body$unshiftContaine = body.unshiftContainer("body", newConstructor);
              constructor = _body$unshiftContaine[0];
            }
            var collisionState = {
              collision: false,
              scope: constructor.scope
            };
            for (var _iterator3 = props,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
              var _ref4;
              if (_isArray3) {
                if (_i3 >= _iterator3.length)
                  break;
                _ref4 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done)
                  break;
                _ref4 = _i3.value;
              }
              var prop = _ref4;
              prop.traverse(referenceVisitor, collisionState);
              if (collisionState.collision)
                break;
            }
            if (collisionState.collision) {
              var initialisePropsRef = path.scope.generateUidIdentifier("initialiseProps");
              nodes.push(t.variableDeclaration("var", [t.variableDeclarator(initialisePropsRef, t.functionExpression(null, [], t.blockStatement(instanceBody)))]));
              instanceBody = [t.expressionStatement(t.callExpression(t.memberExpression(initialisePropsRef, t.identifier("call")), [t.thisExpression()]))];
            }
            if (isDerived) {
              var bareSupers = [];
              constructor.traverse(findBareSupers, bareSupers);
              for (var _iterator4 = bareSupers,
                  _isArray4 = Array.isArray(_iterator4),
                  _i4 = 0,
                  _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
                var _ref5;
                if (_isArray4) {
                  if (_i4 >= _iterator4.length)
                    break;
                  _ref5 = _iterator4[_i4++];
                } else {
                  _i4 = _iterator4.next();
                  if (_i4.done)
                    break;
                  _ref5 = _i4.value;
                }
                var bareSuper = _ref5;
                bareSuper.insertAfter(instanceBody);
              }
            } else {
              constructor.get("body").unshiftContainer("body", instanceBody);
            }
          }
          for (var _iterator5 = props,
              _isArray5 = Array.isArray(_iterator5),
              _i5 = 0,
              _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
            var _ref6;
            if (_isArray5) {
              if (_i5 >= _iterator5.length)
                break;
              _ref6 = _iterator5[_i5++];
            } else {
              _i5 = _iterator5.next();
              if (_i5.done)
                break;
              _ref6 = _i5.value;
            }
            var _prop2 = _ref6;
            _prop2.remove();
          }
          if (!nodes.length)
            return;
          if (path.isClassExpression()) {
            path.scope.push({id: ref});
            path.replaceWith(t.assignmentExpression("=", ref, path.node));
          } else {
            if (!path.node.id) {
              path.node.id = ref;
            }
            if (path.parentPath.isExportDeclaration()) {
              path = path.parentPath;
            }
          }
          path.insertAfter(nodes);
        }}
    };
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b0", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("decorators");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b1", ["f", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = bindifyDecorators;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function bindifyDecorators(decorators) {
    for (var _iterator = decorators,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var decoratorPath = _ref;
      var decorator = decoratorPath.node;
      var expression = decorator.expression;
      if (!t.isMemberExpression(expression))
        continue;
      var temp = decoratorPath.scope.maybeGenerateMemoised(expression.object);
      var ref = void 0;
      var nodes = [];
      if (temp) {
        ref = temp;
        nodes.push(t.assignmentExpression("=", temp, expression.object));
      } else {
        ref = expression.object;
      }
      nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));
      if (nodes.length === 1) {
        decorator.expression = nodes[0];
      } else {
        decorator.expression = t.sequenceExpression(nodes);
      }
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b2", ["f", "b1", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(classPath) {
    classPath.assertClass();
    var memoisedExpressions = [];
    function maybeMemoise(path) {
      if (!path.node || path.isPure())
        return;
      var uid = classPath.scope.generateDeclaredUidIdentifier();
      memoisedExpressions.push(t.assignmentExpression("=", uid, path.node));
      path.replaceWith(uid);
    }
    function memoiseDecorators(paths) {
      if (!Array.isArray(paths) || !paths.length)
        return;
      paths = paths.reverse();
      (0, _babelHelperBindifyDecorators2.default)(paths);
      for (var _iterator = paths,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var path = _ref;
        maybeMemoise(path);
      }
    }
    maybeMemoise(classPath.get("superClass"));
    memoiseDecorators(classPath.get("decorators"), true);
    var methods = classPath.get("body.body");
    for (var _iterator2 = methods,
        _isArray2 = Array.isArray(_iterator2),
        _i2 = 0,
        _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
      var _ref2;
      if (_isArray2) {
        if (_i2 >= _iterator2.length)
          break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done)
          break;
        _ref2 = _i2.value;
      }
      var methodPath = _ref2;
      if (methodPath.is("computed")) {
        maybeMemoise(methodPath.get("key"));
      }
      if (methodPath.has("decorators")) {
        memoiseDecorators(classPath.get("decorators"));
      }
    }
    if (memoisedExpressions) {
      classPath.insertBefore(memoisedExpressions.map(function(expr) {
        return t.expressionStatement(expr);
      }));
    }
  };
  var _babelHelperBindifyDecorators = $__require('b1');
  var _babelHelperBindifyDecorators2 = _interopRequireDefault(_babelHelperBindifyDecorators);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b3", ["9f", "f", "b0", "7", "b2"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function cleanDecorators(decorators) {
      return decorators.reverse().map(function(dec) {
        return dec.expression;
      });
    }
    function transformClass(path, ref, state) {
      var nodes = [];
      state;
      var classDecorators = path.node.decorators;
      if (classDecorators) {
        path.node.decorators = null;
        classDecorators = cleanDecorators(classDecorators);
        for (var _iterator = classDecorators,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref2;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref2 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref2 = _i.value;
          }
          var decorator = _ref2;
          nodes.push(buildClassDecorator({
            CLASS_REF: ref,
            DECORATOR: decorator
          }));
        }
      }
      var map = (0, _create2.default)(null);
      for (var _iterator2 = path.get("body.body"),
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref3;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref3 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref3 = _i2.value;
        }
        var method = _ref3;
        var decorators = method.node.decorators;
        if (!decorators)
          continue;
        var _alias = t.toKeyAlias(method.node);
        map[_alias] = map[_alias] || [];
        map[_alias].push(method.node);
        method.remove();
      }
      for (var alias in map) {
        var items = map[alias];
        items;
      }
      return nodes;
    }
    function hasDecorators(path) {
      if (path.isClass()) {
        if (path.node.decorators)
          return true;
        for (var _iterator3 = path.node.body.body,
            _isArray3 = Array.isArray(_iterator3),
            _i3 = 0,
            _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
          var _ref4;
          if (_isArray3) {
            if (_i3 >= _iterator3.length)
              break;
            _ref4 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done)
              break;
            _ref4 = _i3.value;
          }
          var method = _ref4;
          if (method.decorators) {
            return true;
          }
        }
      } else if (path.isObjectExpression()) {
        for (var _iterator4 = path.node.properties,
            _isArray4 = Array.isArray(_iterator4),
            _i4 = 0,
            _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
          var _ref5;
          if (_isArray4) {
            if (_i4 >= _iterator4.length)
              break;
            _ref5 = _iterator4[_i4++];
          } else {
            _i4 = _iterator4.next();
            if (_i4.done)
              break;
            _ref5 = _i4.value;
          }
          var prop = _ref5;
          if (prop.decorators) {
            return true;
          }
        }
      }
      return false;
    }
    function doError(path) {
      throw path.buildCodeFrameError("Decorators are not supported yet in 6.x pending proposal update.");
    }
    return {
      inherits: $__require('b0'),
      visitor: {
        ClassExpression: function ClassExpression(path) {
          if (!hasDecorators(path))
            return;
          doError(path);
          (0, _babelHelperExplodeClass2.default)(path);
          var ref = path.scope.generateDeclaredUidIdentifier("ref");
          var nodes = [];
          nodes.push(t.assignmentExpression("=", ref, path.node));
          nodes = nodes.concat(transformClass(path, ref, this));
          nodes.push(ref);
          path.replaceWith(t.sequenceExpression(nodes));
        },
        ClassDeclaration: function ClassDeclaration(path) {
          if (!hasDecorators(path))
            return;
          doError(path);
          (0, _babelHelperExplodeClass2.default)(path);
          var ref = path.node.id;
          var nodes = [];
          nodes = nodes.concat(transformClass(path, ref, this).map(function(expr) {
            return t.expressionStatement(expr);
          }));
          nodes.push(t.expressionStatement(ref));
          path.insertAfter(nodes);
        },
        ObjectExpression: function ObjectExpression(path) {
          if (!hasDecorators(path))
            return;
          doError(path);
        }
      }
    };
  };
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelHelperExplodeClass = $__require('b2');
  var _babelHelperExplodeClass2 = _interopRequireDefault(_babelHelperExplodeClass);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildClassDecorator = (0, _babelTemplate2.default)("\n  CLASS_REF = DECORATOR(CLASS_REF) || CLASS_REF;\n");
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b4", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("exportExtensions");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b5", ["b4"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var t = _ref.types;
    function build(node, nodes, scope) {
      var first = node.specifiers[0];
      if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first))
        return;
      var specifier = node.specifiers.shift();
      var uid = scope.generateUidIdentifier(specifier.exported.name);
      var newSpecifier = void 0;
      if (t.isExportNamespaceSpecifier(specifier)) {
        newSpecifier = t.importNamespaceSpecifier(uid);
      } else {
        newSpecifier = t.importDefaultSpecifier(uid);
      }
      nodes.push(t.importDeclaration([newSpecifier], node.source));
      nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));
      build(node, nodes, scope);
    }
    return {
      inherits: $__require('b4'),
      visitor: {ExportNamedDeclaration: function ExportNamedDeclaration(path) {
          var node = path.node;
          var scope = path.scope;
          var nodes = [];
          build(node, nodes, scope);
          if (!nodes.length)
            return;
          if (node.specifiers.length >= 1) {
            nodes.push(node);
          }
          path.replaceWithMultiple(nodes);
        }}
    };
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b6", ["b7", "ad", "af", "b3", "b5"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    presets: [$__require('b7')],
    plugins: [$__require('ad'), $__require('af'), $__require('b3'), $__require('b5')]
  };
  return module.exports;
});

$__System.registerDynamic("b8", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("trailingFunctionCommas");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b9", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("objectRestSpread");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("ba", ["f", "b9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function hasSpread(node) {
      for (var _iterator = node.properties,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref2;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref2 = _i.value;
        }
        var prop = _ref2;
        if (t.isSpreadProperty(prop)) {
          return true;
        }
      }
      return false;
    }
    return {
      inherits: $__require('b9'),
      visitor: {ObjectExpression: function ObjectExpression(path, file) {
          if (!hasSpread(path.node))
            return;
          var args = [];
          var props = [];
          function push() {
            if (!props.length)
              return;
            args.push(t.objectExpression(props));
            props = [];
          }
          for (var _iterator2 = path.node.properties,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
            var _ref3;
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                break;
              _ref3 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                break;
              _ref3 = _i2.value;
            }
            var prop = _ref3;
            if (t.isSpreadProperty(prop)) {
              push();
              args.push(prop.argument);
            } else {
              props.push(prop);
            }
          }
          push();
          if (!t.isObjectExpression(args[0])) {
            args.unshift(t.objectExpression([]));
          }
          path.replaceWith(t.callExpression(file.addHelper("extends"), args));
        }}
    };
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("b7", ["bb", "b8", "ba"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    presets: [$__require('bb')],
    plugins: [$__require('b8'), $__require('ba')]
  };
  return module.exports;
});

$__System.registerDynamic("bc", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("asyncFunctions");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("bd", ["be", "7", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(path, callId) {
    var node = path.node;
    if (node.generator)
      return;
    path.traverse(awaitVisitor);
    if (path.isClassMethod() || path.isObjectMethod()) {
      return classOrObjectMethod(path, callId);
    } else {
      return plainFunction(path, callId);
    }
  };
  var _babelHelperFunctionName = $__require('be');
  var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildWrapper = (0, _babelTemplate2.default)("\n  (() => {\n    var ref = FUNCTION;\n    return function NAME(PARAMS) {\n      return ref.apply(this, arguments);\n    };\n  })\n");
  var namedBuildWrapper = (0, _babelTemplate2.default)("\n  (() => {\n    var ref = FUNCTION;\n    function NAME(PARAMS) {\n      return ref.apply(this, arguments);\n    }\n    return NAME;\n  })\n");
  var awaitVisitor = {
    ArrowFunctionExpression: function ArrowFunctionExpression(path) {
      if (!path.node.async) {
        path.arrowFunctionToShadowed();
      }
    },
    AwaitExpression: function AwaitExpression(_ref) {
      var node = _ref.node;
      node.type = "YieldExpression";
    }
  };
  function classOrObjectMethod(path, callId) {
    var node = path.node;
    var body = node.body;
    node.async = false;
    var container = t.functionExpression(null, [], t.blockStatement(body.body), true);
    container.shadow = true;
    body.body = [t.returnStatement(t.callExpression(t.callExpression(callId, [container]), []))];
  }
  function plainFunction(path, callId) {
    var node = path.node;
    var isDeclaration = path.isFunctionDeclaration();
    var asyncFnId = node.id;
    var wrapper = buildWrapper;
    if (path.isArrowFunctionExpression()) {
      path.arrowFunctionToShadowed();
    } else if (!isDeclaration && asyncFnId) {
      wrapper = namedBuildWrapper;
    }
    node.async = false;
    node.generator = true;
    node.id = null;
    if (isDeclaration) {
      node.type = "FunctionExpression";
    }
    var built = t.callExpression(callId, [node]);
    var container = wrapper({
      NAME: asyncFnId,
      FUNCTION: built,
      PARAMS: node.params.map(function() {
        return path.scope.generateUidIdentifier("x");
      })
    }).expression;
    if (isDeclaration) {
      var declar = t.variableDeclaration("let", [t.variableDeclarator(t.identifier(asyncFnId.name), t.callExpression(container, []))]);
      declar._blockHoist = true;
      path.replaceWith(declar);
    } else {
      var retFunction = container.body.body[1].argument;
      if (!asyncFnId) {
        (0, _babelHelperFunctionName2.default)({
          node: retFunction,
          parent: path.parent,
          scope: path.scope
        });
      }
      if (!retFunction || retFunction.id || node.params.length) {
        path.replaceWith(t.callExpression(container, []));
      } else {
        path.replaceWith(built);
      }
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("bf", ["bc", "bd"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {
      inherits: $__require('bc'),
      visitor: {Function: function Function(path, state) {
          if (!path.node.async || path.node.generator)
            return;
          (0, _babelHelperRemapAsyncToGenerator2.default)(path, state.addHelper("asyncToGenerator"));
        }}
    };
  };
  var _babelHelperRemapAsyncToGenerator = $__require('bd');
  var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c0", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {manipulateOptions: function manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("exponentiationOperator");
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c1", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(node, nodes, file, scope, allowedSingleIdent) {
    var obj = void 0;
    if (t.isIdentifier(node) && allowedSingleIdent) {
      obj = node;
    } else {
      obj = getObjRef(node, nodes, file, scope);
    }
    var ref = void 0,
        uid = void 0;
    if (t.isIdentifier(node)) {
      ref = node;
      uid = obj;
    } else {
      var prop = getPropRef(node, nodes, file, scope);
      var computed = node.computed || t.isLiteral(prop);
      uid = ref = t.memberExpression(obj, prop, computed);
    }
    return {
      uid: uid,
      ref: ref
    };
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function getObjRef(node, nodes, file, scope) {
    var ref = void 0;
    if (t.isIdentifier(node)) {
      if (scope.hasBinding(node.name)) {
        return node;
      } else {
        ref = node;
      }
    } else if (t.isMemberExpression(node)) {
      ref = node.object;
      if (t.isIdentifier(ref) && scope.hasBinding(ref.name)) {
        return ref;
      }
    } else {
      throw new Error("We can't explode this node type " + node.type);
    }
    var temp = scope.generateUidIdentifierBasedOnNode(ref);
    nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
    return temp;
  }
  function getPropRef(node, nodes, file, scope) {
    var prop = node.property;
    var key = t.toComputedKey(node, prop);
    if (t.isLiteral(key))
      return key;
    var temp = scope.generateUidIdentifierBasedOnNode(prop);
    nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
    return temp;
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c2", ["c1", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(opts) {
    var visitor = {};
    function isAssignment(node) {
      return node.operator === opts.operator + "=";
    }
    function buildAssignment(left, right) {
      return t.assignmentExpression("=", left, right);
    }
    visitor.ExpressionStatement = function(path, file) {
      if (path.isCompletionRecord())
        return;
      var expr = path.node.expression;
      if (!isAssignment(expr))
        return;
      var nodes = [];
      var exploded = (0, _babelHelperExplodeAssignableExpression2.default)(expr.left, nodes, file, path.scope, true);
      nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));
      path.replaceWithMultiple(nodes);
    };
    visitor.AssignmentExpression = function(path, file) {
      var node = path.node;
      var scope = path.scope;
      if (!isAssignment(node))
        return;
      var nodes = [];
      var exploded = (0, _babelHelperExplodeAssignableExpression2.default)(node.left, nodes, file, scope);
      nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
      path.replaceWithMultiple(nodes);
    };
    visitor.BinaryExpression = function(path) {
      var node = path.node;
      if (node.operator === opts.operator) {
        path.replaceWith(opts.build(node.left, node.right));
      }
    };
    return visitor;
  };
  var _babelHelperExplodeAssignableExpression = $__require('c1');
  var _babelHelperExplodeAssignableExpression2 = _interopRequireDefault(_babelHelperExplodeAssignableExpression);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c3", ["c0", "c2"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var t = _ref.types;
    return {
      inherits: $__require('c0'),
      visitor: (0, _babelHelperBuilderBinaryAssignmentOperatorVisitor2.default)({
        operator: "**",
        build: function build(left, right) {
          return t.callExpression(t.memberExpression(t.identifier("Math"), t.identifier("pow")), [left, right]);
        }
      })
    };
  };
  var _babelHelperBuilderBinaryAssignmentOperatorVisitor = $__require('c2');
  var _babelHelperBuilderBinaryAssignmentOperatorVisitor2 = _interopRequireDefault(_babelHelperBuilderBinaryAssignmentOperatorVisitor);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("bb", ["bf", "c3"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {plugins: [$__require('bf'), $__require('c3')]};
  return module.exports;
});

$__System.registerDynamic("c4", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function isString(node) {
      return t.isLiteral(node) && typeof node.value === "string";
    }
    function buildBinaryExpression(left, right) {
      return t.binaryExpression("+", left, right);
    }
    return {visitor: {
        TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
          var node = path.node;
          var quasi = node.quasi;
          var args = [];
          var strings = [];
          var raw = [];
          for (var _iterator = quasi.quasis,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
            var _ref2;
            if (_isArray) {
              if (_i >= _iterator.length)
                break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done)
                break;
              _ref2 = _i.value;
            }
            var elem = _ref2;
            strings.push(t.stringLiteral(elem.value.cooked));
            raw.push(t.stringLiteral(elem.value.raw));
          }
          strings = t.arrayExpression(strings);
          raw = t.arrayExpression(raw);
          var templateName = "taggedTemplateLiteral";
          if (state.opts.loose)
            templateName += "Loose";
          var templateObject = state.file.addTemplateObject(templateName, strings, raw);
          args.push(templateObject);
          args = args.concat(quasi.expressions);
          path.replaceWith(t.callExpression(node.tag, args));
        },
        TemplateLiteral: function TemplateLiteral(path, state) {
          var nodes = [];
          var expressions = path.get("expressions");
          for (var _iterator2 = path.node.quasis,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
            var _ref3;
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                break;
              _ref3 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                break;
              _ref3 = _i2.value;
            }
            var elem = _ref3;
            nodes.push(t.stringLiteral(elem.value.cooked));
            var expr = expressions.shift();
            if (expr) {
              if (state.opts.spec && !expr.isBaseType("string") && !expr.isBaseType("number")) {
                nodes.push(t.callExpression(t.identifier("String"), [expr.node]));
              } else {
                nodes.push(expr.node);
              }
            }
          }
          nodes = nodes.filter(function(n) {
            return !t.isLiteral(n, {value: ""});
          });
          if (!isString(nodes[0]) && !isString(nodes[1])) {
            nodes.unshift(t.stringLiteral(""));
          }
          if (nodes.length > 1) {
            var root = buildBinaryExpression(nodes.shift(), nodes.shift());
            for (var _iterator3 = nodes,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
              var _ref4;
              if (_isArray3) {
                if (_i3 >= _iterator3.length)
                  break;
                _ref4 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done)
                  break;
                _ref4 = _i3.value;
              }
              var node = _ref4;
              root = buildBinaryExpression(root, node);
            }
            path.replaceWith(root);
          } else {
            path.replaceWith(nodes[0]);
          }
        }
      }};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c5", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {visitor: {
        NumericLiteral: function NumericLiteral(_ref) {
          var node = _ref.node;
          if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
            node.extra = undefined;
          }
        },
        StringLiteral: function StringLiteral(_ref2) {
          var node = _ref2.node;
          if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
            node.extra = undefined;
          }
        }
      }};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c6", ["be"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {visitor: {
        "ArrowFunctionExpression|FunctionExpression": {exit: function exit(path) {
            if (path.key !== "value" && !path.parentPath.isObjectProperty()) {
              var replacement = (0, _babelHelperFunctionName2.default)(path);
              if (replacement)
                path.replaceWith(replacement);
            }
          }},
        ObjectProperty: function ObjectProperty(path) {
          var value = path.get("value");
          if (value.isFunction()) {
            var newNode = (0, _babelHelperFunctionName2.default)(value);
            if (newNode)
              value.replaceWith(newNode);
          }
        }
      }};
  };
  var _babelHelperFunctionName = $__require('be');
  var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c7", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var t = _ref.types;
    return {visitor: {ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {
          if (state.opts.spec) {
            var node = path.node;
            if (node.shadow)
              return;
            node.shadow = {this: false};
            node.type = "FunctionExpression";
            var boundThis = t.thisExpression();
            boundThis._forceShadow = path;
            path.ensureBlock();
            path.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(state.addHelper("newArrowCheck"), [t.thisExpression(), boundThis])));
            path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]));
          } else {
            path.arrowFunctionToShadowed();
          }
        }}};
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c8", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function statementList(key, path) {
      var paths = path.get(key);
      for (var _iterator = paths,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref2;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref2 = _i.value;
        }
        var _path = _ref2;
        var func = _path.node;
        if (!_path.isFunctionDeclaration())
          continue;
        var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);
        declar._blockHoist = 2;
        func.id = null;
        _path.replaceWith(declar);
      }
    }
    return {visitor: {
        BlockStatement: function BlockStatement(path) {
          var node = path.node;
          var parent = path.parent;
          if (t.isFunction(parent, {body: node}) || t.isExportDeclaration(parent)) {
            return;
          }
          statementList("body", path);
        },
        SwitchCase: function SwitchCase(path) {
          statementList("consequent", path);
        }
      }};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("c9", ["15", "16", "17", "be", "ca", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _babelHelperFunctionName = $__require('be');
  var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
  var _vanilla = $__require('ca');
  var _vanilla2 = _interopRequireDefault(_vanilla);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var LooseClassTransformer = function(_VanillaTransformer) {
    (0, _inherits3.default)(LooseClassTransformer, _VanillaTransformer);
    function LooseClassTransformer() {
      (0, _classCallCheck3.default)(this, LooseClassTransformer);
      var _this = (0, _possibleConstructorReturn3.default)(this, _VanillaTransformer.apply(this, arguments));
      _this.isLoose = true;
      return _this;
    }
    LooseClassTransformer.prototype._processMethod = function _processMethod(node, scope) {
      if (!node.decorators) {
        var classRef = this.classRef;
        if (!node.static)
          classRef = t.memberExpression(classRef, t.identifier("prototype"));
        var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));
        var func = t.functionExpression(null, node.params, node.body, node.generator, node.async);
        var key = t.toComputedKey(node, node.key);
        if (t.isStringLiteral(key)) {
          func = (0, _babelHelperFunctionName2.default)({
            node: func,
            id: key,
            scope: scope
          });
        }
        var expr = t.expressionStatement(t.assignmentExpression("=", methodName, func));
        t.inheritsComments(expr, node);
        this.body.push(expr);
        return true;
      }
    };
    return LooseClassTransformer;
  }(_vanilla2.default);
  exports.default = LooseClassTransformer;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("cb", ["be", "8", "cc", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.push = push;
  exports.hasComputed = hasComputed;
  exports.toComputedObjectFromClass = toComputedObjectFromClass;
  exports.toClassObject = toClassObject;
  exports.toDefineObject = toDefineObject;
  var _babelHelperFunctionName = $__require('be');
  var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
  var _each = $__require('8');
  var _each2 = _interopRequireDefault(_each);
  var _has = $__require('cc');
  var _has2 = _interopRequireDefault(_has);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function toKind(node) {
    if (t.isClassMethod(node) || t.isObjectMethod(node)) {
      if (node.kind === "get" || node.kind === "set") {
        return node.kind;
      }
    }
    return "value";
  }
  function push(mutatorMap, node, kind, file, scope) {
    var alias = t.toKeyAlias(node);
    var map = {};
    if ((0, _has2.default)(mutatorMap, alias))
      map = mutatorMap[alias];
    mutatorMap[alias] = map;
    map._inherits = map._inherits || [];
    map._inherits.push(node);
    map._key = node.key;
    if (node.computed) {
      map._computed = true;
    }
    if (node.decorators) {
      var decorators = map.decorators = map.decorators || t.arrayExpression([]);
      decorators.elements = decorators.elements.concat(node.decorators.map(function(dec) {
        return dec.expression;
      }).reverse());
    }
    if (map.value || map.initializer) {
      throw file.buildCodeFrameError(node, "Key conflict with sibling node");
    }
    var key = void 0,
        value = void 0;
    if (t.isObjectProperty(node) || t.isObjectMethod(node) || t.isClassMethod(node)) {
      key = t.toComputedKey(node, node.key);
    }
    if (t.isObjectProperty(node) || t.isClassProperty(node)) {
      value = node.value;
    } else if (t.isObjectMethod(node) || t.isClassMethod(node)) {
      value = t.functionExpression(null, node.params, node.body, node.generator, node.async);
    }
    var inheritedKind = toKind(node);
    if (!kind || inheritedKind !== "value") {
      kind = inheritedKind;
    }
    if (scope && t.isStringLiteral(key) && (kind === "value" || kind === "initializer") && t.isFunctionExpression(value)) {
      value = (0, _babelHelperFunctionName2.default)({
        id: key,
        node: value,
        scope: scope
      });
    }
    if (value) {
      t.inheritsComments(value, node);
      map[kind] = value;
    }
    return map;
  }
  function hasComputed(mutatorMap) {
    for (var key in mutatorMap) {
      if (mutatorMap[key]._computed) {
        return true;
      }
    }
    return false;
  }
  function toComputedObjectFromClass(obj) {
    var objExpr = t.arrayExpression([]);
    for (var i = 0; i < obj.properties.length; i++) {
      var prop = obj.properties[i];
      var val = prop.value;
      val.properties.unshift(t.objectProperty(t.identifier("key"), t.toComputedKey(prop)));
      objExpr.elements.push(val);
    }
    return objExpr;
  }
  function toClassObject(mutatorMap) {
    var objExpr = t.objectExpression([]);
    (0, _each2.default)(mutatorMap, function(map) {
      var mapNode = t.objectExpression([]);
      var propNode = t.objectProperty(map._key, mapNode, map._computed);
      (0, _each2.default)(map, function(node, key) {
        if (key[0] === "_")
          return;
        var inheritNode = node;
        if (t.isClassMethod(node) || t.isClassProperty(node))
          node = node.value;
        var prop = t.objectProperty(t.identifier(key), node);
        t.inheritsComments(prop, inheritNode);
        t.removeComments(inheritNode);
        mapNode.properties.push(prop);
      });
      objExpr.properties.push(propNode);
    });
    return objExpr;
  }
  function toDefineObject(mutatorMap) {
    (0, _each2.default)(mutatorMap, function(map) {
      if (map.value)
        map.writable = t.booleanLiteral(true);
      map.configurable = t.booleanLiteral(true);
      map.enumerable = t.booleanLiteral(true);
    });
    return toClassObject(mutatorMap);
  }
  return module.exports;
});

$__System.registerDynamic("ca", ["f", "15", "18", "cd", "ce", "cb", "7", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _babelTraverse = $__require('18');
  var _babelHelperReplaceSupers = $__require('cd');
  var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);
  var _babelHelperOptimiseCallExpression = $__require('ce');
  var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);
  var _babelHelperDefineMap = $__require('cb');
  var defineMap = _interopRequireWildcard(_babelHelperDefineMap);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildDerivedConstructor = (0, _babelTemplate2.default)("\n  (function () {\n    super(...arguments);\n  })\n");
  var noMethodVisitor = {
    "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
      if (!path.is("shadow")) {
        path.skip();
      }
    },
    Method: function Method(path) {
      path.skip();
    }
  };
  var verifyConstructorVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
    Super: function Super(path) {
      if (this.isDerived && !this.hasBareSuper && !path.parentPath.isCallExpression({callee: path.node})) {
        throw path.buildCodeFrameError("'super.*' is not allowed before super()");
      }
    },
    CallExpression: {exit: function exit(path) {
        if (path.get("callee").isSuper()) {
          this.hasBareSuper = true;
          if (!this.isDerived) {
            throw path.buildCodeFrameError("super() is only allowed in a derived constructor");
          }
        }
      }},
    ThisExpression: function ThisExpression(path) {
      if (this.isDerived && !this.hasBareSuper) {
        if (!path.inShadow("this")) {
          throw path.buildCodeFrameError("'this' is not allowed before super()");
        }
      }
    }
  }]);
  var findThisesVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {ThisExpression: function ThisExpression(path) {
      this.superThises.push(path);
    }}]);
  var ClassTransformer = function() {
    function ClassTransformer(path, file) {
      (0, _classCallCheck3.default)(this, ClassTransformer);
      this.parent = path.parent;
      this.scope = path.scope;
      this.node = path.node;
      this.path = path;
      this.file = file;
      this.clearDescriptors();
      this.instancePropBody = [];
      this.instancePropRefs = {};
      this.staticPropBody = [];
      this.body = [];
      this.bareSuperAfter = [];
      this.bareSupers = [];
      this.pushedConstructor = false;
      this.pushedInherits = false;
      this.isLoose = false;
      this.superThises = [];
      this.classId = this.node.id;
      this.classRef = this.node.id ? t.identifier(this.node.id.name) : this.scope.generateUidIdentifier("class");
      this.superName = this.node.superClass || t.identifier("Function");
      this.isDerived = !!this.node.superClass;
    }
    ClassTransformer.prototype.run = function run() {
      var _this = this;
      var superName = this.superName;
      var file = this.file;
      var body = this.body;
      var constructorBody = this.constructorBody = t.blockStatement([]);
      this.constructor = this.buildConstructor();
      var closureParams = [];
      var closureArgs = [];
      if (this.isDerived) {
        closureArgs.push(superName);
        superName = this.scope.generateUidIdentifierBasedOnNode(superName);
        closureParams.push(superName);
        this.superName = superName;
      }
      this.buildBody();
      constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("classCallCheck"), [t.thisExpression(), this.classRef])));
      body = body.concat(this.staticPropBody.map(function(fn) {
        return fn(_this.classRef);
      }));
      if (this.classId) {
        if (body.length === 1)
          return t.toExpression(body[0]);
      }
      body.push(t.returnStatement(this.classRef));
      var container = t.functionExpression(null, closureParams, t.blockStatement(body));
      container.shadow = true;
      return t.callExpression(container, closureArgs);
    };
    ClassTransformer.prototype.buildConstructor = function buildConstructor() {
      var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
      t.inherits(func, this.node);
      return func;
    };
    ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable) {
      var kind = arguments.length <= 2 || arguments[2] === undefined ? "value" : arguments[2];
      var scope = arguments[3];
      var mutatorMap = void 0;
      if (node.static) {
        this.hasStaticDescriptors = true;
        mutatorMap = this.staticMutatorMap;
      } else {
        this.hasInstanceDescriptors = true;
        mutatorMap = this.instanceMutatorMap;
      }
      var map = defineMap.push(mutatorMap, node, kind, this.file, scope);
      if (enumerable) {
        map.enumerable = t.booleanLiteral(true);
      }
      return map;
    };
    ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
      var hasConstructor = false;
      var paths = this.path.get("body.body");
      for (var _iterator = paths,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var path = _ref;
        hasConstructor = path.equals("kind", "constructor");
        if (hasConstructor)
          break;
      }
      if (hasConstructor)
        return;
      var params = void 0,
          body = void 0;
      if (this.isDerived) {
        var _constructor = buildDerivedConstructor().expression;
        params = _constructor.params;
        body = _constructor.body;
      } else {
        params = [];
        body = t.blockStatement([]);
      }
      this.path.get("body").unshiftContainer("body", t.classMethod("constructor", t.identifier("constructor"), params, body));
    };
    ClassTransformer.prototype.buildBody = function buildBody() {
      this.constructorMeMaybe();
      this.pushBody();
      this.verifyConstructor();
      if (this.userConstructor) {
        var constructorBody = this.constructorBody;
        constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
        t.inherits(this.constructor, this.userConstructor);
        t.inherits(constructorBody, this.userConstructor.body);
      }
      this.pushDescriptors();
    };
    ClassTransformer.prototype.pushBody = function pushBody() {
      var classBodyPaths = this.path.get("body.body");
      for (var _iterator2 = classBodyPaths,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var path = _ref2;
        var node = path.node;
        if (path.isClassProperty()) {
          throw path.buildCodeFrameError("Missing class properties transform.");
        }
        if (node.decorators) {
          throw path.buildCodeFrameError("Method has decorators, put the decorator plugin before the classes one.");
        }
        if (t.isClassMethod(node)) {
          var isConstructor = node.kind === "constructor";
          if (isConstructor) {
            path.traverse(verifyConstructorVisitor, this);
            if (!this.hasBareSuper && this.isDerived) {
              throw path.buildCodeFrameError("missing super() call in constructor");
            }
          }
          var replaceSupers = new _babelHelperReplaceSupers2.default({
            forceSuperMemoisation: isConstructor,
            methodPath: path,
            methodNode: node,
            objectRef: this.classRef,
            superRef: this.superName,
            isStatic: node.static,
            isLoose: this.isLoose,
            scope: this.scope,
            file: this.file
          }, true);
          replaceSupers.replace();
          if (isConstructor) {
            this.pushConstructor(replaceSupers, node, path);
          } else {
            this.pushMethod(node, path);
          }
        }
      }
    };
    ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
      this.hasInstanceDescriptors = false;
      this.hasStaticDescriptors = false;
      this.instanceMutatorMap = {};
      this.staticMutatorMap = {};
    };
    ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
      this.pushInherits();
      var body = this.body;
      var instanceProps = void 0;
      var staticProps = void 0;
      if (this.hasInstanceDescriptors) {
        instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
      }
      if (this.hasStaticDescriptors) {
        staticProps = defineMap.toClassObject(this.staticMutatorMap);
      }
      if (instanceProps || staticProps) {
        if (instanceProps)
          instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
        if (staticProps)
          staticProps = defineMap.toComputedObjectFromClass(staticProps);
        var nullNode = t.nullLiteral();
        var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];
        if (instanceProps)
          args[1] = instanceProps;
        if (staticProps)
          args[2] = staticProps;
        if (this.instanceInitializersId) {
          args[3] = this.instanceInitializersId;
          body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
        }
        if (this.staticInitializersId) {
          args[4] = this.staticInitializersId;
          body.unshift(this.buildObjectAssignment(this.staticInitializersId));
        }
        var lastNonNullIndex = 0;
        for (var i = 0; i < args.length; i++) {
          if (args[i] !== nullNode)
            lastNonNullIndex = i;
        }
        args = args.slice(0, lastNonNullIndex + 1);
        body.push(t.expressionStatement(t.callExpression(this.file.addHelper("createClass"), args)));
      }
      this.clearDescriptors();
    };
    ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
      return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
    };
    ClassTransformer.prototype.wrapSuperCall = function wrapSuperCall(bareSuper, superRef, thisRef, body) {
      var bareSuperNode = bareSuper.node;
      if (this.isLoose) {
        bareSuperNode.arguments.unshift(t.thisExpression());
        if (bareSuperNode.arguments.length === 2 && t.isSpreadElement(bareSuperNode.arguments[1]) && t.isIdentifier(bareSuperNode.arguments[1].argument, {name: "arguments"})) {
          bareSuperNode.arguments[1] = bareSuperNode.arguments[1].argument;
          bareSuperNode.callee = t.memberExpression(superRef, t.identifier("apply"));
        } else {
          bareSuperNode.callee = t.memberExpression(superRef, t.identifier("call"));
        }
      } else {
        bareSuperNode = (0, _babelHelperOptimiseCallExpression2.default)(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.classRef]), t.thisExpression(), bareSuperNode.arguments);
      }
      var call = t.callExpression(this.file.addHelper("possibleConstructorReturn"), [t.thisExpression(), bareSuperNode]);
      var bareSuperAfter = this.bareSuperAfter.map(function(fn) {
        return fn(thisRef);
      });
      if (bareSuper.parentPath.isExpressionStatement() && bareSuper.parentPath.container === body.node.body && body.node.body.length - 1 === bareSuper.parentPath.key) {
        if (this.superThises.length || bareSuperAfter.length) {
          bareSuper.scope.push({id: thisRef});
          call = t.assignmentExpression("=", thisRef, call);
        }
        if (bareSuperAfter.length) {
          call = t.toSequenceExpression([call].concat(bareSuperAfter, [thisRef]));
        }
        bareSuper.parentPath.replaceWith(t.returnStatement(call));
      } else {
        bareSuper.replaceWithMultiple([t.variableDeclaration("var", [t.variableDeclarator(thisRef, call)])].concat(bareSuperAfter, [t.expressionStatement(thisRef)]));
      }
    };
    ClassTransformer.prototype.verifyConstructor = function verifyConstructor() {
      var _this2 = this;
      if (!this.isDerived)
        return;
      var path = this.userConstructorPath;
      var body = path.get("body");
      path.traverse(findThisesVisitor, this);
      var guaranteedSuperBeforeFinish = !!this.bareSupers.length;
      var superRef = this.superName || t.identifier("Function");
      var thisRef = path.scope.generateUidIdentifier("this");
      for (var _iterator3 = this.bareSupers,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var bareSuper = _ref3;
        this.wrapSuperCall(bareSuper, superRef, thisRef, body);
        if (guaranteedSuperBeforeFinish) {
          bareSuper.find(function(parentPath) {
            if (parentPath === path) {
              return true;
            }
            if (parentPath.isLoop() || parentPath.isConditional()) {
              guaranteedSuperBeforeFinish = false;
              return true;
            }
          });
        }
      }
      for (var _iterator4 = this.superThises,
          _isArray4 = Array.isArray(_iterator4),
          _i4 = 0,
          _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
        var _ref4;
        if (_isArray4) {
          if (_i4 >= _iterator4.length)
            break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done)
            break;
          _ref4 = _i4.value;
        }
        var thisPath = _ref4;
        thisPath.replaceWith(thisRef);
      }
      var wrapReturn = function wrapReturn(returnArg) {
        return t.callExpression(_this2.file.addHelper("possibleConstructorReturn"), [thisRef].concat(returnArg || []));
      };
      var bodyPaths = body.get("body");
      if (bodyPaths.length && !bodyPaths.pop().isReturnStatement()) {
        body.pushContainer("body", t.returnStatement(guaranteedSuperBeforeFinish ? thisRef : wrapReturn()));
      }
      for (var _iterator5 = this.superReturns,
          _isArray5 = Array.isArray(_iterator5),
          _i5 = 0,
          _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
        var _ref5;
        if (_isArray5) {
          if (_i5 >= _iterator5.length)
            break;
          _ref5 = _iterator5[_i5++];
        } else {
          _i5 = _iterator5.next();
          if (_i5.done)
            break;
          _ref5 = _i5.value;
        }
        var returnPath = _ref5;
        if (returnPath.node.argument) {
          var ref = returnPath.scope.generateDeclaredUidIdentifier("ret");
          returnPath.get("argument").replaceWithMultiple([t.assignmentExpression("=", ref, returnPath.node.argument), wrapReturn(ref)]);
        } else {
          returnPath.get("argument").replaceWith(wrapReturn());
        }
      }
    };
    ClassTransformer.prototype.pushMethod = function pushMethod(node, path) {
      var scope = path ? path.scope : this.scope;
      if (node.kind === "method") {
        if (this._processMethod(node, scope))
          return;
      }
      this.pushToMap(node, false, null, scope);
    };
    ClassTransformer.prototype._processMethod = function _processMethod() {
      return false;
    };
    ClassTransformer.prototype.pushConstructor = function pushConstructor(replaceSupers, method, path) {
      this.bareSupers = replaceSupers.bareSupers;
      this.superReturns = replaceSupers.returns;
      if (path.scope.hasOwnBinding(this.classRef.name)) {
        path.scope.rename(this.classRef.name);
      }
      var construct = this.constructor;
      this.userConstructorPath = path;
      this.userConstructor = method;
      this.hasConstructor = true;
      t.inheritsComments(construct, method);
      construct._ignoreUserWhitespace = true;
      construct.params = method.params;
      t.inherits(construct.body, method.body);
      construct.body.directives = method.body.directives;
      this._pushConstructor();
    };
    ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
      if (this.pushedConstructor)
        return;
      this.pushedConstructor = true;
      if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
        this.pushDescriptors();
      }
      this.body.push(this.constructor);
      this.pushInherits();
    };
    ClassTransformer.prototype.pushInherits = function pushInherits() {
      if (!this.isDerived || this.pushedInherits)
        return;
      this.pushedInherits = true;
      this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
    };
    return ClassTransformer;
  }();
  exports.default = ClassTransformer;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("be", ["cf", "7", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var node = _ref.node;
    var parent = _ref.parent;
    var scope = _ref.scope;
    var id = _ref.id;
    if (node.id)
      return;
    if ((t.isObjectProperty(parent) || t.isObjectMethod(parent, {kind: "method"})) && (!parent.computed || t.isLiteral(parent.key))) {
      id = parent.key;
    } else if (t.isVariableDeclarator(parent)) {
      id = parent.id;
      if (t.isIdentifier(id)) {
        var binding = scope.parent.getBinding(id.name);
        if (binding && binding.constant && scope.getBinding(id.name) === binding) {
          node.id = id;
          node.id[t.NOT_LOCAL_BINDING] = true;
          return;
        }
      }
    } else if (t.isAssignmentExpression(parent)) {
      id = parent.left;
    } else if (!id) {
      return;
    }
    var name = void 0;
    if (id && t.isLiteral(id)) {
      name = id.value;
    } else if (id && t.isIdentifier(id)) {
      name = id.name;
    } else {
      return;
    }
    name = t.toBindingIdentifierName(name);
    id = t.identifier(name);
    id[t.NOT_LOCAL_BINDING] = true;
    var state = visit(node, name, scope);
    return wrap(state, node, id, scope) || node;
  };
  var _babelHelperGetFunctionArity = $__require('cf');
  var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildPropertyMethodAssignmentWrapper = (0, _babelTemplate2.default)("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
  var buildGeneratorPropertyMethodAssignmentWrapper = (0, _babelTemplate2.default)("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
  var visitor = {"ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(path, state) {
      if (path.node.name !== state.name)
        return;
      var localDeclar = path.scope.getBindingIdentifier(state.name);
      if (localDeclar !== state.outerDeclar)
        return;
      state.selfReference = true;
      path.stop();
    }};
  function wrap(state, method, id, scope) {
    if (state.selfReference) {
      if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
        scope.rename(id.name);
      } else {
        if (!t.isFunction(method))
          return;
        var build = buildPropertyMethodAssignmentWrapper;
        if (method.generator)
          build = buildGeneratorPropertyMethodAssignmentWrapper;
        var _template = build({
          FUNCTION: method,
          FUNCTION_ID: id,
          FUNCTION_KEY: scope.generateUidIdentifier(id.name)
        }).expression;
        _template.callee._skipModulesRemap = true;
        var params = _template.callee.body.body[0].params;
        for (var i = 0,
            len = (0, _babelHelperGetFunctionArity2.default)(method); i < len; i++) {
          params.push(scope.generateUidIdentifier("x"));
        }
        return _template;
      }
    }
    method.id = id;
    scope.getProgramParent().references[id.name] = true;
  }
  function visit(node, name, scope) {
    var state = {
      selfAssignment: false,
      selfReference: false,
      outerDeclar: scope.getBindingIdentifier(name),
      references: [],
      name: name
    };
    var binding = scope.getOwnBinding(name);
    if (binding) {
      if (binding.kind === "param") {
        state.selfReference = true;
      } else {}
    } else if (state.outerDeclar || scope.hasGlobal(name)) {
      scope.traverse(node, visitor, state);
    }
    return state;
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d0", ["9e", "c9", "ca", "be"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  exports.default = function(_ref) {
    var t = _ref.types;
    var VISITED = (0, _symbol2.default)();
    return {visitor: {
        ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
          if (!path.get("declaration").isClassDeclaration())
            return;
          var node = path.node;
          var ref = node.declaration.id || path.scope.generateUidIdentifier("class");
          node.declaration.id = ref;
          path.replaceWith(node.declaration);
          path.insertAfter(t.exportDefaultDeclaration(ref));
        },
        ClassDeclaration: function ClassDeclaration(path) {
          var node = path.node;
          var ref = node.id || path.scope.generateUidIdentifier("class");
          path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
        },
        ClassExpression: function ClassExpression(path, state) {
          var node = path.node;
          if (node[VISITED])
            return;
          var inferred = (0, _babelHelperFunctionName2.default)(path);
          if (inferred && inferred !== node)
            return path.replaceWith(inferred);
          node[VISITED] = true;
          var Constructor = _vanilla2.default;
          if (state.opts.loose)
            Constructor = _loose2.default;
          path.replaceWith(new Constructor(path, state.file).run());
        }
      }};
  };
  var _loose = $__require('c9');
  var _loose2 = _interopRequireDefault(_loose);
  var _vanilla = $__require('ca');
  var _vanilla2 = _interopRequireDefault(_vanilla);
  var _babelHelperFunctionName = $__require('be');
  var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("ce", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(callee, thisNode, args) {
    if (args.length === 1 && t.isSpreadElement(args[0]) && t.isIdentifier(args[0].argument, {name: "arguments"})) {
      return t.callExpression(t.memberExpression(callee, t.identifier("apply")), [thisNode, args[0].argument]);
    } else {
      return t.callExpression(t.memberExpression(callee, t.identifier("call")), [thisNode].concat(args));
    }
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("cd", ["15", "9e", "ce", "6", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  var _babelHelperOptimiseCallExpression = $__require('ce');
  var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var HARDCORE_THIS_REF = (0, _symbol2.default)();
  function isIllegalBareSuper(node, parent) {
    if (!t.isSuper(node))
      return false;
    if (t.isMemberExpression(parent, {computed: false}))
      return false;
    if (t.isCallExpression(parent, {callee: node}))
      return false;
    return true;
  }
  function isMemberExpressionSuper(node) {
    return t.isMemberExpression(node) && t.isSuper(node.object);
  }
  var visitor = {
    Function: function Function(path) {
      if (!path.inShadow("this")) {
        path.skip();
      }
    },
    ReturnStatement: function ReturnStatement(path, state) {
      if (!path.inShadow("this")) {
        state.returns.push(path);
      }
    },
    ThisExpression: function ThisExpression(path, state) {
      if (!path.node[HARDCORE_THIS_REF]) {
        state.thises.push(path);
      }
    },
    enter: function enter(path, state) {
      var callback = state.specHandle;
      if (state.isLoose)
        callback = state.looseHandle;
      var isBareSuper = path.isCallExpression() && path.get("callee").isSuper();
      var result = callback.call(state, path);
      if (result) {
        state.hasSuper = true;
      }
      if (isBareSuper) {
        state.bareSupers.push(path);
      }
      if (result === true) {
        path.requeue();
      }
      if (result !== true && result) {
        if (Array.isArray(result)) {
          path.replaceWithMultiple(result);
        } else {
          path.replaceWith(result);
        }
      }
    }
  };
  var ReplaceSupers = function() {
    function ReplaceSupers(opts) {
      var inClass = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      (0, _classCallCheck3.default)(this, ReplaceSupers);
      this.forceSuperMemoisation = opts.forceSuperMemoisation;
      this.methodPath = opts.methodPath;
      this.methodNode = opts.methodNode;
      this.superRef = opts.superRef;
      this.isStatic = opts.isStatic;
      this.hasSuper = false;
      this.inClass = inClass;
      this.isLoose = opts.isLoose;
      this.scope = this.methodPath.scope;
      this.file = opts.file;
      this.opts = opts;
      this.bareSupers = [];
      this.returns = [];
      this.thises = [];
    }
    ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
      return this.opts.objectRef || this.opts.getObjectRef();
    };
    ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property, value, isComputed) {
      return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), value, t.thisExpression()]);
    };
    ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property, isComputed) {
      return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), t.thisExpression()]);
    };
    ReplaceSupers.prototype.replace = function replace() {
      this.methodPath.traverse(visitor, this);
    };
    ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id, parent) {
      var methodNode = this.methodNode;
      var superRef = this.superRef || t.identifier("Function");
      if (parent.property === id) {
        return;
      } else if (t.isCallExpression(parent, {callee: id})) {
        return;
      } else if (t.isMemberExpression(parent) && !methodNode.static) {
        return t.memberExpression(superRef, t.identifier("prototype"));
      } else {
        return superRef;
      }
    };
    ReplaceSupers.prototype.looseHandle = function looseHandle(path) {
      var node = path.node;
      if (path.isSuper()) {
        return this.getLooseSuperProperty(node, path.parent);
      } else if (path.isCallExpression()) {
        var callee = node.callee;
        if (!t.isMemberExpression(callee))
          return;
        if (!t.isSuper(callee.object))
          return;
        t.appendToMemberExpression(callee, t.identifier("call"));
        node.arguments.unshift(t.thisExpression());
        return true;
      }
    };
    ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node) {
      if (node.operator === "=") {
        return this.setSuperProperty(node.left.property, node.right, node.left.computed);
      } else {
        ref = ref || path.scope.generateUidIdentifier("ref");
        return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
      }
    };
    ReplaceSupers.prototype.specHandle = function specHandle(path) {
      var property = void 0;
      var computed = void 0;
      var args = void 0;
      var thisReference = void 0;
      var parent = path.parent;
      var node = path.node;
      if (isIllegalBareSuper(node, parent)) {
        throw path.buildCodeFrameError(messages.get("classesIllegalBareSuper"));
      }
      if (t.isCallExpression(node)) {
        var callee = node.callee;
        if (t.isSuper(callee)) {
          return;
        } else if (isMemberExpressionSuper(callee)) {
          property = callee.property;
          computed = callee.computed;
          args = node.arguments;
        }
      } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
        property = node.property;
        computed = node.computed;
      } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
        var binary = t.binaryExpression(node.operator[0], node.argument, t.numericLiteral(1));
        if (node.prefix) {
          return this.specHandleAssignmentExpression(null, path, binary);
        } else {
          var ref = path.scope.generateUidIdentifier("ref");
          return this.specHandleAssignmentExpression(ref, path, binary).concat(t.expressionStatement(ref));
        }
      } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
        return this.specHandleAssignmentExpression(null, path, node);
      }
      if (!property)
        return;
      var superProperty = this.getSuperProperty(property, computed, thisReference);
      if (args) {
        return this.optimiseCall(superProperty, args);
      } else {
        return superProperty;
      }
    };
    ReplaceSupers.prototype.optimiseCall = function optimiseCall(callee, args) {
      var thisNode = t.thisExpression();
      thisNode[HARDCORE_THIS_REF] = true;
      return ((0, _babelHelperOptimiseCallExpression2.default)(callee, thisNode, args));
    };
    return ReplaceSupers;
  }();
  exports.default = ReplaceSupers;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d1", ["f", "9e", "cd"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  exports.default = function(_ref) {
    var t = _ref.types;
    function Property(path, node, scope, getObjectRef, file) {
      var replaceSupers = new _babelHelperReplaceSupers2.default({
        getObjectRef: getObjectRef,
        methodNode: node,
        methodPath: path,
        isStatic: true,
        scope: scope,
        file: file
      });
      replaceSupers.replace();
    }
    var CONTAINS_SUPER = (0, _symbol2.default)();
    return {visitor: {
        Super: function Super(path) {
          var parentObj = path.findParent(function(path) {
            return path.isObjectExpression();
          });
          if (parentObj)
            parentObj.node[CONTAINS_SUPER] = true;
        },
        ObjectExpression: {exit: function exit(path, file) {
            if (!path.node[CONTAINS_SUPER])
              return;
            var objectRef = void 0;
            var getObjectRef = function getObjectRef() {
              return objectRef = objectRef || path.scope.generateUidIdentifier("obj");
            };
            var propPaths = path.get("properties");
            for (var _iterator = propPaths,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
              var _ref2;
              if (_isArray) {
                if (_i >= _iterator.length)
                  break;
                _ref2 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done)
                  break;
                _ref2 = _i.value;
              }
              var propPath = _ref2;
              if (propPath.isObjectProperty())
                propPath = propPath.get("value");
              Property(propPath, propPath.node, path.scope, getObjectRef, file);
            }
            if (objectRef) {
              path.scope.push({id: objectRef});
              path.replaceWith(t.assignmentExpression("=", objectRef, path.node));
            }
          }}
      }};
  };
  var _babelHelperReplaceSupers = $__require('cd');
  var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d2", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {visitor: {
        ObjectMethod: function ObjectMethod(path) {
          var node = path.node;
          if (node.kind === "method") {
            path.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async), node.computed));
          }
        },
        ObjectProperty: function ObjectProperty(_ref) {
          var node = _ref.node;
          if (node.shorthand) {
            node.shorthand = false;
          }
        }
      }};
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d3", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    var template = _ref.template;
    var buildMutatorMapAssign = template("\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ");
    function getValue(prop) {
      if (t.isObjectProperty(prop)) {
        return prop.value;
      } else if (t.isObjectMethod(prop)) {
        return t.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
      }
    }
    function pushAssign(objId, prop, body) {
      if (prop.kind === "get" && prop.kind === "set") {
        pushMutatorDefine(objId, prop, body);
      } else {
        body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), getValue(prop))));
      }
    }
    function pushMutatorDefine(_ref2, prop) {
      var objId = _ref2.objId;
      var body = _ref2.body;
      var getMutatorId = _ref2.getMutatorId;
      var scope = _ref2.scope;
      var key = !prop.computed && t.isIdentifier(prop.key) ? t.stringLiteral(prop.key.name) : prop.key;
      var maybeMemoise = scope.maybeGenerateMemoised(key);
      if (maybeMemoise) {
        body.push(t.expressionStatement(t.assignmentExpression("=", maybeMemoise, key)));
        key = maybeMemoise;
      }
      body.push.apply(body, buildMutatorMapAssign({
        MUTATOR_MAP_REF: getMutatorId(),
        KEY: key,
        VALUE: getValue(prop),
        KIND: t.identifier(prop.kind)
      }));
    }
    function loose(info) {
      for (var _iterator = info.computedProps,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref3;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref3 = _i.value;
        }
        var prop = _ref3;
        if (prop.kind === "get" || prop.kind === "set") {
          pushMutatorDefine(info, prop);
        } else {
          pushAssign(info.objId, prop, info.body);
        }
      }
    }
    function spec(info) {
      var objId = info.objId;
      var body = info.body;
      var computedProps = info.computedProps;
      var state = info.state;
      for (var _iterator2 = computedProps,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref4;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref4 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref4 = _i2.value;
        }
        var prop = _ref4;
        var key = t.toComputedKey(prop);
        if (prop.kind === "get" || prop.kind === "set") {
          pushMutatorDefine(info, prop);
        } else if (t.isStringLiteral(key, {value: "__proto__"})) {
          pushAssign(objId, prop, body);
        } else {
          if (computedProps.length === 1) {
            return t.callExpression(state.addHelper("defineProperty"), [info.initPropExpression, key, getValue(prop)]);
          } else {
            body.push(t.expressionStatement(t.callExpression(state.addHelper("defineProperty"), [objId, key, getValue(prop)])));
          }
        }
      }
    }
    return {visitor: {ObjectExpression: {exit: function exit(path, state) {
            var node = path.node;
            var parent = path.parent;
            var scope = path.scope;
            var hasComputed = false;
            for (var _iterator3 = node.properties,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
              var _ref5;
              if (_isArray3) {
                if (_i3 >= _iterator3.length)
                  break;
                _ref5 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done)
                  break;
                _ref5 = _i3.value;
              }
              var prop = _ref5;
              hasComputed = prop.computed === true;
              if (hasComputed)
                break;
            }
            if (!hasComputed)
              return;
            var initProps = [];
            var computedProps = [];
            var foundComputed = false;
            for (var _iterator4 = node.properties,
                _isArray4 = Array.isArray(_iterator4),
                _i4 = 0,
                _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
              var _ref6;
              if (_isArray4) {
                if (_i4 >= _iterator4.length)
                  break;
                _ref6 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done)
                  break;
                _ref6 = _i4.value;
              }
              var _prop = _ref6;
              if (_prop.computed) {
                foundComputed = true;
              }
              if (foundComputed) {
                computedProps.push(_prop);
              } else {
                initProps.push(_prop);
              }
            }
            var objId = scope.generateUidIdentifierBasedOnNode(parent);
            var initPropExpression = t.objectExpression(initProps);
            var body = [];
            body.push(t.variableDeclaration("var", [t.variableDeclarator(objId, initPropExpression)]));
            var callback = spec;
            if (state.opts.loose)
              callback = loose;
            var mutatorRef = void 0;
            var getMutatorId = function getMutatorId() {
              if (!mutatorRef) {
                mutatorRef = scope.generateUidIdentifier("mutatorMap");
                body.push(t.variableDeclaration("var", [t.variableDeclarator(mutatorRef, t.objectExpression([]))]));
              }
              return mutatorRef;
            };
            var single = callback({
              scope: scope,
              objId: objId,
              body: body,
              computedProps: computedProps,
              initPropExpression: initPropExpression,
              getMutatorId: getMutatorId,
              state: state
            });
            if (mutatorRef) {
              body.push(t.expressionStatement(t.callExpression(state.addHelper("defineEnumerableProperties"), [objId, mutatorRef])));
            }
            if (single) {
              path.replaceWith(single);
            } else {
              body.push(t.expressionStatement(objId));
              path.replaceWithMultiple(body);
            }
          }}}};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d4", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(_ref) {
    var messages = _ref.messages;
    var template = _ref.template;
    var t = _ref.types;
    var buildForOfArray = template("\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ");
    var buildForOfLoose = template("\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  ");
    var buildForOf = template("\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  ");
    function _ForOfStatementArray(path) {
      var node = path.node;
      var scope = path.scope;
      var nodes = [];
      var right = node.right;
      if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
        var uid = scope.generateUidIdentifier("arr");
        nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
        right = uid;
      }
      var iterationKey = scope.generateUidIdentifier("i");
      var loop = buildForOfArray({
        BODY: node.body,
        KEY: iterationKey,
        ARR: right
      });
      t.inherits(loop, node);
      t.ensureBlock(loop);
      var iterationValue = t.memberExpression(right, iterationKey, true);
      var left = node.left;
      if (t.isVariableDeclaration(left)) {
        left.declarations[0].init = iterationValue;
        loop.body.body.unshift(left);
      } else {
        loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
      }
      if (path.parentPath.isLabeledStatement()) {
        loop = t.labeledStatement(path.parentPath.node.label, loop);
      }
      nodes.push(loop);
      return nodes;
    }
    return {visitor: {ForOfStatement: function ForOfStatement(path, state) {
          if (path.get("right").isArrayExpression()) {
            return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));
          }
          var callback = spec;
          if (state.opts.loose)
            callback = loose;
          var node = path.node;
          var build = callback(path, state);
          var declar = build.declar;
          var loop = build.loop;
          var block = loop.body;
          path.ensureBlock();
          if (declar) {
            block.body.push(declar);
          }
          block.body = block.body.concat(node.body.body);
          t.inherits(loop, node);
          t.inherits(loop.body, node.body);
          if (build.replaceParent) {
            path.parentPath.replaceWithMultiple(build.node);
            path.remove();
          } else {
            path.replaceWithMultiple(build.node);
          }
        }}};
    function loose(path, file) {
      var node = path.node;
      var scope = path.scope;
      var left = node.left;
      var declar = void 0,
          id = void 0;
      if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
        id = left;
      } else if (t.isVariableDeclaration(left)) {
        id = scope.generateUidIdentifier("ref");
        declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
      } else {
        throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
      }
      var iteratorKey = scope.generateUidIdentifier("iterator");
      var isArrayKey = scope.generateUidIdentifier("isArray");
      var loop = buildForOfLoose({
        LOOP_OBJECT: iteratorKey,
        IS_ARRAY: isArrayKey,
        OBJECT: node.right,
        INDEX: scope.generateUidIdentifier("i"),
        ID: id
      });
      if (!declar) {
        loop.body.body.shift();
      }
      return {
        declar: declar,
        node: loop,
        loop: loop
      };
    }
    function spec(path, file) {
      var node = path.node;
      var scope = path.scope;
      var parent = path.parent;
      var left = node.left;
      var declar = void 0;
      var stepKey = scope.generateUidIdentifier("step");
      var stepValue = t.memberExpression(stepKey, t.identifier("value"));
      if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
        declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
      } else if (t.isVariableDeclaration(left)) {
        declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
      } else {
        throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
      }
      var iteratorKey = scope.generateUidIdentifier("iterator");
      var template = buildForOf({
        ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
        ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
        ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
        ITERATOR_KEY: iteratorKey,
        STEP_KEY: stepKey,
        OBJECT: node.right,
        BODY: null
      });
      var isLabeledParent = t.isLabeledStatement(parent);
      var tryBody = template[3].block.body;
      var loop = tryBody[0];
      if (isLabeledParent) {
        tryBody[0] = t.labeledStatement(parent.label, loop);
      }
      return {
        replaceParent: isLabeledParent,
        declar: declar,
        loop: loop,
        node: template
      };
    }
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("d5", ["d6", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {visitor: {RegExpLiteral: function RegExpLiteral(path) {
          var node = path.node;
          if (!regex.is(node, "y"))
            return;
          path.replaceWith(t.newExpression(t.identifier("RegExp"), [t.stringLiteral(node.pattern), t.stringLiteral(node.flags)]));
        }}};
  };
  var _babelHelperRegex = $__require('d6');
  var regex = _interopRequireWildcard(_babelHelperRegex);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

(function() {
var define = $__System.amdDefine;
;
(function() {
  'use strict';
  var objectTypes = {
    'function': true,
    'object': true
  };
  var root = (objectTypes[typeof window] && window) || this;
  var oldRoot = root;
  var freeExports = objectTypes[typeof exports] && exports;
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }
  var stringFromCharCode = String.fromCharCode;
  var floor = Math.floor;
  function fromCodePoint() {
    var MAX_SIZE = 0x4000;
    var codeUnits = [];
    var highSurrogate;
    var lowSurrogate;
    var index = -1;
    var length = arguments.length;
    if (!length) {
      return '';
    }
    var result = '';
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
        throw RangeError('Invalid code point: ' + codePoint);
      }
      if (codePoint <= 0xFFFF) {
        codeUnits.push(codePoint);
      } else {
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xD800;
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
        result += stringFromCharCode.apply(null, codeUnits);
        codeUnits.length = 0;
      }
    }
    return result;
  }
  function assertType(type, expected) {
    if (expected.indexOf('|') == -1) {
      if (type == expected) {
        return;
      }
      throw Error('Invalid node type: ' + type);
    }
    expected = assertType.hasOwnProperty(expected) ? assertType[expected] : (assertType[expected] = RegExp('^(?:' + expected + ')$'));
    if (expected.test(type)) {
      return;
    }
    throw Error('Invalid node type: ' + type);
  }
  function generate(node) {
    var type = node.type;
    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
      return generate[type](node);
    }
    throw Error('Invalid node type: ' + type);
  }
  function generateAlternative(node) {
    assertType(node.type, 'alternative');
    var terms = node.body,
        length = terms ? terms.length : 0;
    if (length == 1) {
      return generateTerm(terms[0]);
    } else {
      var i = -1,
          result = '';
      while (++i < length) {
        result += generateTerm(terms[i]);
      }
      return result;
    }
  }
  function generateAnchor(node) {
    assertType(node.type, 'anchor');
    switch (node.kind) {
      case 'start':
        return '^';
      case 'end':
        return '$';
      case 'boundary':
        return '\\b';
      case 'not-boundary':
        return '\\B';
      default:
        throw Error('Invalid assertion');
    }
  }
  function generateAtom(node) {
    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');
    return generate(node);
  }
  function generateCharacterClass(node) {
    assertType(node.type, 'characterClass');
    var classRanges = node.body,
        length = classRanges ? classRanges.length : 0;
    var i = -1,
        result = '[';
    if (node.negative) {
      result += '^';
    }
    while (++i < length) {
      result += generateClassAtom(classRanges[i]);
    }
    result += ']';
    return result;
  }
  function generateCharacterClassEscape(node) {
    assertType(node.type, 'characterClassEscape');
    return '\\' + node.value;
  }
  function generateCharacterClassRange(node) {
    assertType(node.type, 'characterClassRange');
    var min = node.min,
        max = node.max;
    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
      throw Error('Invalid character class range');
    }
    return generateClassAtom(min) + '-' + generateClassAtom(max);
  }
  function generateClassAtom(node) {
    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');
    return generate(node);
  }
  function generateDisjunction(node) {
    assertType(node.type, 'disjunction');
    var body = node.body,
        length = body ? body.length : 0;
    if (length == 0) {
      throw Error('No body');
    } else if (length == 1) {
      return generate(body[0]);
    } else {
      var i = -1,
          result = '';
      while (++i < length) {
        if (i != 0) {
          result += '|';
        }
        result += generate(body[i]);
      }
      return result;
    }
  }
  function generateDot(node) {
    assertType(node.type, 'dot');
    return '.';
  }
  function generateGroup(node) {
    assertType(node.type, 'group');
    var result = '(';
    switch (node.behavior) {
      case 'normal':
        break;
      case 'ignore':
        result += '?:';
        break;
      case 'lookahead':
        result += '?=';
        break;
      case 'negativeLookahead':
        result += '?!';
        break;
      default:
        throw Error('Invalid behaviour: ' + node.behaviour);
    }
    var body = node.body,
        length = body ? body.length : 0;
    if (length == 1) {
      result += generate(body[0]);
    } else {
      var i = -1;
      while (++i < length) {
        result += generate(body[i]);
      }
    }
    result += ')';
    return result;
  }
  function generateQuantifier(node) {
    assertType(node.type, 'quantifier');
    var quantifier = '',
        min = node.min,
        max = node.max;
    switch (max) {
      case undefined:
      case null:
        switch (min) {
          case 0:
            quantifier = '*';
            break;
          case 1:
            quantifier = '+';
            break;
          default:
            quantifier = '{' + min + ',}';
            break;
        }
        break;
      default:
        if (min == max) {
          quantifier = '{' + min + '}';
        } else if (min == 0 && max == 1) {
          quantifier = '?';
        } else {
          quantifier = '{' + min + ',' + max + '}';
        }
        break;
    }
    if (!node.greedy) {
      quantifier += '?';
    }
    return generateAtom(node.body[0]) + quantifier;
  }
  function generateReference(node) {
    assertType(node.type, 'reference');
    return '\\' + node.matchIndex;
  }
  function generateTerm(node) {
    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');
    return generate(node);
  }
  function generateValue(node) {
    assertType(node.type, 'value');
    var kind = node.kind,
        codePoint = node.codePoint;
    switch (kind) {
      case 'controlLetter':
        return '\\c' + fromCodePoint(codePoint + 64);
      case 'hexadecimalEscape':
        return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
      case 'identifier':
        return '\\' + fromCodePoint(codePoint);
      case 'null':
        return '\\' + codePoint;
      case 'octal':
        return '\\' + codePoint.toString(8);
      case 'singleEscape':
        switch (codePoint) {
          case 0x0008:
            return '\\b';
          case 0x009:
            return '\\t';
          case 0x00A:
            return '\\n';
          case 0x00B:
            return '\\v';
          case 0x00C:
            return '\\f';
          case 0x00D:
            return '\\r';
          default:
            throw Error('Invalid codepoint: ' + codePoint);
        }
      case 'symbol':
        return fromCodePoint(codePoint);
      case 'unicodeEscape':
        return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
      case 'unicodeCodePointEscape':
        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
      default:
        throw Error('Unsupported node kind: ' + kind);
    }
  }
  generate.alternative = generateAlternative;
  generate.anchor = generateAnchor;
  generate.characterClass = generateCharacterClass;
  generate.characterClassEscape = generateCharacterClassEscape;
  generate.characterClassRange = generateCharacterClassRange;
  generate.disjunction = generateDisjunction;
  generate.dot = generateDot;
  generate.group = generateGroup;
  generate.quantifier = generateQuantifier;
  generate.reference = generateReference;
  generate.value = generateValue;
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    define("d7", [], function() {
      return {'generate': generate};
    });
  } else if (freeExports && freeModule) {
    freeExports.generate = generate;
  } else {
    root.regjsgen = {'generate': generate};
  }
}.call(this));

})();
$__System.registerDynamic("d8", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    function parse(str, flags) {
      function addRaw(node) {
        node.raw = str.substring(node.range[0], node.range[1]);
        return node;
      }
      function updateRawStart(node, start) {
        node.range[0] = start;
        return addRaw(node);
      }
      function createAnchor(kind, rawLength) {
        return addRaw({
          type: 'anchor',
          kind: kind,
          range: [pos - rawLength, pos]
        });
      }
      function createValue(kind, codePoint, from, to) {
        return addRaw({
          type: 'value',
          kind: kind,
          codePoint: codePoint,
          range: [from, to]
        });
      }
      function createEscaped(kind, codePoint, value, fromOffset) {
        fromOffset = fromOffset || 0;
        return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
      }
      function createCharacter(matches) {
        var _char = matches[0];
        var first = _char.charCodeAt(0);
        if (hasUnicodeFlag) {
          var second;
          if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
            second = lookahead().charCodeAt(0);
            if (second >= 0xDC00 && second <= 0xDFFF) {
              pos++;
              return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
            }
          }
        }
        return createValue('symbol', first, pos - 1, pos);
      }
      function createDisjunction(alternatives, from, to) {
        return addRaw({
          type: 'disjunction',
          body: alternatives,
          range: [from, to]
        });
      }
      function createDot() {
        return addRaw({
          type: 'dot',
          range: [pos - 1, pos]
        });
      }
      function createCharacterClassEscape(value) {
        return addRaw({
          type: 'characterClassEscape',
          value: value,
          range: [pos - 2, pos]
        });
      }
      function createReference(matchIndex) {
        return addRaw({
          type: 'reference',
          matchIndex: parseInt(matchIndex, 10),
          range: [pos - 1 - matchIndex.length, pos]
        });
      }
      function createGroup(behavior, disjunction, from, to) {
        return addRaw({
          type: 'group',
          behavior: behavior,
          body: disjunction,
          range: [from, to]
        });
      }
      function createQuantifier(min, max, from, to) {
        if (to == null) {
          from = pos - 1;
          to = pos;
        }
        return addRaw({
          type: 'quantifier',
          min: min,
          max: max,
          greedy: true,
          body: null,
          range: [from, to]
        });
      }
      function createAlternative(terms, from, to) {
        return addRaw({
          type: 'alternative',
          body: terms,
          range: [from, to]
        });
      }
      function createCharacterClass(classRanges, negative, from, to) {
        return addRaw({
          type: 'characterClass',
          body: classRanges,
          negative: negative,
          range: [from, to]
        });
      }
      function createClassRange(min, max, from, to) {
        if (min.codePoint > max.codePoint) {
          bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
        }
        return addRaw({
          type: 'characterClassRange',
          min: min,
          max: max,
          range: [from, to]
        });
      }
      function flattenBody(body) {
        if (body.type === 'alternative') {
          return body.body;
        } else {
          return [body];
        }
      }
      function isEmpty(obj) {
        return obj.type === 'empty';
      }
      function incr(amount) {
        amount = (amount || 1);
        var res = str.substring(pos, pos + amount);
        pos += (amount || 1);
        return res;
      }
      function skip(value) {
        if (!match(value)) {
          bail('character', value);
        }
      }
      function match(value) {
        if (str.indexOf(value, pos) === pos) {
          return incr(value.length);
        }
      }
      function lookahead() {
        return str[pos];
      }
      function current(value) {
        return str.indexOf(value, pos) === pos;
      }
      function next(value) {
        return str[pos + 1] === value;
      }
      function matchReg(regExp) {
        var subStr = str.substring(pos);
        var res = subStr.match(regExp);
        if (res) {
          res.range = [];
          res.range[0] = pos;
          incr(res[0].length);
          res.range[1] = pos;
        }
        return res;
      }
      function parseDisjunction() {
        var res = [],
            from = pos;
        res.push(parseAlternative());
        while (match('|')) {
          res.push(parseAlternative());
        }
        if (res.length === 1) {
          return res[0];
        }
        return createDisjunction(res, from, pos);
      }
      function parseAlternative() {
        var res = [],
            from = pos;
        var term;
        while (term = parseTerm()) {
          res.push(term);
        }
        if (res.length === 1) {
          return res[0];
        }
        return createAlternative(res, from, pos);
      }
      function parseTerm() {
        if (pos >= str.length || current('|') || current(')')) {
          return null;
        }
        var anchor = parseAnchor();
        if (anchor) {
          return anchor;
        }
        var atom = parseAtom();
        if (!atom) {
          bail('Expected atom');
        }
        var quantifier = parseQuantifier() || false;
        if (quantifier) {
          quantifier.body = flattenBody(atom);
          updateRawStart(quantifier, atom.range[0]);
          return quantifier;
        }
        return atom;
      }
      function parseGroup(matchA, typeA, matchB, typeB) {
        var type = null,
            from = pos;
        if (match(matchA)) {
          type = typeA;
        } else if (match(matchB)) {
          type = typeB;
        } else {
          return false;
        }
        var body = parseDisjunction();
        if (!body) {
          bail('Expected disjunction');
        }
        skip(')');
        var group = createGroup(type, flattenBody(body), from, pos);
        if (type == 'normal') {
          if (firstIteration) {
            closedCaptureCounter++;
          }
        }
        return group;
      }
      function parseAnchor() {
        var res,
            from = pos;
        if (match('^')) {
          return createAnchor('start', 1);
        } else if (match('$')) {
          return createAnchor('end', 1);
        } else if (match('\\b')) {
          return createAnchor('boundary', 2);
        } else if (match('\\B')) {
          return createAnchor('not-boundary', 2);
        } else {
          return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
        }
      }
      function parseQuantifier() {
        var res,
            from = pos;
        var quantifier;
        var min,
            max;
        if (match('*')) {
          quantifier = createQuantifier(0);
        } else if (match('+')) {
          quantifier = createQuantifier(1);
        } else if (match('?')) {
          quantifier = createQuantifier(0, 1);
        } else if (res = matchReg(/^\{([0-9]+)\}/)) {
          min = parseInt(res[1], 10);
          quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
        } else if (res = matchReg(/^\{([0-9]+),\}/)) {
          min = parseInt(res[1], 10);
          quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
        } else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
          min = parseInt(res[1], 10);
          max = parseInt(res[2], 10);
          if (min > max) {
            bail('numbers out of order in {} quantifier', '', from, pos);
          }
          quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
        }
        if (quantifier) {
          if (match('?')) {
            quantifier.greedy = false;
            quantifier.range[1] += 1;
          }
        }
        return quantifier;
      }
      function parseAtom() {
        var res;
        if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
          return createCharacter(res);
        } else if (match('.')) {
          return createDot();
        } else if (match('\\')) {
          res = parseAtomEscape();
          if (!res) {
            bail('atomEscape');
          }
          return res;
        } else if (res = parseCharacterClass()) {
          return res;
        } else {
          return parseGroup('(?:', 'ignore', '(', 'normal');
        }
      }
      function parseUnicodeSurrogatePairEscape(firstEscape) {
        if (hasUnicodeFlag) {
          var first,
              second;
          if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\') && next('u')) {
            var prevPos = pos;
            pos++;
            var secondEscape = parseClassEscape();
            if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
              firstEscape.range[1] = secondEscape.range[1];
              firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
              firstEscape.type = 'value';
              firstEscape.kind = 'unicodeCodePointEscape';
              addRaw(firstEscape);
            } else {
              pos = prevPos;
            }
          }
        }
        return firstEscape;
      }
      function parseClassEscape() {
        return parseAtomEscape(true);
      }
      function parseAtomEscape(insideCharacterClass) {
        var res,
            from = pos;
        res = parseDecimalEscape();
        if (res) {
          return res;
        }
        if (insideCharacterClass) {
          if (match('b')) {
            return createEscaped('singleEscape', 0x0008, '\\b');
          } else if (match('B')) {
            bail('\\B not possible inside of CharacterClass', '', from);
          }
        }
        res = parseCharacterEscape();
        return res;
      }
      function parseDecimalEscape() {
        var res,
            match;
        if (res = matchReg(/^(?!0)\d+/)) {
          match = res[0];
          var refIdx = parseInt(res[0], 10);
          if (refIdx <= closedCaptureCounter) {
            return createReference(res[0]);
          } else {
            backrefDenied.push(refIdx);
            incr(-res[0].length);
            if (res = matchReg(/^[0-7]{1,3}/)) {
              return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
            } else {
              res = createCharacter(matchReg(/^[89]/));
              return updateRawStart(res, res.range[0] - 1);
            }
          }
        } else if (res = matchReg(/^[0-7]{1,3}/)) {
          match = res[0];
          if (/^0{1,3}$/.test(match)) {
            return createEscaped('null', 0x0000, '0', match.length + 1);
          } else {
            return createEscaped('octal', parseInt(match, 8), match, 1);
          }
        } else if (res = matchReg(/^[dDsSwW]/)) {
          return createCharacterClassEscape(res[0]);
        }
        return false;
      }
      function parseCharacterEscape() {
        var res;
        if (res = matchReg(/^[fnrtv]/)) {
          var codePoint = 0;
          switch (res[0]) {
            case 't':
              codePoint = 0x009;
              break;
            case 'n':
              codePoint = 0x00A;
              break;
            case 'v':
              codePoint = 0x00B;
              break;
            case 'f':
              codePoint = 0x00C;
              break;
            case 'r':
              codePoint = 0x00D;
              break;
          }
          return createEscaped('singleEscape', codePoint, '\\' + res[0]);
        } else if (res = matchReg(/^c([a-zA-Z])/)) {
          return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
        } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
          return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
        } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
          return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));
        } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
          return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
        } else {
          return parseIdentityEscape();
        }
      }
      function isIdentifierPart(ch) {
        var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');
        return (ch === 36) || (ch === 95) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || (ch >= 48 && ch <= 57) || (ch === 92) || ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
      }
      function parseIdentityEscape() {
        var ZWJ = '\u200C';
        var ZWNJ = '\u200D';
        var tmp;
        if (!isIdentifierPart(lookahead())) {
          tmp = incr();
          return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
        }
        if (match(ZWJ)) {
          return createEscaped('identifier', 0x200C, ZWJ);
        } else if (match(ZWNJ)) {
          return createEscaped('identifier', 0x200D, ZWNJ);
        }
        return null;
      }
      function parseCharacterClass() {
        var res,
            from = pos;
        if (res = matchReg(/^\[\^/)) {
          res = parseClassRanges();
          skip(']');
          return createCharacterClass(res, true, from, pos);
        } else if (match('[')) {
          res = parseClassRanges();
          skip(']');
          return createCharacterClass(res, false, from, pos);
        }
        return null;
      }
      function parseClassRanges() {
        var res;
        if (current(']')) {
          return [];
        } else {
          res = parseNonemptyClassRanges();
          if (!res) {
            bail('nonEmptyClassRanges');
          }
          return res;
        }
      }
      function parseHelperClassRanges(atom) {
        var from,
            to,
            res;
        if (current('-') && !next(']')) {
          skip('-');
          res = parseClassAtom();
          if (!res) {
            bail('classAtom');
          }
          to = pos;
          var classRanges = parseClassRanges();
          if (!classRanges) {
            bail('classRanges');
          }
          from = atom.range[0];
          if (classRanges.type === 'empty') {
            return [createClassRange(atom, res, from, to)];
          }
          return [createClassRange(atom, res, from, to)].concat(classRanges);
        }
        res = parseNonemptyClassRangesNoDash();
        if (!res) {
          bail('nonEmptyClassRangesNoDash');
        }
        return [atom].concat(res);
      }
      function parseNonemptyClassRanges() {
        var atom = parseClassAtom();
        if (!atom) {
          bail('classAtom');
        }
        if (current(']')) {
          return [atom];
        }
        return parseHelperClassRanges(atom);
      }
      function parseNonemptyClassRangesNoDash() {
        var res = parseClassAtom();
        if (!res) {
          bail('classAtom');
        }
        if (current(']')) {
          return res;
        }
        return parseHelperClassRanges(res);
      }
      function parseClassAtom() {
        if (match('-')) {
          return createCharacter('-');
        } else {
          return parseClassAtomNoDash();
        }
      }
      function parseClassAtomNoDash() {
        var res;
        if (res = matchReg(/^[^\\\]-]/)) {
          return createCharacter(res[0]);
        } else if (match('\\')) {
          res = parseClassEscape();
          if (!res) {
            bail('classEscape');
          }
          return parseUnicodeSurrogatePairEscape(res);
        }
      }
      function bail(message, details, from, to) {
        from = from == null ? pos : from;
        to = to == null ? from : to;
        var contextStart = Math.max(0, from - 10);
        var contextEnd = Math.min(to + 10, str.length);
        var context = '    ' + str.substring(contextStart, contextEnd);
        var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';
        throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
      }
      var backrefDenied = [];
      var closedCaptureCounter = 0;
      var firstIteration = true;
      var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
      var pos = 0;
      str = String(str);
      if (str === '') {
        str = '(?:)';
      }
      var result = parseDisjunction();
      if (result.range[1] !== str.length) {
        bail('Could not parse entire input - got stuck', '', result.range[1]);
      }
      for (var i = 0; i < backrefDenied.length; i++) {
        if (backrefDenied[i] <= closedCaptureCounter) {
          pos = 0;
          firstIteration = false;
          return parseDisjunction();
        }
      }
      return result;
    }
    var regjsparser = {parse: parse};
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = regjsparser;
    } else {
      window.regjsparser = regjsparser;
    }
  }());
  return module.exports;
});

$__System.registerDynamic("d9", [], false, function() {
  return {
    "75": 8490,
    "83": 383,
    "107": 8490,
    "115": 383,
    "181": 924,
    "197": 8491,
    "383": 83,
    "452": 453,
    "453": 452,
    "455": 456,
    "456": 455,
    "458": 459,
    "459": 458,
    "497": 498,
    "498": 497,
    "837": 8126,
    "914": 976,
    "917": 1013,
    "920": 1012,
    "921": 8126,
    "922": 1008,
    "924": 181,
    "928": 982,
    "929": 1009,
    "931": 962,
    "934": 981,
    "937": 8486,
    "962": 931,
    "976": 914,
    "977": 1012,
    "981": 934,
    "982": 928,
    "1008": 922,
    "1009": 929,
    "1012": [
      920,
      977
    ],
    "1013": 917,
    "7776": 7835,
    "7835": 7776,
    "8126": [
      837,
      921
    ],
    "8486": 937,
    "8490": 75,
    "8491": 197,
    "66560": 66600,
    "66561": 66601,
    "66562": 66602,
    "66563": 66603,
    "66564": 66604,
    "66565": 66605,
    "66566": 66606,
    "66567": 66607,
    "66568": 66608,
    "66569": 66609,
    "66570": 66610,
    "66571": 66611,
    "66572": 66612,
    "66573": 66613,
    "66574": 66614,
    "66575": 66615,
    "66576": 66616,
    "66577": 66617,
    "66578": 66618,
    "66579": 66619,
    "66580": 66620,
    "66581": 66621,
    "66582": 66622,
    "66583": 66623,
    "66584": 66624,
    "66585": 66625,
    "66586": 66626,
    "66587": 66627,
    "66588": 66628,
    "66589": 66629,
    "66590": 66630,
    "66591": 66631,
    "66592": 66632,
    "66593": 66633,
    "66594": 66634,
    "66595": 66635,
    "66596": 66636,
    "66597": 66637,
    "66598": 66638,
    "66599": 66639,
    "66600": 66560,
    "66601": 66561,
    "66602": 66562,
    "66603": 66563,
    "66604": 66564,
    "66605": 66565,
    "66606": 66566,
    "66607": 66567,
    "66608": 66568,
    "66609": 66569,
    "66610": 66570,
    "66611": 66571,
    "66612": 66572,
    "66613": 66573,
    "66614": 66574,
    "66615": 66575,
    "66616": 66576,
    "66617": 66577,
    "66618": 66578,
    "66619": 66579,
    "66620": 66580,
    "66621": 66581,
    "66622": 66582,
    "66623": 66583,
    "66624": 66584,
    "66625": 66585,
    "66626": 66586,
    "66627": 66587,
    "66628": 66588,
    "66629": 66589,
    "66630": 66590,
    "66631": 66591,
    "66632": 66592,
    "66633": 66593,
    "66634": 66594,
    "66635": 66595,
    "66636": 66596,
    "66637": 66597,
    "66638": 66598,
    "66639": 66599,
    "68736": 68800,
    "68737": 68801,
    "68738": 68802,
    "68739": 68803,
    "68740": 68804,
    "68741": 68805,
    "68742": 68806,
    "68743": 68807,
    "68744": 68808,
    "68745": 68809,
    "68746": 68810,
    "68747": 68811,
    "68748": 68812,
    "68749": 68813,
    "68750": 68814,
    "68751": 68815,
    "68752": 68816,
    "68753": 68817,
    "68754": 68818,
    "68755": 68819,
    "68756": 68820,
    "68757": 68821,
    "68758": 68822,
    "68759": 68823,
    "68760": 68824,
    "68761": 68825,
    "68762": 68826,
    "68763": 68827,
    "68764": 68828,
    "68765": 68829,
    "68766": 68830,
    "68767": 68831,
    "68768": 68832,
    "68769": 68833,
    "68770": 68834,
    "68771": 68835,
    "68772": 68836,
    "68773": 68837,
    "68774": 68838,
    "68775": 68839,
    "68776": 68840,
    "68777": 68841,
    "68778": 68842,
    "68779": 68843,
    "68780": 68844,
    "68781": 68845,
    "68782": 68846,
    "68783": 68847,
    "68784": 68848,
    "68785": 68849,
    "68786": 68850,
    "68800": 68736,
    "68801": 68737,
    "68802": 68738,
    "68803": 68739,
    "68804": 68740,
    "68805": 68741,
    "68806": 68742,
    "68807": 68743,
    "68808": 68744,
    "68809": 68745,
    "68810": 68746,
    "68811": 68747,
    "68812": 68748,
    "68813": 68749,
    "68814": 68750,
    "68815": 68751,
    "68816": 68752,
    "68817": 68753,
    "68818": 68754,
    "68819": 68755,
    "68820": 68756,
    "68821": 68757,
    "68822": 68758,
    "68823": 68759,
    "68824": 68760,
    "68825": 68761,
    "68826": 68762,
    "68827": 68763,
    "68828": 68764,
    "68829": 68765,
    "68830": 68766,
    "68831": 68767,
    "68832": 68768,
    "68833": 68769,
    "68834": 68770,
    "68835": 68771,
    "68836": 68772,
    "68837": 68773,
    "68838": 68774,
    "68839": 68775,
    "68840": 68776,
    "68841": 68777,
    "68842": 68778,
    "68843": 68779,
    "68844": 68780,
    "68845": 68781,
    "68846": 68782,
    "68847": 68783,
    "68848": 68784,
    "68849": 68785,
    "68850": 68786,
    "71840": 71872,
    "71841": 71873,
    "71842": 71874,
    "71843": 71875,
    "71844": 71876,
    "71845": 71877,
    "71846": 71878,
    "71847": 71879,
    "71848": 71880,
    "71849": 71881,
    "71850": 71882,
    "71851": 71883,
    "71852": 71884,
    "71853": 71885,
    "71854": 71886,
    "71855": 71887,
    "71856": 71888,
    "71857": 71889,
    "71858": 71890,
    "71859": 71891,
    "71860": 71892,
    "71861": 71893,
    "71862": 71894,
    "71863": 71895,
    "71864": 71896,
    "71865": 71897,
    "71866": 71898,
    "71867": 71899,
    "71868": 71900,
    "71869": 71901,
    "71870": 71902,
    "71871": 71903,
    "71872": 71840,
    "71873": 71841,
    "71874": 71842,
    "71875": 71843,
    "71876": 71844,
    "71877": 71845,
    "71878": 71846,
    "71879": 71847,
    "71880": 71848,
    "71881": 71849,
    "71882": 71850,
    "71883": 71851,
    "71884": 71852,
    "71885": 71853,
    "71886": 71854,
    "71887": 71855,
    "71888": 71856,
    "71889": 71857,
    "71890": 71858,
    "71891": 71859,
    "71892": 71860,
    "71893": 71861,
    "71894": 71862,
    "71895": 71863,
    "71896": 71864,
    "71897": 71865,
    "71898": 71866,
    "71899": 71867,
    "71900": 71868,
    "71901": 71869,
    "71902": 71870,
    "71903": 71871
  };
});

$__System.registerDynamic("da", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  ;
  (function(root) {
    var freeExports = typeof exports == 'object' && exports;
    var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
      root = freeGlobal;
    }
    var ERRORS = {
      'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' + 'to the `start` value.',
      'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
    };
    var HIGH_SURROGATE_MIN = 0xD800;
    var HIGH_SURROGATE_MAX = 0xDBFF;
    var LOW_SURROGATE_MIN = 0xDC00;
    var LOW_SURROGATE_MAX = 0xDFFF;
    var regexNull = /\\x00([^0123456789]|$)/g;
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var extend = function(destination, source) {
      var key;
      for (key in source) {
        if (hasOwnProperty.call(source, key)) {
          destination[key] = source[key];
        }
      }
      return destination;
    };
    var forEach = function(array, callback) {
      var index = -1;
      var length = array.length;
      while (++index < length) {
        callback(array[index], index);
      }
    };
    var toString = object.toString;
    var isArray = function(value) {
      return toString.call(value) == '[object Array]';
    };
    var isNumber = function(value) {
      return typeof value == 'number' || toString.call(value) == '[object Number]';
    };
    var zeroes = '0000';
    var pad = function(number, totalCharacters) {
      var string = String(number);
      return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
    };
    var hex = function(number) {
      return Number(number).toString(16).toUpperCase();
    };
    var slice = [].slice;
    var dataFromCodePoints = function(codePoints) {
      var index = -1;
      var length = codePoints.length;
      var max = length - 1;
      var result = [];
      var isStart = true;
      var tmp;
      var previous = 0;
      while (++index < length) {
        tmp = codePoints[index];
        if (isStart) {
          result.push(tmp);
          previous = tmp;
          isStart = false;
        } else {
          if (tmp == previous + 1) {
            if (index != max) {
              previous = tmp;
              continue;
            } else {
              isStart = true;
              result.push(tmp + 1);
            }
          } else {
            result.push(previous + 1, tmp);
            previous = tmp;
          }
        }
      }
      if (!isStart) {
        result.push(tmp + 1);
      }
      return result;
    };
    var dataRemove = function(data, codePoint) {
      var index = 0;
      var start;
      var end;
      var length = data.length;
      while (index < length) {
        start = data[index];
        end = data[index + 1];
        if (codePoint >= start && codePoint < end) {
          if (codePoint == start) {
            if (end == start + 1) {
              data.splice(index, 2);
              return data;
            } else {
              data[index] = codePoint + 1;
              return data;
            }
          } else if (codePoint == end - 1) {
            data[index + 1] = codePoint;
            return data;
          } else {
            data.splice(index, 2, start, codePoint, codePoint + 1, end);
            return data;
          }
        }
        index += 2;
      }
      return data;
    };
    var dataRemoveRange = function(data, rangeStart, rangeEnd) {
      if (rangeEnd < rangeStart) {
        throw Error(ERRORS.rangeOrder);
      }
      var index = 0;
      var start;
      var end;
      while (index < data.length) {
        start = data[index];
        end = data[index + 1] - 1;
        if (start > rangeEnd) {
          return data;
        }
        if (rangeStart <= start && rangeEnd >= end) {
          data.splice(index, 2);
          continue;
        }
        if (rangeStart >= start && rangeEnd < end) {
          if (rangeStart == start) {
            data[index] = rangeEnd + 1;
            data[index + 1] = end + 1;
            return data;
          }
          data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
          return data;
        }
        if (rangeStart >= start && rangeStart <= end) {
          data[index + 1] = rangeStart;
        } else if (rangeEnd >= start && rangeEnd <= end) {
          data[index] = rangeEnd + 1;
          return data;
        }
        index += 2;
      }
      return data;
    };
    var dataAdd = function(data, codePoint) {
      var index = 0;
      var start;
      var end;
      var lastIndex = null;
      var length = data.length;
      if (codePoint < 0x0 || codePoint > 0x10FFFF) {
        throw RangeError(ERRORS.codePointRange);
      }
      while (index < length) {
        start = data[index];
        end = data[index + 1];
        if (codePoint >= start && codePoint < end) {
          return data;
        }
        if (codePoint == start - 1) {
          data[index] = codePoint;
          return data;
        }
        if (start > codePoint) {
          data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
          return data;
        }
        if (codePoint == end) {
          if (codePoint + 1 == data[index + 2]) {
            data.splice(index, 4, start, data[index + 3]);
            return data;
          }
          data[index + 1] = codePoint + 1;
          return data;
        }
        lastIndex = index;
        index += 2;
      }
      data.push(codePoint, codePoint + 1);
      return data;
    };
    var dataAddData = function(dataA, dataB) {
      var index = 0;
      var start;
      var end;
      var data = dataA.slice();
      var length = dataB.length;
      while (index < length) {
        start = dataB[index];
        end = dataB[index + 1] - 1;
        if (start == end) {
          data = dataAdd(data, start);
        } else {
          data = dataAddRange(data, start, end);
        }
        index += 2;
      }
      return data;
    };
    var dataRemoveData = function(dataA, dataB) {
      var index = 0;
      var start;
      var end;
      var data = dataA.slice();
      var length = dataB.length;
      while (index < length) {
        start = dataB[index];
        end = dataB[index + 1] - 1;
        if (start == end) {
          data = dataRemove(data, start);
        } else {
          data = dataRemoveRange(data, start, end);
        }
        index += 2;
      }
      return data;
    };
    var dataAddRange = function(data, rangeStart, rangeEnd) {
      if (rangeEnd < rangeStart) {
        throw Error(ERRORS.rangeOrder);
      }
      if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
        throw RangeError(ERRORS.codePointRange);
      }
      var index = 0;
      var start;
      var end;
      var added = false;
      var length = data.length;
      while (index < length) {
        start = data[index];
        end = data[index + 1];
        if (added) {
          if (start == rangeEnd + 1) {
            data.splice(index - 1, 2);
            return data;
          }
          if (start > rangeEnd) {
            return data;
          }
          if (start >= rangeStart && start <= rangeEnd) {
            if (end > rangeStart && end - 1 <= rangeEnd) {
              data.splice(index, 2);
              index -= 2;
            } else {
              data.splice(index - 1, 2);
              index -= 2;
            }
          }
        } else if (start == rangeEnd + 1) {
          data[index] = rangeStart;
          return data;
        } else if (start > rangeEnd) {
          data.splice(index, 0, rangeStart, rangeEnd + 1);
          return data;
        } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
          return data;
        } else if ((rangeStart >= start && rangeStart < end) || end == rangeStart) {
          data[index + 1] = rangeEnd + 1;
          added = true;
        } else if (rangeStart <= start && rangeEnd + 1 >= end) {
          data[index] = rangeStart;
          data[index + 1] = rangeEnd + 1;
          added = true;
        }
        index += 2;
      }
      if (!added) {
        data.push(rangeStart, rangeEnd + 1);
      }
      return data;
    };
    var dataContains = function(data, codePoint) {
      var index = 0;
      var length = data.length;
      var start = data[index];
      var end = data[length - 1];
      if (length >= 2) {
        if (codePoint < start || codePoint > end) {
          return false;
        }
      }
      while (index < length) {
        start = data[index];
        end = data[index + 1];
        if (codePoint >= start && codePoint < end) {
          return true;
        }
        index += 2;
      }
      return false;
    };
    var dataIntersection = function(data, codePoints) {
      var index = 0;
      var length = codePoints.length;
      var codePoint;
      var result = [];
      while (index < length) {
        codePoint = codePoints[index];
        if (dataContains(data, codePoint)) {
          result.push(codePoint);
        }
        ++index;
      }
      return dataFromCodePoints(result);
    };
    var dataIsEmpty = function(data) {
      return !data.length;
    };
    var dataIsSingleton = function(data) {
      return data.length == 2 && data[0] + 1 == data[1];
    };
    var dataToArray = function(data) {
      var index = 0;
      var start;
      var end;
      var result = [];
      var length = data.length;
      while (index < length) {
        start = data[index];
        end = data[index + 1];
        while (start < end) {
          result.push(start);
          ++start;
        }
        index += 2;
      }
      return result;
    };
    var floor = Math.floor;
    var highSurrogate = function(codePoint) {
      return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
    };
    var lowSurrogate = function(codePoint) {
      return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
    };
    var stringFromCharCode = String.fromCharCode;
    var codePointToString = function(codePoint) {
      var string;
      if (codePoint == 0x09) {
        string = '\\t';
      } else if (codePoint == 0x0A) {
        string = '\\n';
      } else if (codePoint == 0x0C) {
        string = '\\f';
      } else if (codePoint == 0x0D) {
        string = '\\r';
      } else if (codePoint == 0x5C) {
        string = '\\\\';
      } else if (codePoint == 0x24 || (codePoint >= 0x28 && codePoint <= 0x2B) || codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F || (codePoint >= 0x5B && codePoint <= 0x5E) || (codePoint >= 0x7B && codePoint <= 0x7D)) {
        string = '\\' + stringFromCharCode(codePoint);
      } else if (codePoint >= 0x20 && codePoint <= 0x7E) {
        string = stringFromCharCode(codePoint);
      } else if (codePoint <= 0xFF) {
        string = '\\x' + pad(hex(codePoint), 2);
      } else {
        string = '\\u' + pad(hex(codePoint), 4);
      }
      return string;
    };
    var symbolToCodePoint = function(symbol) {
      var length = symbol.length;
      var first = symbol.charCodeAt(0);
      var second;
      if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1) {
        second = symbol.charCodeAt(1);
        return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
      }
      return first;
    };
    var createBMPCharacterClasses = function(data) {
      var result = '';
      var index = 0;
      var start;
      var end;
      var length = data.length;
      if (dataIsSingleton(data)) {
        return codePointToString(data[0]);
      }
      while (index < length) {
        start = data[index];
        end = data[index + 1] - 1;
        if (start == end) {
          result += codePointToString(start);
        } else if (start + 1 == end) {
          result += codePointToString(start) + codePointToString(end);
        } else {
          result += codePointToString(start) + '-' + codePointToString(end);
        }
        index += 2;
      }
      return '[' + result + ']';
    };
    var splitAtBMP = function(data) {
      var loneHighSurrogates = [];
      var loneLowSurrogates = [];
      var bmp = [];
      var astral = [];
      var index = 0;
      var start;
      var end;
      var length = data.length;
      while (index < length) {
        start = data[index];
        end = data[index + 1] - 1;
        if (start < HIGH_SURROGATE_MIN) {
          if (end < HIGH_SURROGATE_MIN) {
            bmp.push(start, end + 1);
          }
          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
            bmp.push(start, HIGH_SURROGATE_MIN);
            loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
          }
          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
            bmp.push(start, HIGH_SURROGATE_MIN);
            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
          }
          if (end > LOW_SURROGATE_MAX) {
            bmp.push(start, HIGH_SURROGATE_MIN);
            loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
            if (end <= 0xFFFF) {
              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
            } else {
              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
              astral.push(0xFFFF + 1, end + 1);
            }
          }
        } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
          if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
            loneHighSurrogates.push(start, end + 1);
          }
          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
            loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
          }
          if (end > LOW_SURROGATE_MAX) {
            loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
            loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
            if (end <= 0xFFFF) {
              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
            } else {
              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
              astral.push(0xFFFF + 1, end + 1);
            }
          }
        } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
          if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
            loneLowSurrogates.push(start, end + 1);
          }
          if (end > LOW_SURROGATE_MAX) {
            loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
            if (end <= 0xFFFF) {
              bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
            } else {
              bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
              astral.push(0xFFFF + 1, end + 1);
            }
          }
        } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
          if (end <= 0xFFFF) {
            bmp.push(start, end + 1);
          } else {
            bmp.push(start, 0xFFFF + 1);
            astral.push(0xFFFF + 1, end + 1);
          }
        } else {
          astral.push(start, end + 1);
        }
        index += 2;
      }
      return {
        'loneHighSurrogates': loneHighSurrogates,
        'loneLowSurrogates': loneLowSurrogates,
        'bmp': bmp,
        'astral': astral
      };
    };
    var optimizeSurrogateMappings = function(surrogateMappings) {
      var result = [];
      var tmpLow = [];
      var addLow = false;
      var mapping;
      var nextMapping;
      var highSurrogates;
      var lowSurrogates;
      var nextHighSurrogates;
      var nextLowSurrogates;
      var index = -1;
      var length = surrogateMappings.length;
      while (++index < length) {
        mapping = surrogateMappings[index];
        nextMapping = surrogateMappings[index + 1];
        if (!nextMapping) {
          result.push(mapping);
          continue;
        }
        highSurrogates = mapping[0];
        lowSurrogates = mapping[1];
        nextHighSurrogates = nextMapping[0];
        nextLowSurrogates = nextMapping[1];
        tmpLow = lowSurrogates;
        while (nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]) {
          if (dataIsSingleton(nextLowSurrogates)) {
            tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
          } else {
            tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
          }
          ++index;
          mapping = surrogateMappings[index];
          highSurrogates = mapping[0];
          lowSurrogates = mapping[1];
          nextMapping = surrogateMappings[index + 1];
          nextHighSurrogates = nextMapping && nextMapping[0];
          nextLowSurrogates = nextMapping && nextMapping[1];
          addLow = true;
        }
        result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
        addLow = false;
      }
      return optimizeByLowSurrogates(result);
    };
    var optimizeByLowSurrogates = function(surrogateMappings) {
      if (surrogateMappings.length == 1) {
        return surrogateMappings;
      }
      var index = -1;
      var innerIndex = -1;
      while (++index < surrogateMappings.length) {
        var mapping = surrogateMappings[index];
        var lowSurrogates = mapping[1];
        var lowSurrogateStart = lowSurrogates[0];
        var lowSurrogateEnd = lowSurrogates[1];
        innerIndex = index;
        while (++innerIndex < surrogateMappings.length) {
          var otherMapping = surrogateMappings[innerIndex];
          var otherLowSurrogates = otherMapping[1];
          var otherLowSurrogateStart = otherLowSurrogates[0];
          var otherLowSurrogateEnd = otherLowSurrogates[1];
          if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd) {
            if (dataIsSingleton(otherMapping[0])) {
              mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
            } else {
              mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
            }
            surrogateMappings.splice(innerIndex, 1);
            --innerIndex;
          }
        }
      }
      return surrogateMappings;
    };
    var surrogateSet = function(data) {
      if (!data.length) {
        return [];
      }
      var index = 0;
      var start;
      var end;
      var startHigh;
      var startLow;
      var prevStartHigh = 0;
      var prevEndHigh = 0;
      var tmpLow = [];
      var endHigh;
      var endLow;
      var surrogateMappings = [];
      var length = data.length;
      var dataHigh = [];
      while (index < length) {
        start = data[index];
        end = data[index + 1] - 1;
        startHigh = highSurrogate(start);
        startLow = lowSurrogate(start);
        endHigh = highSurrogate(end);
        endLow = lowSurrogate(end);
        var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
        var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
        var complete = false;
        if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
          surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]);
          complete = true;
        } else {
          surrogateMappings.push([[startHigh, startHigh + 1], [startLow, LOW_SURROGATE_MAX + 1]]);
        }
        if (!complete && startHigh + 1 < endHigh) {
          if (endsWithHighestLowSurrogate) {
            surrogateMappings.push([[startHigh + 1, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
            complete = true;
          } else {
            surrogateMappings.push([[startHigh + 1, endHigh], [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]]);
          }
        }
        if (!complete) {
          surrogateMappings.push([[endHigh, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
        }
        prevStartHigh = startHigh;
        prevEndHigh = endHigh;
        index += 2;
      }
      return optimizeSurrogateMappings(surrogateMappings);
    };
    var createSurrogateCharacterClasses = function(surrogateMappings) {
      var result = [];
      forEach(surrogateMappings, function(surrogateMapping) {
        var highSurrogates = surrogateMapping[0];
        var lowSurrogates = surrogateMapping[1];
        result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
      });
      return result.join('|');
    };
    var createCharacterClassesFromData = function(data, bmpOnly) {
      var result = [];
      var parts = splitAtBMP(data);
      var loneHighSurrogates = parts.loneHighSurrogates;
      var loneLowSurrogates = parts.loneLowSurrogates;
      var bmp = parts.bmp;
      var astral = parts.astral;
      var hasAstral = !dataIsEmpty(parts.astral);
      var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
      var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
      var surrogateMappings = surrogateSet(astral);
      if (bmpOnly) {
        bmp = dataAddData(bmp, loneHighSurrogates);
        hasLoneHighSurrogates = false;
        bmp = dataAddData(bmp, loneLowSurrogates);
        hasLoneLowSurrogates = false;
      }
      if (!dataIsEmpty(bmp)) {
        result.push(createBMPCharacterClasses(bmp));
      }
      if (surrogateMappings.length) {
        result.push(createSurrogateCharacterClasses(surrogateMappings));
      }
      if (hasLoneHighSurrogates) {
        result.push(createBMPCharacterClasses(loneHighSurrogates) + '(?![\\uDC00-\\uDFFF])');
      }
      if (hasLoneLowSurrogates) {
        result.push('(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));
      }
      return result.join('|');
    };
    var regenerate = function(value) {
      if (arguments.length > 1) {
        value = slice.call(arguments);
      }
      if (this instanceof regenerate) {
        this.data = [];
        return value ? this.add(value) : this;
      }
      return (new regenerate).add(value);
    };
    regenerate.version = '1.2.0';
    var proto = regenerate.prototype;
    extend(proto, {
      'add': function(value) {
        var $this = this;
        if (value == null) {
          return $this;
        }
        if (value instanceof regenerate) {
          $this.data = dataAddData($this.data, value.data);
          return $this;
        }
        if (arguments.length > 1) {
          value = slice.call(arguments);
        }
        if (isArray(value)) {
          forEach(value, function(item) {
            $this.add(item);
          });
          return $this;
        }
        $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
        return $this;
      },
      'remove': function(value) {
        var $this = this;
        if (value == null) {
          return $this;
        }
        if (value instanceof regenerate) {
          $this.data = dataRemoveData($this.data, value.data);
          return $this;
        }
        if (arguments.length > 1) {
          value = slice.call(arguments);
        }
        if (isArray(value)) {
          forEach(value, function(item) {
            $this.remove(item);
          });
          return $this;
        }
        $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
        return $this;
      },
      'addRange': function(start, end) {
        var $this = this;
        $this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
        return $this;
      },
      'removeRange': function(start, end) {
        var $this = this;
        var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
        var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
        $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
        return $this;
      },
      'intersection': function(argument) {
        var $this = this;
        var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
        $this.data = dataIntersection($this.data, array);
        return $this;
      },
      'contains': function(codePoint) {
        return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
      },
      'clone': function() {
        var set = new regenerate;
        set.data = this.data.slice(0);
        return set;
      },
      'toString': function(options) {
        var result = createCharacterClassesFromData(this.data, options ? options.bmpOnly : false);
        return result.replace(regexNull, '\\0$1');
      },
      'toRegExp': function(flags) {
        return RegExp(this.toString(), flags || '');
      },
      'valueOf': function() {
        return dataToArray(this.data);
      }
    });
    proto.toArray = proto.valueOf;
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      define(function() {
        return regenerate;
      });
    } else if (freeExports && !freeExports.nodeType) {
      if (freeModule) {
        freeModule.exports = regenerate;
      } else {
        freeExports.regenerate = regenerate;
      }
    } else {
      root.regenerate = regenerate;
    }
  }(this));
  return module.exports;
});

$__System.registerDynamic("db", ["da"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var regenerate = $__require('da');
  exports.REGULAR = {
    'd': regenerate().addRange(0x30, 0x39),
    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF),
    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0xFFFF),
    'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
    'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)
  };
  exports.UNICODE = {
    'd': regenerate().addRange(0x30, 0x39),
    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
    'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
    'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
  };
  exports.UNICODE_IGNORE_CASE = {
    'd': regenerate().addRange(0x30, 0x39),
    'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
    's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
    'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
    'w': regenerate(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
    'W': regenerate(0x4B, 0x53, 0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
  };
  return module.exports;
});

$__System.registerDynamic("dc", ["d7", "d8", "da", "d9", "db"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var generate = $__require('d7').generate;
  var parse = $__require('d8').parse;
  var regenerate = $__require('da');
  var iuMappings = $__require('d9');
  var ESCAPE_SETS = $__require('db');
  function getCharacterClassEscapeSet(character) {
    if (unicode) {
      if (ignoreCase) {
        return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
      }
      return ESCAPE_SETS.UNICODE[character];
    }
    return ESCAPE_SETS.REGULAR[character];
  }
  var object = {};
  var hasOwnProperty = object.hasOwnProperty;
  function has(object, property) {
    return hasOwnProperty.call(object, property);
  }
  var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
  var BMP_SET = regenerate().addRange(0x0, 0xFFFF);
  var DOT_SET_UNICODE = UNICODE_SET.clone().remove(0x000A, 0x000D, 0x2028, 0x2029);
  var DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);
  regenerate.prototype.iuAddRange = function(min, max) {
    var $this = this;
    do {
      var folded = caseFold(min);
      if (folded) {
        $this.add(folded);
      }
    } while (++min <= max);
    return $this;
  };
  function assign(target, source) {
    for (var key in source) {
      target[key] = source[key];
    }
  }
  function update(item, pattern) {
    if (!pattern) {
      return;
    }
    var tree = parse(pattern, '');
    switch (tree.type) {
      case 'characterClass':
      case 'group':
      case 'value':
        break;
      default:
        tree = wrap(tree, pattern);
    }
    assign(item, tree);
  }
  function wrap(tree, pattern) {
    return {
      'type': 'group',
      'behavior': 'ignore',
      'body': [tree],
      'raw': '(?:' + pattern + ')'
    };
  }
  function caseFold(codePoint) {
    return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
  }
  var ignoreCase = false;
  var unicode = false;
  function processCharacterClass(characterClassItem) {
    var set = regenerate();
    var body = characterClassItem.body.forEach(function(item) {
      switch (item.type) {
        case 'value':
          set.add(item.codePoint);
          if (ignoreCase && unicode) {
            var folded = caseFold(item.codePoint);
            if (folded) {
              set.add(folded);
            }
          }
          break;
        case 'characterClassRange':
          var min = item.min.codePoint;
          var max = item.max.codePoint;
          set.addRange(min, max);
          if (ignoreCase && unicode) {
            set.iuAddRange(min, max);
          }
          break;
        case 'characterClassEscape':
          set.add(getCharacterClassEscapeSet(item.value));
          break;
        default:
          throw Error('Unknown term type: ' + item.type);
      }
    });
    if (characterClassItem.negative) {
      set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
    }
    update(characterClassItem, set.toString());
    return characterClassItem;
  }
  function processTerm(item) {
    switch (item.type) {
      case 'dot':
        update(item, (unicode ? DOT_SET_UNICODE : DOT_SET).toString());
        break;
      case 'characterClass':
        item = processCharacterClass(item);
        break;
      case 'characterClassEscape':
        update(item, getCharacterClassEscapeSet(item.value).toString());
        break;
      case 'alternative':
      case 'disjunction':
      case 'group':
      case 'quantifier':
        item.body = item.body.map(processTerm);
        break;
      case 'value':
        var codePoint = item.codePoint;
        var set = regenerate(codePoint);
        if (ignoreCase && unicode) {
          var folded = caseFold(codePoint);
          if (folded) {
            set.add(folded);
          }
        }
        update(item, set.toString());
        break;
      case 'anchor':
      case 'empty':
      case 'group':
      case 'reference':
        break;
      default:
        throw Error('Unknown term type: ' + item.type);
    }
    return item;
  }
  ;
  module.exports = function(pattern, flags) {
    var tree = parse(pattern, flags);
    ignoreCase = flags ? flags.indexOf('i') > -1 : false;
    unicode = flags ? flags.indexOf('u') > -1 : false;
    assign(tree, processTerm(tree));
    return generate(tree);
  };
  return module.exports;
});

$__System.registerDynamic("dd", ["de"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIndexOf = $__require('de');
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function pull() {
    var args = arguments,
        array = args[0];
    if (!(array && array.length)) {
      return array;
    }
    var index = 0,
        indexOf = baseIndexOf,
        length = args.length;
    while (++index < length) {
      var fromIndex = 0,
          value = args[index];
      while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
        splice.call(array, fromIndex, 1);
      }
    }
    return array;
  }
  module.exports = pull;
  return module.exports;
});

$__System.registerDynamic("d6", ["dd", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.is = is;
  exports.pullFlag = pullFlag;
  var _pull = $__require('dd');
  var _pull2 = _interopRequireDefault(_pull);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function is(node, flag) {
    return t.isRegExpLiteral(node) && node.flags.indexOf(flag) >= 0;
  }
  function pullFlag(node, flag) {
    var flags = node.flags.split("");
    if (node.flags.indexOf(flag) < 0)
      return;
    (0, _pull2.default)(flags, flag);
    node.flags = flags.join("");
  }
  return module.exports;
});

$__System.registerDynamic("df", ["dc", "d6"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return {visitor: {RegExpLiteral: function RegExpLiteral(_ref) {
          var node = _ref.node;
          if (!regex.is(node, "u"))
            return;
          node.pattern = (0, _regexpuCore2.default)(node.pattern, node.flags);
          regex.pullFlag(node, "u");
        }}};
  };
  var _regexpuCore = $__require('dc');
  var _regexpuCore2 = _interopRequireDefault(_regexpuCore);
  var _babelHelperRegex = $__require('d6');
  var regex = _interopRequireWildcard(_babelHelperRegex);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e0", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var messages = _ref.messages;
    return {visitor: {Scope: function Scope(_ref2) {
          var scope = _ref2.scope;
          for (var name in scope.bindings) {
            var binding = scope.bindings[name];
            if (binding.kind !== "const" && binding.kind !== "module")
              continue;
            for (var _iterator = binding.constantViolations,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
              var _ref3;
              if (_isArray) {
                if (_i >= _iterator.length)
                  break;
                _ref3 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done)
                  break;
                _ref3 = _i.value;
              }
              var violation = _ref3;
              throw violation.buildCodeFrameError(messages.get("readOnly", name));
            }
          }
        }}};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e1", ["f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function getSpreadLiteral(spread, scope, state) {
      if (state.opts.loose && !t.isIdentifier(spread.argument, {name: "arguments"})) {
        return spread.argument;
      } else {
        return scope.toArray(spread.argument, true);
      }
    }
    function hasSpread(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        if (t.isSpreadElement(nodes[i])) {
          return true;
        }
      }
      return false;
    }
    function build(props, scope, state) {
      var nodes = [];
      var _props = [];
      function push() {
        if (!_props.length)
          return;
        nodes.push(t.arrayExpression(_props));
        _props = [];
      }
      for (var _iterator = props,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref2;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref2 = _i.value;
        }
        var prop = _ref2;
        if (t.isSpreadElement(prop)) {
          push();
          nodes.push(getSpreadLiteral(prop, scope, state));
        } else {
          _props.push(prop);
        }
      }
      push();
      return nodes;
    }
    return {visitor: {
        ArrayExpression: function ArrayExpression(path, state) {
          var node = path.node;
          var scope = path.scope;
          var elements = node.elements;
          if (!hasSpread(elements))
            return;
          var nodes = build(elements, scope, state);
          var first = nodes.shift();
          if (!t.isArrayExpression(first)) {
            nodes.unshift(first);
            first = t.arrayExpression([]);
          }
          path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
        },
        CallExpression: function CallExpression(path, state) {
          var node = path.node;
          var scope = path.scope;
          var args = node.arguments;
          if (!hasSpread(args))
            return;
          var calleePath = path.get("callee");
          if (calleePath.isSuper())
            return;
          var contextLiteral = t.identifier("undefined");
          node.arguments = [];
          var nodes = void 0;
          if (args.length === 1 && args[0].argument.name === "arguments") {
            nodes = [args[0].argument];
          } else {
            nodes = build(args, scope, state);
          }
          var first = nodes.shift();
          if (nodes.length) {
            node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
          } else {
            node.arguments.push(first);
          }
          var callee = node.callee;
          if (calleePath.isMemberExpression()) {
            var temp = scope.maybeGenerateMemoised(callee.object);
            if (temp) {
              callee.object = t.assignmentExpression("=", temp, callee.object);
              contextLiteral = temp;
            } else {
              contextLiteral = callee.object;
            }
            t.appendToMemberExpression(callee, t.identifier("apply"));
          } else {
            node.callee = t.memberExpression(node.callee, t.identifier("apply"));
          }
          if (t.isSuper(contextLiteral)) {
            contextLiteral = t.thisExpression();
          }
          node.arguments.unshift(contextLiteral);
        },
        NewExpression: function NewExpression(path, state) {
          var node = path.node;
          var scope = path.scope;
          var args = node.arguments;
          if (!hasSpread(args))
            return;
          var nodes = build(args, scope, state);
          var context = t.arrayExpression([t.nullLiteral()]);
          args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);
          path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Function"), t.identifier("prototype")), t.identifier("bind")), t.identifier("apply")), [node.callee, args]), []));
        }
      }};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e2", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.visitor = undefined;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var visitor = exports.visitor = {Function: function Function(path) {
      var params = path.get("params");
      var hoistTweak = t.isRestElement(params[params.length - 1]) ? 1 : 0;
      var outputParamsLength = params.length - hoistTweak;
      for (var i = 0; i < outputParamsLength; i++) {
        var param = params[i];
        if (param.isArrayPattern() || param.isObjectPattern()) {
          var uid = path.scope.generateUidIdentifier("ref");
          var declar = t.variableDeclaration("let", [t.variableDeclarator(param.node, uid)]);
          declar._blockHoist = outputParamsLength - i;
          path.ensureBlock();
          path.get("body").unshiftContainer("body", declar);
          param.replaceWith(uid);
        }
      }
    }};
  return module.exports;
});

$__System.registerDynamic("cf", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(node) {
    var params = node.params;
    for (var i = 0; i < params.length; i++) {
      var param = params[i];
      if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
        return i;
      }
    }
    return params.length;
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("a8", ["f", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(path, emit) {
    var kind = arguments.length <= 2 || arguments[2] === undefined ? "var" : arguments[2];
    path.traverse(visitor, {
      kind: kind,
      emit: emit
    });
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var visitor = {
    Scope: function Scope(path, state) {
      if (state.kind === "let")
        path.skip();
    },
    Function: function Function(path) {
      path.skip();
    },
    VariableDeclaration: function VariableDeclaration(path, state) {
      if (state.kind && path.node.kind !== state.kind)
        return;
      var nodes = [];
      var declarations = path.get("declarations");
      var firstId = void 0;
      for (var _iterator = declarations,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var declar = _ref;
        firstId = declar.node.id;
        if (declar.node.init) {
          nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.node.id, declar.node.init)));
        }
        for (var name in declar.getBindingIdentifiers()) {
          state.emit(t.identifier(name), name);
        }
      }
      if (path.parentPath.isFor({left: path.node})) {
        path.replaceWith(firstId);
      } else {
        path.replaceWithMultiple(nodes);
      }
    }
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e3", ["a8", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(path) {
    var scope = arguments.length <= 1 || arguments[1] === undefined ? path.scope : arguments[1];
    var node = path.node;
    var container = t.functionExpression(null, [], node.body, node.generator, node.async);
    var callee = container;
    var args = [];
    (0, _babelHelperHoistVariables2.default)(path, function(id) {
      return scope.push({id: id});
    });
    var state = {
      foundThis: false,
      foundArguments: false
    };
    path.traverse(visitor, state);
    if (state.foundArguments) {
      callee = t.memberExpression(container, t.identifier("apply"));
      args = [];
      if (state.foundThis) {
        args.push(t.thisExpression());
      }
      if (state.foundArguments) {
        if (!state.foundThis)
          args.push(t.nullLiteral());
        args.push(t.identifier("arguments"));
      }
    }
    var call = t.callExpression(callee, args);
    if (node.generator)
      call = t.yieldExpression(call, true);
    return t.returnStatement(call);
  };
  var _babelHelperHoistVariables = $__require('a8');
  var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var visitor = {
    enter: function enter(path, state) {
      if (path.isThisExpression()) {
        state.foundThis = true;
      }
      if (path.isReferencedIdentifier({name: "arguments"})) {
        state.foundArguments = true;
      }
    },
    Function: function Function(path) {
      path.skip();
    }
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e4", ["f", "cf", "e3", "7", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.visitor = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _babelHelperGetFunctionArity = $__require('cf');
  var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);
  var _babelHelperCallDelegate = $__require('e3');
  var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildDefaultParam = (0, _babelTemplate2.default)("\n  let VARIABLE_NAME =\n    ARGUMENTS.length <= ARGUMENT_KEY || ARGUMENTS[ARGUMENT_KEY] === undefined ?\n      DEFAULT_VALUE\n    :\n      ARGUMENTS[ARGUMENT_KEY];\n");
  var buildDefaultParamAssign = (0, _babelTemplate2.default)("\n  if (VARIABLE_NAME === undefined) VARIABLE_NAME = DEFAULT_VALUE;\n");
  var buildCutOff = (0, _babelTemplate2.default)("\n  let $0 = $1[$2];\n");
  function hasDefaults(node) {
    for (var _iterator = node.params,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var param = _ref;
      if (!t.isIdentifier(param))
        return true;
    }
    return false;
  }
  var iifeVisitor = {
    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      var name = path.node.name;
      if (name === "eval" || path.scope.hasOwnBinding(name) && path.scope.getOwnBinding(name).kind !== "param") {
        state.iife = true;
        path.stop();
      }
    },
    Scope: function Scope(path) {
      path.skip();
    }
  };
  var visitor = exports.visitor = {Function: function Function(path) {
      var node = path.node;
      var scope = path.scope;
      if (!hasDefaults(node))
        return;
      path.ensureBlock();
      var state = {
        iife: false,
        scope: scope
      };
      var body = [];
      var argsIdentifier = t.identifier("arguments");
      argsIdentifier._shadowedFunctionLiteral = path;
      function pushDefNode(left, right, i) {
        var defNode = void 0;
        if (exceedsLastNonDefault(i) || t.isPattern(left)) {
          defNode = buildDefaultParam({
            VARIABLE_NAME: left,
            DEFAULT_VALUE: right,
            ARGUMENT_KEY: t.numericLiteral(i),
            ARGUMENTS: argsIdentifier
          });
        } else {
          defNode = buildDefaultParamAssign({
            VARIABLE_NAME: left,
            DEFAULT_VALUE: right
          });
        }
        defNode._blockHoist = node.params.length - i;
        body.push(defNode);
      }
      function exceedsLastNonDefault(i) {
        return i + 1 > lastNonDefaultParam;
      }
      var lastNonDefaultParam = (0, _babelHelperGetFunctionArity2.default)(node);
      var params = path.get("params");
      for (var i = 0; i < params.length; i++) {
        var param = params[i];
        if (!param.isAssignmentPattern()) {
          if (!param.isIdentifier()) {
            param.traverse(iifeVisitor, state);
          }
          continue;
        }
        var left = param.get("left");
        var right = param.get("right");
        if (exceedsLastNonDefault(i) || left.isPattern()) {
          var placeholder = scope.generateUidIdentifier("x");
          placeholder._isDefaultPlaceholder = true;
          node.params[i] = placeholder;
        } else {
          node.params[i] = left.node;
        }
        if (!state.iife) {
          if (right.isIdentifier() && scope.hasOwnBinding(right.node.name) && scope.getOwnBinding(right.node.name).kind !== "param") {
            state.iife = true;
          } else {
            right.traverse(iifeVisitor, state);
          }
        }
        pushDefNode(left.node, right.node, i);
      }
      for (var _i2 = lastNonDefaultParam + 1; _i2 < node.params.length; _i2++) {
        var _param = node.params[_i2];
        if (_param._isDefaultPlaceholder)
          continue;
        var declar = buildCutOff(_param, argsIdentifier, t.numericLiteral(_i2));
        declar._blockHoist = node.params.length - _i2;
        body.push(declar);
      }
      node.params = node.params.slice(0, lastNonDefaultParam);
      if (state.iife) {
        body.push((0, _babelHelperCallDelegate2.default)(path, scope));
        path.set("body", t.blockStatement(body));
      } else {
        path.get("body").unshiftContainer("body", body);
      }
    }};
  return module.exports;
});

$__System.registerDynamic("e5", ["f", "7", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.visitor = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildRest = (0, _babelTemplate2.default)("\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n");
  var loadRest = (0, _babelTemplate2.default)("\n  ARGUMENTS.length <= INDEX ? undefined : ARGUMENTS[INDEX]\n");
  var memberExpressionOptimisationVisitor = {
    Scope: function Scope(path, state) {
      if (!path.scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
        path.skip();
      }
    },
    Flow: function Flow(path) {
      path.skip();
    },
    Function: function Function(path, state) {
      var oldNoOptimise = state.noOptimise;
      state.noOptimise = true;
      path.traverse(memberExpressionOptimisationVisitor, state);
      state.noOptimise = oldNoOptimise;
      path.skip();
    },
    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      var node = path.node;
      if (node.name === "arguments") {
        state.deopted = true;
      }
      if (node.name !== state.name)
        return;
      if (state.noOptimise) {
        state.deopted = true;
      } else {
        var parentPath = path.parentPath;
        if (parentPath.isMemberExpression({object: node})) {
          var grandparentPath = parentPath.parentPath;
          var argsOptEligible = !state.deopted && !(grandparentPath.isAssignmentExpression() && parentPath.node === grandparentPath.node.left || grandparentPath.isLVal() || grandparentPath.isForXStatement() || grandparentPath.isUpdateExpression() || grandparentPath.isUnaryExpression({operator: "delete"}) || (grandparentPath.isCallExpression() || grandparentPath.isNewExpression()) && parentPath.node === grandparentPath.node.callee);
          if (argsOptEligible) {
            if (parentPath.node.computed) {
              if (parentPath.get("property").isBaseType("number")) {
                state.candidates.push({
                  cause: "indexGetter",
                  path: path
                });
                return;
              }
            } else if (parentPath.node.property.name === "length") {
              state.candidates.push({
                cause: "lengthGetter",
                path: path
              });
              return;
            }
          }
        }
        if (state.offset === 0 && parentPath.isSpreadElement()) {
          var call = parentPath.parentPath;
          if (call.isCallExpression() && call.node.arguments.length === 1) {
            state.candidates.push({
              cause: "argSpread",
              path: path
            });
            return;
          }
        }
        state.references.push(path);
      }
    },
    BindingIdentifier: function BindingIdentifier(_ref, state) {
      var node = _ref.node;
      if (node.name === state.name) {
        state.deopted = true;
      }
    }
  };
  function hasRest(node) {
    return t.isRestElement(node.params[node.params.length - 1]);
  }
  function optimiseIndexGetter(path, argsId, offset) {
    var index = void 0;
    if (t.isNumericLiteral(path.parent.property)) {
      index = t.numericLiteral(path.parent.property.value + offset);
    } else {
      index = t.binaryExpression("+", path.parent.property, t.numericLiteral(offset));
    }
    path.parentPath.replaceWith(loadRest({
      ARGUMENTS: argsId,
      INDEX: index
    }));
  }
  function optimiseLengthGetter(path, argsLengthExpression, argsId, offset) {
    if (offset) {
      path.parentPath.replaceWith(t.binaryExpression("-", argsLengthExpression, t.numericLiteral(offset)));
    } else {
      path.replaceWith(argsId);
    }
  }
  var visitor = exports.visitor = {Function: function Function(path) {
      var node = path.node;
      var scope = path.scope;
      if (!hasRest(node))
        return;
      var rest = node.params.pop().argument;
      var argsId = t.identifier("arguments");
      var argsLengthExpression = t.memberExpression(argsId, t.identifier("length"));
      argsId._shadowedFunctionLiteral = path;
      var state = {
        references: [],
        offset: node.params.length,
        argumentsNode: argsId,
        outerBinding: scope.getBindingIdentifier(rest.name),
        candidates: [],
        name: rest.name,
        deopted: false
      };
      path.traverse(memberExpressionOptimisationVisitor, state);
      if (!state.deopted && !state.references.length) {
        for (var _iterator = state.candidates,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref2;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref2 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref2 = _i.value;
          }
          var _ref3 = _ref2;
          var _path = _ref3.path;
          var cause = _ref3.cause;
          switch (cause) {
            case "indexGetter":
              optimiseIndexGetter(_path, argsId, state.offset);
              break;
            case "lengthGetter":
              optimiseLengthGetter(_path, argsLengthExpression, argsId, state.offset);
              break;
            default:
              _path.replaceWith(argsId);
          }
        }
        return;
      }
      state.references = state.references.concat(state.candidates.map(function(_ref4) {
        var path = _ref4.path;
        return path;
      }));
      state.deopted = state.deopted || !!node.shadow;
      var start = t.numericLiteral(node.params.length);
      var key = scope.generateUidIdentifier("key");
      var len = scope.generateUidIdentifier("len");
      var arrKey = key;
      var arrLen = len;
      if (node.params.length) {
        arrKey = t.binaryExpression("-", key, start);
        arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.numericLiteral(0));
      }
      var loop = buildRest({
        ARGUMENTS: argsId,
        ARRAY_KEY: arrKey,
        ARRAY_LEN: arrLen,
        START: start,
        ARRAY: rest,
        KEY: key,
        LEN: len
      });
      if (state.deopted) {
        loop._blockHoist = node.params.length + 1;
        node.body.body.unshift(loop);
      } else {
        loop._blockHoist = 1;
        var target = path.getEarliestCommonAncestorFrom(state.references).getStatementParent();
        target.findParent(function(path) {
          if (path.isLoop()) {
            target = path;
          } else {
            return path.isFunction();
          }
        });
        target.insertBefore(loop);
      }
    }};
  return module.exports;
});

$__System.registerDynamic("e6", ["f", "18", "e2", "e4", "e5"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function() {
    return {visitor: _babelTraverse.visitors.merge([{ArrowFunctionExpression: function ArrowFunctionExpression(path) {
          var params = path.get("params");
          for (var _iterator = params,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
            var _ref;
            if (_isArray) {
              if (_i >= _iterator.length)
                break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done)
                break;
              _ref = _i.value;
            }
            var param = _ref;
            if (param.isRestElement() || param.isAssignmentPattern()) {
              path.arrowFunctionToShadowed();
              break;
            }
          }
        }}, destructuring.visitor, rest.visitor, def.visitor])};
  };
  var _babelTraverse = $__require('18');
  var _destructuring = $__require('e2');
  var destructuring = _interopRequireWildcard(_destructuring);
  var _default = $__require('e4');
  var def = _interopRequireWildcard(_default);
  var _rest = $__require('e5');
  var rest = _interopRequireWildcard(_rest);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e7", ["15", "f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(_ref) {
    var t = _ref.types;
    function variableDeclarationHasPattern(node) {
      for (var _iterator = node.declarations,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref2;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref2 = _i.value;
        }
        var declar = _ref2;
        if (t.isPattern(declar.id)) {
          return true;
        }
      }
      return false;
    }
    function hasRest(pattern) {
      for (var _iterator2 = pattern.elements,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref3;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref3 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref3 = _i2.value;
        }
        var elem = _ref3;
        if (t.isRestElement(elem)) {
          return true;
        }
      }
      return false;
    }
    var arrayUnpackVisitor = {ReferencedIdentifier: function ReferencedIdentifier(path, state) {
        if (state.bindings[path.node.name]) {
          state.deopt = true;
          path.stop();
        }
      }};
    var DestructuringTransformer = function() {
      function DestructuringTransformer(opts) {
        (0, _classCallCheck3.default)(this, DestructuringTransformer);
        this.blockHoist = opts.blockHoist;
        this.operator = opts.operator;
        this.arrays = {};
        this.nodes = opts.nodes || [];
        this.scope = opts.scope;
        this.file = opts.file;
        this.kind = opts.kind;
      }
      DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
        var op = this.operator;
        if (t.isMemberExpression(id))
          op = "=";
        var node = void 0;
        if (op) {
          node = t.expressionStatement(t.assignmentExpression(op, id, init));
        } else {
          node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
        }
        node._blockHoist = this.blockHoist;
        return node;
      };
      DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
        var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
        declar._blockHoist = this.blockHoist;
        return declar;
      };
      DestructuringTransformer.prototype.push = function push(id, init) {
        if (t.isObjectPattern(id)) {
          this.pushObjectPattern(id, init);
        } else if (t.isArrayPattern(id)) {
          this.pushArrayPattern(id, init);
        } else if (t.isAssignmentPattern(id)) {
          this.pushAssignmentPattern(id, init);
        } else {
          this.nodes.push(this.buildVariableAssignment(id, init));
        }
      };
      DestructuringTransformer.prototype.toArray = function toArray(node, count) {
        if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {
          return node;
        } else {
          return this.scope.toArray(node, count);
        }
      };
      DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
        var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);
        var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
        declar._blockHoist = this.blockHoist;
        this.nodes.push(declar);
        var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);
        var left = pattern.left;
        if (t.isPattern(left)) {
          var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
          tempValueDefault._blockHoist = this.blockHoist;
          this.nodes.push(tempValueDefault);
          this.push(left, tempValueRef);
        } else {
          this.nodes.push(this.buildVariableAssignment(left, tempConditional));
        }
      };
      DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {
        var keys = [];
        for (var i = 0; i < pattern.properties.length; i++) {
          var prop = pattern.properties[i];
          if (i >= spreadPropIndex)
            break;
          if (t.isRestProperty(prop))
            continue;
          var key = prop.key;
          if (t.isIdentifier(key) && !prop.computed)
            key = t.stringLiteral(prop.key.name);
          keys.push(key);
        }
        keys = t.arrayExpression(keys);
        var value = t.callExpression(this.file.addHelper("objectWithoutProperties"), [objRef, keys]);
        this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
      };
      DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
        if (t.isLiteral(prop.key))
          prop.computed = true;
        var pattern = prop.value;
        var objRef = t.memberExpression(propRef, prop.key, prop.computed);
        if (t.isPattern(pattern)) {
          this.push(pattern, objRef);
        } else {
          this.nodes.push(this.buildVariableAssignment(pattern, objRef));
        }
      };
      DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
        if (!pattern.properties.length) {
          this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("objectDestructuringEmpty"), [objRef])));
        }
        if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
          var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
          this.nodes.push(this.buildVariableDeclaration(temp, objRef));
          objRef = temp;
        }
        for (var i = 0; i < pattern.properties.length; i++) {
          var prop = pattern.properties[i];
          if (t.isRestProperty(prop)) {
            this.pushObjectRest(pattern, objRef, prop, i);
          } else {
            this.pushObjectProperty(prop, objRef);
          }
        }
      };
      DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
        if (!t.isArrayExpression(arr))
          return false;
        if (pattern.elements.length > arr.elements.length)
          return;
        if (pattern.elements.length < arr.elements.length && !hasRest(pattern))
          return false;
        for (var _iterator3 = pattern.elements,
            _isArray3 = Array.isArray(_iterator3),
            _i3 = 0,
            _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
          var _ref4;
          if (_isArray3) {
            if (_i3 >= _iterator3.length)
              break;
            _ref4 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done)
              break;
            _ref4 = _i3.value;
          }
          var elem = _ref4;
          if (!elem)
            return false;
          if (t.isMemberExpression(elem))
            return false;
        }
        for (var _iterator4 = arr.elements,
            _isArray4 = Array.isArray(_iterator4),
            _i4 = 0,
            _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
          var _ref5;
          if (_isArray4) {
            if (_i4 >= _iterator4.length)
              break;
            _ref5 = _iterator4[_i4++];
          } else {
            _i4 = _iterator4.next();
            if (_i4.done)
              break;
            _ref5 = _i4.value;
          }
          var _elem = _ref5;
          if (t.isSpreadElement(_elem))
            return false;
        }
        var bindings = t.getBindingIdentifiers(pattern);
        var state = {
          deopt: false,
          bindings: bindings
        };
        this.scope.traverse(arr, arrayUnpackVisitor, state);
        return !state.deopt;
      };
      DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
        for (var i = 0; i < pattern.elements.length; i++) {
          var elem = pattern.elements[i];
          if (t.isRestElement(elem)) {
            this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
          } else {
            this.push(elem, arr.elements[i]);
          }
        }
      };
      DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
        if (!pattern.elements)
          return;
        if (this.canUnpackArrayPattern(pattern, arrayRef)) {
          return this.pushUnpackedArrayPattern(pattern, arrayRef);
        }
        var count = !hasRest(pattern) && pattern.elements.length;
        var toArray = this.toArray(arrayRef, count);
        if (t.isIdentifier(toArray)) {
          arrayRef = toArray;
        } else {
          arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
          this.arrays[arrayRef.name] = true;
          this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
        }
        for (var i = 0; i < pattern.elements.length; i++) {
          var elem = pattern.elements[i];
          if (!elem)
            continue;
          var elemRef = void 0;
          if (t.isRestElement(elem)) {
            elemRef = this.toArray(arrayRef);
            if (i > 0) {
              elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.numericLiteral(i)]);
            }
            elem = elem.argument;
          } else {
            elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);
          }
          this.push(elem, elemRef);
        }
      };
      DestructuringTransformer.prototype.init = function init(pattern, ref) {
        if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
          var memo = this.scope.maybeGenerateMemoised(ref, true);
          if (memo) {
            this.nodes.push(this.buildVariableDeclaration(memo, ref));
            ref = memo;
          }
        }
        this.push(pattern, ref);
        return this.nodes;
      };
      return DestructuringTransformer;
    }();
    return {visitor: {
        ExportNamedDeclaration: function ExportNamedDeclaration(path) {
          var declaration = path.get("declaration");
          if (!declaration.isVariableDeclaration())
            return;
          if (!variableDeclarationHasPattern(declaration.node))
            return;
          var specifiers = [];
          for (var name in path.getOuterBindingIdentifiers(path)) {
            var id = t.identifier(name);
            specifiers.push(t.exportSpecifier(id, id));
          }
          path.replaceWith(declaration.node);
          path.insertAfter(t.exportNamedDeclaration(null, specifiers));
        },
        ForXStatement: function ForXStatement(path, file) {
          var node = path.node;
          var scope = path.scope;
          var left = node.left;
          if (t.isPattern(left)) {
            var temp = scope.generateUidIdentifier("ref");
            node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);
            path.ensureBlock();
            node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));
            return;
          }
          if (!t.isVariableDeclaration(left))
            return;
          var pattern = left.declarations[0].id;
          if (!t.isPattern(pattern))
            return;
          var key = scope.generateUidIdentifier("ref");
          node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);
          var nodes = [];
          var destructuring = new DestructuringTransformer({
            kind: left.kind,
            file: file,
            scope: scope,
            nodes: nodes
          });
          destructuring.init(pattern, key);
          path.ensureBlock();
          var block = node.body;
          block.body = nodes.concat(block.body);
        },
        CatchClause: function CatchClause(_ref6, file) {
          var node = _ref6.node;
          var scope = _ref6.scope;
          var pattern = node.param;
          if (!t.isPattern(pattern))
            return;
          var ref = scope.generateUidIdentifier("ref");
          node.param = ref;
          var nodes = [];
          var destructuring = new DestructuringTransformer({
            kind: "let",
            file: file,
            scope: scope,
            nodes: nodes
          });
          destructuring.init(pattern, ref);
          node.body.body = nodes.concat(node.body.body);
        },
        AssignmentExpression: function AssignmentExpression(path, file) {
          var node = path.node;
          var scope = path.scope;
          if (!t.isPattern(node.left))
            return;
          var nodes = [];
          var destructuring = new DestructuringTransformer({
            operator: node.operator,
            file: file,
            scope: scope,
            nodes: nodes
          });
          var ref = void 0;
          if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {
            ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");
            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));
            if (t.isArrayExpression(node.right)) {
              destructuring.arrays[ref.name] = true;
            }
          }
          destructuring.init(node.left, ref || node.right);
          if (ref) {
            nodes.push(t.expressionStatement(ref));
          }
          path.replaceWithMultiple(nodes);
        },
        VariableDeclaration: function VariableDeclaration(path, file) {
          var node = path.node;
          var scope = path.scope;
          var parent = path.parent;
          if (t.isForXStatement(parent))
            return;
          if (!parent || !path.container)
            return;
          if (!variableDeclarationHasPattern(node))
            return;
          var nodes = [];
          var declar = void 0;
          for (var i = 0; i < node.declarations.length; i++) {
            declar = node.declarations[i];
            var patternId = declar.init;
            var pattern = declar.id;
            var destructuring = new DestructuringTransformer({
              blockHoist: node._blockHoist,
              nodes: nodes,
              scope: scope,
              kind: node.kind,
              file: file
            });
            if (t.isPattern(pattern)) {
              destructuring.init(pattern, patternId);
              if (+i !== node.declarations.length - 1) {
                t.inherits(nodes[nodes.length - 1], declar);
              }
            } else {
              nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
            }
          }
          path.replaceWithMultiple(nodes);
        }
      }};
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("e8", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.visitor = undefined;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function getTDZStatus(refPath, bindingPath) {
    var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);
    if (executionStatus === "before") {
      return "inside";
    } else if (executionStatus === "after") {
      return "outside";
    } else {
      return "maybe";
    }
  }
  function buildTDZAssert(node, file) {
    return t.callExpression(file.addHelper("temporalRef"), [node, t.stringLiteral(node.name), file.addHelper("temporalUndefined")]);
  }
  function isReference(node, scope, state) {
    var declared = state.letReferences[node.name];
    if (!declared)
      return false;
    return scope.getBindingIdentifier(node.name) === declared;
  }
  var visitor = exports.visitor = {
    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      if (!this.file.opts.tdz)
        return;
      var node = path.node;
      var parent = path.parent;
      var scope = path.scope;
      if (path.parentPath.isFor({left: node}))
        return;
      if (!isReference(node, scope, state))
        return;
      var bindingPath = scope.getBinding(node.name).path;
      var status = getTDZStatus(path, bindingPath);
      if (status === "inside")
        return;
      if (status === "maybe") {
        var assert = buildTDZAssert(node, state.file);
        bindingPath.parent._tdzThis = true;
        path.skip();
        if (path.parentPath.isUpdateExpression()) {
          if (parent._ignoreBlockScopingTDZ)
            return;
          path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
        } else {
          path.replaceWith(assert);
        }
      } else if (status === "outside") {
        path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier("ReferenceError"), [t.stringLiteral(node.name + " is not defined - temporal dead zone")]), node)));
      }
    },
    AssignmentExpression: {exit: function exit(path, state) {
        if (!this.file.opts.tdz)
          return;
        var node = path.node;
        if (node._ignoreBlockScopingTDZ)
          return;
        var nodes = [];
        var ids = path.getBindingIdentifiers();
        for (var name in ids) {
          var id = ids[name];
          if (isReference(id, path.scope, state)) {
            nodes.push(buildTDZAssert(id, state.file));
          }
        }
        if (nodes.length) {
          node._ignoreBlockScopingTDZ = true;
          nodes.push(node);
          path.replaceWithMultiple(nodes.map(t.expressionStatement));
        }
      }}
  };
  return module.exports;
});

$__System.registerDynamic("e9", ["9c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('9c');
  return module.exports;
});

$__System.registerDynamic("7f", ["ea", "eb"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseClone = $__require('ea'),
      bindCallback = $__require('eb');
  function cloneDeep(value, customizer, thisArg) {
    return typeof customizer == 'function' ? baseClone(value, true, bindCallback(customizer, thisArg, 3)) : baseClone(value, true);
  }
  module.exports = cloneDeep;
  return module.exports;
});

$__System.registerDynamic("cc", ["ec", "ed", "72", "34", "ee", "ef", "f0", "f1", "f2"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseGet = $__require('ec'),
      baseSlice = $__require('ed'),
      isArguments = $__require('72'),
      isArray = $__require('34'),
      isIndex = $__require('ee'),
      isKey = $__require('ef'),
      isLength = $__require('f0'),
      last = $__require('f1'),
      toPath = $__require('f2');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function has(object, path) {
    if (object == null) {
      return false;
    }
    var result = hasOwnProperty.call(object, path);
    if (!result && !isKey(path)) {
      path = toPath(path);
      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      if (object == null) {
        return false;
      }
      path = last(path);
      result = hasOwnProperty.call(object, path);
    }
    return result || (isLength(object.length) && isIndex(path, object.length) && (isArray(object) || isArguments(object)));
  }
  module.exports = has;
  return module.exports;
});

$__System.registerDynamic("7", ["9e", "7f", "9c", "cc", "18", "a2", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  exports.default = function(code, opts) {
    var stack = void 0;
    try {
      throw new Error();
    } catch (error) {
      if (error.stack) {
        stack = error.stack.split("\n").slice(1).join("\n");
      }
    }
    var _getAst = function getAst() {
      var ast = void 0;
      try {
        ast = babylon.parse(code, (0, _assign2.default)({
          allowReturnOutsideFunction: true,
          allowSuperOutsideMethod: true
        }, opts));
        ast = _babelTraverse2.default.removeProperties(ast);
        _babelTraverse2.default.cheap(ast, function(node) {
          node[FROM_TEMPLATE] = true;
        });
      } catch (err) {
        err.stack = err.stack + "from\n" + stack;
        throw err;
      }
      _getAst = function getAst() {
        return ast;
      };
      return ast;
    };
    return function() {
      for (var _len = arguments.length,
          args = Array(_len),
          _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return useTemplate(_getAst(), args);
    };
  };
  var _cloneDeep = $__require('7f');
  var _cloneDeep2 = _interopRequireDefault(_cloneDeep);
  var _assign = $__require('9c');
  var _assign2 = _interopRequireDefault(_assign);
  var _has = $__require('cc');
  var _has2 = _interopRequireDefault(_has);
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _babylon = $__require('a2');
  var babylon = _interopRequireWildcard(_babylon);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var FROM_TEMPLATE = "_fromTemplate";
  var TEMPLATE_SKIP = (0, _symbol2.default)();
  function useTemplate(ast, nodes) {
    ast = (0, _cloneDeep2.default)(ast);
    var _ast = ast;
    var program = _ast.program;
    if (nodes.length) {
      (0, _babelTraverse2.default)(ast, templateVisitor, null, nodes);
    }
    if (program.body.length > 1) {
      return program.body;
    } else {
      return program.body[0];
    }
  }
  var templateVisitor = {
    noScope: true,
    enter: function enter(path, args) {
      var node = path.node;
      if (node[TEMPLATE_SKIP])
        return path.skip();
      if (t.isExpressionStatement(node)) {
        node = node.expression;
      }
      var replacement = void 0;
      if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
        if ((0, _has2.default)(args[0], node.name)) {
          replacement = args[0][node.name];
        } else if (node.name[0] === "$") {
          var i = +node.name.slice(1);
          if (args[i])
            replacement = args[i];
        }
      }
      if (replacement === null) {
        path.remove();
      }
      if (replacement) {
        replacement[TEMPLATE_SKIP] = true;
        path.replaceInline(replacement);
      }
    },
    exit: function exit(_ref) {
      var node = _ref.node;
      if (!node.loc)
        _babelTraverse2.default.clearNode(node);
    }
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("f3", ["9e", "9f", "15", "18", "e8", "9", "f4", "e9", "7"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  exports.default = function() {
    return {visitor: {
        VariableDeclaration: function VariableDeclaration(path, file) {
          var node = path.node;
          var parent = path.parent;
          var scope = path.scope;
          if (!isBlockScoped(node))
            return;
          convertBlockScopedToVar(path, parent, scope, true);
          if (node._tdzThis) {
            var nodes = [node];
            for (var i = 0; i < node.declarations.length; i++) {
              var decl = node.declarations[i];
              if (decl.init) {
                var assign = t.assignmentExpression("=", decl.id, decl.init);
                assign._ignoreBlockScopingTDZ = true;
                nodes.push(t.expressionStatement(assign));
              }
              decl.init = file.addHelper("temporalUndefined");
            }
            node._blockHoist = 2;
            if (path.isCompletionRecord()) {
              nodes.push(t.expressionStatement(scope.buildUndefinedNode()));
            }
            path.replaceWithMultiple(nodes);
          }
        },
        Loop: function Loop(path, file) {
          var node = path.node;
          var parent = path.parent;
          var scope = path.scope;
          t.ensureBlock(node);
          var blockScoping = new BlockScoping(path, path.get("body"), parent, scope, file);
          var replace = blockScoping.run();
          if (replace)
            path.replaceWith(replace);
        },
        "BlockStatement|Program": function BlockStatementProgram(path, file) {
          if (!t.isLoop(path.parent)) {
            var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);
            blockScoping.run();
          }
        }
      }};
  };
  var _babelTraverse = $__require('18');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _tdz = $__require('e8');
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _values = $__require('f4');
  var _values2 = _interopRequireDefault(_values);
  var _extend = $__require('e9');
  var _extend2 = _interopRequireDefault(_extend);
  var _babelTemplate = $__require('7');
  var _babelTemplate2 = _interopRequireDefault(_babelTemplate);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var buildRetCheck = (0, _babelTemplate2.default)("\n  if (typeof RETURN === \"object\") return RETURN.v;\n");
  function isBlockScoped(node) {
    if (!t.isVariableDeclaration(node))
      return false;
    if (node[t.BLOCK_SCOPED_SYMBOL])
      return true;
    if (node.kind !== "let" && node.kind !== "const")
      return false;
    return true;
  }
  function convertBlockScopedToVar(path, parent, scope) {
    var moveBindingsToParent = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
    var node = path.node;
    if (!t.isFor(parent)) {
      for (var i = 0; i < node.declarations.length; i++) {
        var declar = node.declarations[i];
        declar.init = declar.init || scope.buildUndefinedNode();
      }
    }
    node[t.BLOCK_SCOPED_SYMBOL] = true;
    node.kind = "var";
    if (moveBindingsToParent) {
      var parentScope = scope.getFunctionParent();
      var ids = path.getBindingIdentifiers();
      for (var name in ids) {
        var binding = scope.getOwnBinding(name);
        if (binding)
          binding.kind = "var";
        scope.moveBindingTo(name, parentScope);
      }
    }
  }
  function isVar(node) {
    return t.isVariableDeclaration(node, {kind: "var"}) && !isBlockScoped(node);
  }
  function replace(path, node, scope, remaps) {
    var remap = remaps[node.name];
    if (!remap)
      return;
    var ownBinding = scope.getBindingIdentifier(node.name);
    if (ownBinding === remap.binding) {
      scope.rename(node.name, remap.uid);
    } else {
      if (path)
        path.skip();
    }
  }
  var replaceVisitor = {
    ReferencedIdentifier: function ReferencedIdentifier(path, remaps) {
      replace(path, path.node, path.scope, remaps);
    },
    AssignmentExpression: function AssignmentExpression(path, remaps) {
      var ids = path.getBindingIdentifiers();
      for (var name in ids) {
        replace(null, ids[name], path.scope, remaps);
      }
    }
  };
  function traverseReplace(node, parent, scope, remaps) {
    if (t.isIdentifier(node)) {
      replace(node, parent, scope, remaps);
    }
    if (t.isAssignmentExpression(node)) {
      var ids = t.getBindingIdentifiers(node);
      for (var name in ids) {
        replace(ids[name], parent, scope, remaps);
      }
    }
    scope.traverse(node, replaceVisitor, remaps);
  }
  var letReferenceBlockVisitor = _babelTraverse2.default.visitors.merge([{Function: function Function(path, state) {
      path.traverse(letReferenceFunctionVisitor, state);
      return path.skip();
    }}, _tdz.visitor]);
  var letReferenceFunctionVisitor = _babelTraverse2.default.visitors.merge([{ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      var ref = state.letReferences[path.node.name];
      if (!ref)
        return;
      var localBinding = path.scope.getBindingIdentifier(path.node.name);
      if (localBinding && localBinding !== ref)
        return;
      state.closurify = true;
    }}, _tdz.visitor]);
  var hoistVarDeclarationsVisitor = {enter: function enter(path, self) {
      var node = path.node;
      var parent = path.parent;
      if (path.isForStatement()) {
        if (isVar(node.init, node)) {
          var nodes = self.pushDeclar(node.init);
          if (nodes.length === 1) {
            node.init = nodes[0];
          } else {
            node.init = t.sequenceExpression(nodes);
          }
        }
      } else if (path.isFor()) {
        if (isVar(node.left, node)) {
          self.pushDeclar(node.left);
          node.left = node.left.declarations[0].id;
        }
      } else if (isVar(node, parent)) {
        path.replaceWithMultiple(self.pushDeclar(node).map(function(expr) {
          return t.expressionStatement(expr);
        }));
      } else if (path.isFunction()) {
        return path.skip();
      }
    }};
  var loopLabelVisitor = {LabeledStatement: function LabeledStatement(_ref, state) {
      var node = _ref.node;
      state.innerLabels.push(node.label.name);
    }};
  var continuationVisitor = {enter: function enter(path, state) {
      if (path.isAssignmentExpression() || path.isUpdateExpression()) {
        var bindings = path.getBindingIdentifiers();
        for (var name in bindings) {
          if (state.outsideReferences[name] !== path.scope.getBindingIdentifier(name))
            continue;
          state.reassignments[name] = true;
        }
      }
    }};
  function loopNodeTo(node) {
    if (t.isBreakStatement(node)) {
      return "break";
    } else if (t.isContinueStatement(node)) {
      return "continue";
    }
  }
  var loopVisitor = {
    Loop: function Loop(path, state) {
      var oldIgnoreLabeless = state.ignoreLabeless;
      state.ignoreLabeless = true;
      path.traverse(loopVisitor, state);
      state.ignoreLabeless = oldIgnoreLabeless;
      path.skip();
    },
    Function: function Function(path) {
      path.skip();
    },
    SwitchCase: function SwitchCase(path, state) {
      var oldInSwitchCase = state.inSwitchCase;
      state.inSwitchCase = true;
      path.traverse(loopVisitor, state);
      state.inSwitchCase = oldInSwitchCase;
      path.skip();
    },
    "BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(path, state) {
      var node = path.node;
      var parent = path.parent;
      var scope = path.scope;
      if (node[this.LOOP_IGNORE])
        return;
      var replace = void 0;
      var loopText = loopNodeTo(node);
      if (loopText) {
        if (node.label) {
          if (state.innerLabels.indexOf(node.label.name) >= 0) {
            return;
          }
          loopText = loopText + "|" + node.label.name;
        } else {
          if (state.ignoreLabeless)
            return;
          if (state.inSwitchCase)
            return;
          if (t.isBreakStatement(node) && t.isSwitchCase(parent))
            return;
        }
        state.hasBreakContinue = true;
        state.map[loopText] = node;
        replace = t.stringLiteral(loopText);
      }
      if (path.isReturnStatement()) {
        state.hasReturn = true;
        replace = t.objectExpression([t.objectProperty(t.identifier("v"), node.argument || scope.buildUndefinedNode())]);
      }
      if (replace) {
        replace = t.returnStatement(replace);
        replace[this.LOOP_IGNORE] = true;
        path.skip();
        path.replaceWith(t.inherits(replace, node));
      }
    }
  };
  var BlockScoping = function() {
    function BlockScoping(loopPath, blockPath, parent, scope, file) {
      (0, _classCallCheck3.default)(this, BlockScoping);
      this.parent = parent;
      this.scope = scope;
      this.file = file;
      this.blockPath = blockPath;
      this.block = blockPath.node;
      this.outsideLetReferences = (0, _create2.default)(null);
      this.hasLetReferences = false;
      this.letReferences = (0, _create2.default)(null);
      this.body = [];
      if (loopPath) {
        this.loopParent = loopPath.parent;
        this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
        this.loopPath = loopPath;
        this.loop = loopPath.node;
      }
    }
    BlockScoping.prototype.run = function run() {
      var block = this.block;
      if (block._letDone)
        return;
      block._letDone = true;
      var needsClosure = this.getLetReferences();
      if (t.isFunction(this.parent) || t.isProgram(this.block)) {
        this.updateScopeInfo();
        return;
      }
      if (!this.hasLetReferences)
        return;
      if (needsClosure) {
        this.wrapClosure();
      } else {
        this.remap();
      }
      this.updateScopeInfo();
      if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
        return t.labeledStatement(this.loopLabel, this.loop);
      }
    };
    BlockScoping.prototype.updateScopeInfo = function updateScopeInfo() {
      var scope = this.scope;
      var parentScope = scope.getFunctionParent();
      var letRefs = this.letReferences;
      for (var key in letRefs) {
        var ref = letRefs[key];
        var binding = scope.getBinding(ref.name);
        if (!binding)
          continue;
        if (binding.kind === "let" || binding.kind === "const") {
          binding.kind = "var";
          scope.moveBindingTo(ref.name, parentScope);
        }
      }
    };
    BlockScoping.prototype.remap = function remap() {
      var hasRemaps = false;
      var letRefs = this.letReferences;
      var scope = this.scope;
      var remaps = (0, _create2.default)(null);
      for (var key in letRefs) {
        var ref = letRefs[key];
        if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
          var uid = scope.generateUidIdentifier(ref.name).name;
          ref.name = uid;
          hasRemaps = true;
          remaps[key] = remaps[uid] = {
            binding: ref,
            uid: uid
          };
        }
      }
      if (!hasRemaps)
        return;
      var loop = this.loop;
      if (loop) {
        traverseReplace(loop.right, loop, scope, remaps);
        traverseReplace(loop.test, loop, scope, remaps);
        traverseReplace(loop.update, loop, scope, remaps);
      }
      this.blockPath.traverse(replaceVisitor, remaps);
    };
    BlockScoping.prototype.wrapClosure = function wrapClosure() {
      var block = this.block;
      var outsideRefs = this.outsideLetReferences;
      if (this.loop) {
        for (var name in outsideRefs) {
          var id = outsideRefs[name];
          if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
            delete outsideRefs[id.name];
            delete this.letReferences[id.name];
            this.scope.rename(id.name);
            this.letReferences[id.name] = id;
            outsideRefs[id.name] = id;
          }
        }
      }
      this.has = this.checkLoop();
      this.hoistVarDeclarations();
      var params = (0, _values2.default)(outsideRefs);
      var args = (0, _values2.default)(outsideRefs);
      var fn = t.functionExpression(null, params, t.blockStatement(block.body));
      fn.shadow = true;
      this.addContinuations(fn);
      block.body = this.body;
      var ref = fn;
      if (this.loop) {
        ref = this.scope.generateUidIdentifier("loop");
        this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
      }
      var call = t.callExpression(ref, args);
      var ret = this.scope.generateUidIdentifier("ret");
      var hasYield = _babelTraverse2.default.hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
      if (hasYield) {
        fn.generator = true;
        call = t.yieldExpression(call, true);
      }
      var hasAsync = _babelTraverse2.default.hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
      if (hasAsync) {
        fn.async = true;
        call = t.awaitExpression(call);
      }
      this.buildClosure(ret, call);
    };
    BlockScoping.prototype.buildClosure = function buildClosure(ret, call) {
      var has = this.has;
      if (has.hasReturn || has.hasBreakContinue) {
        this.buildHas(ret, call);
      } else {
        this.body.push(t.expressionStatement(call));
      }
    };
    BlockScoping.prototype.addContinuations = function addContinuations(fn) {
      var state = {
        reassignments: {},
        outsideReferences: this.outsideLetReferences
      };
      this.scope.traverse(fn, continuationVisitor, state);
      for (var i = 0; i < fn.params.length; i++) {
        var param = fn.params[i];
        if (!state.reassignments[param.name])
          continue;
        var newParam = this.scope.generateUidIdentifier(param.name);
        fn.params[i] = newParam;
        this.scope.rename(param.name, newParam.name, fn);
        fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
      }
    };
    BlockScoping.prototype.getLetReferences = function getLetReferences() {
      var block = this.block;
      var declarators = [];
      if (this.loop) {
        var init = this.loop.left || this.loop.init;
        if (isBlockScoped(init)) {
          declarators.push(init);
          (0, _extend2.default)(this.outsideLetReferences, t.getBindingIdentifiers(init));
        }
      }
      if (block.body) {
        for (var i = 0; i < block.body.length; i++) {
          var declar = block.body[i];
          if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {
            var declarPath = this.blockPath.get("body")[i];
            if (isBlockScoped(declar)) {
              convertBlockScopedToVar(declarPath, block, this.scope);
            }
            declarators = declarators.concat(declar.declarations || declar);
          }
        }
      }
      for (var _i = 0; _i < declarators.length; _i++) {
        var _declar = declarators[_i];
        var keys = t.getBindingIdentifiers(_declar);
        (0, _extend2.default)(this.letReferences, keys);
        this.hasLetReferences = true;
      }
      if (!this.hasLetReferences)
        return;
      var state = {
        letReferences: this.letReferences,
        closurify: false,
        file: this.file
      };
      this.blockPath.traverse(letReferenceBlockVisitor, state);
      return state.closurify;
    };
    BlockScoping.prototype.checkLoop = function checkLoop() {
      var state = {
        hasBreakContinue: false,
        ignoreLabeless: false,
        inSwitchCase: false,
        innerLabels: [],
        hasReturn: false,
        isLoop: !!this.loop,
        map: {},
        LOOP_IGNORE: (0, _symbol2.default)()
      };
      this.blockPath.traverse(loopLabelVisitor, state);
      this.blockPath.traverse(loopVisitor, state);
      return state;
    };
    BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
      this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
    };
    BlockScoping.prototype.pushDeclar = function pushDeclar(node) {
      var declars = [];
      var names = t.getBindingIdentifiers(node);
      for (var name in names) {
        declars.push(t.variableDeclarator(names[name]));
      }
      this.body.push(t.variableDeclaration(node.kind, declars));
      var replace = [];
      for (var i = 0; i < node.declarations.length; i++) {
        var declar = node.declarations[i];
        if (!declar.init)
          continue;
        var expr = t.assignmentExpression("=", declar.id, declar.init);
        replace.push(t.inherits(expr, declar));
      }
      return replace;
    };
    BlockScoping.prototype.buildHas = function buildHas(ret, call) {
      var body = this.body;
      body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));
      var retCheck = void 0;
      var has = this.has;
      var cases = [];
      if (has.hasReturn) {
        retCheck = buildRetCheck({RETURN: ret});
      }
      if (has.hasBreakContinue) {
        for (var key in has.map) {
          cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));
        }
        if (has.hasReturn) {
          cases.push(t.switchCase(null, [retCheck]));
        }
        if (cases.length === 1) {
          var single = cases[0];
          body.push(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0]));
        } else {
          for (var i = 0; i < cases.length; i++) {
            var caseConsequent = cases[i].consequent[0];
            if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
              caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier("loop");
            }
          }
          body.push(t.switchStatement(ret, cases));
        }
      } else {
        if (has.hasReturn) {
          body.push(retCheck);
        }
      }
    };
    return BlockScoping;
  }();
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("f5", ["d", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var hasOwn = Object.prototype.hasOwnProperty;
  exports.hoist = function(funPath) {
    t.assertFunction(funPath.node);
    var vars = {};
    function varDeclToExpr(vdec, includeIdentifiers) {
      t.assertVariableDeclaration(vdec);
      var exprs = [];
      vdec.declarations.forEach(function(dec) {
        vars[dec.id.name] = dec.id;
        if (dec.init) {
          exprs.push(t.assignmentExpression("=", dec.id, dec.init));
        } else if (includeIdentifiers) {
          exprs.push(dec.id);
        }
      });
      if (exprs.length === 0)
        return null;
      if (exprs.length === 1)
        return exprs[0];
      return t.sequenceExpression(exprs);
    }
    funPath.get("body").traverse({
      VariableDeclaration: {exit: function exit(path) {
          var expr = varDeclToExpr(path.node, false);
          if (expr === null) {
            path.remove();
          } else {
            path.replaceWith(t.expressionStatement(expr));
          }
          path.skip();
        }},
      ForStatement: function ForStatement(path) {
        var init = path.node.init;
        if (t.isVariableDeclaration(init)) {
          path.get("init").replaceWith(varDeclToExpr(init, false));
        }
      },
      ForXStatement: function ForXStatement(path) {
        var left = path.get("left");
        if (left.isVariableDeclaration()) {
          left.replaceWith(varDeclToExpr(left.node, true));
        }
      },
      FunctionDeclaration: function FunctionDeclaration(path) {
        var node = path.node;
        vars[node.id.name] = node.id;
        var assignment = t.expressionStatement(t.assignmentExpression("=", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));
        if (path.parentPath.isBlockStatement()) {
          path.parentPath.unshiftContainer("body", assignment);
          path.remove();
        } else {
          path.replaceWith(assignment);
        }
        path.skip();
      },
      FunctionExpression: function FunctionExpression(path) {
        path.skip();
      }
    });
    var paramNames = {};
    funPath.get("params").forEach(function(paramPath) {
      var param = paramPath.node;
      if (t.isIdentifier(param)) {
        paramNames[param.name] = param;
      } else {}
    });
    var declarations = [];
    (0, _keys2.default)(vars).forEach(function(name) {
      if (!hasOwn.call(paramNames, name)) {
        declarations.push(t.variableDeclarator(vars[name], null));
      }
    });
    if (declarations.length === 0) {
      return null;
    }
    return t.variableDeclaration("var", declarations);
  };
  return module.exports;
});

$__System.registerDynamic("f6", ["@node/assert", "9", "@node/util", "f7", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _assert = $__require('@node/assert');
  var _assert2 = _interopRequireDefault(_assert);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _util = $__require('@node/util');
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function Entry() {
    _assert2.default.ok(this instanceof Entry);
  }
  function FunctionEntry(returnLoc) {
    Entry.call(this);
    t.assertLiteral(returnLoc);
    this.returnLoc = returnLoc;
  }
  (0, _util.inherits)(FunctionEntry, Entry);
  exports.FunctionEntry = FunctionEntry;
  function LoopEntry(breakLoc, continueLoc, label) {
    Entry.call(this);
    t.assertLiteral(breakLoc);
    t.assertLiteral(continueLoc);
    if (label) {
      t.assertIdentifier(label);
    } else {
      label = null;
    }
    this.breakLoc = breakLoc;
    this.continueLoc = continueLoc;
    this.label = label;
  }
  (0, _util.inherits)(LoopEntry, Entry);
  exports.LoopEntry = LoopEntry;
  function SwitchEntry(breakLoc) {
    Entry.call(this);
    t.assertLiteral(breakLoc);
    this.breakLoc = breakLoc;
  }
  (0, _util.inherits)(SwitchEntry, Entry);
  exports.SwitchEntry = SwitchEntry;
  function TryEntry(firstLoc, catchEntry, finallyEntry) {
    Entry.call(this);
    t.assertLiteral(firstLoc);
    if (catchEntry) {
      _assert2.default.ok(catchEntry instanceof CatchEntry);
    } else {
      catchEntry = null;
    }
    if (finallyEntry) {
      _assert2.default.ok(finallyEntry instanceof FinallyEntry);
    } else {
      finallyEntry = null;
    }
    _assert2.default.ok(catchEntry || finallyEntry);
    this.firstLoc = firstLoc;
    this.catchEntry = catchEntry;
    this.finallyEntry = finallyEntry;
  }
  (0, _util.inherits)(TryEntry, Entry);
  exports.TryEntry = TryEntry;
  function CatchEntry(firstLoc, paramId) {
    Entry.call(this);
    t.assertLiteral(firstLoc);
    t.assertIdentifier(paramId);
    this.firstLoc = firstLoc;
    this.paramId = paramId;
  }
  (0, _util.inherits)(CatchEntry, Entry);
  exports.CatchEntry = CatchEntry;
  function FinallyEntry(firstLoc, afterLoc) {
    Entry.call(this);
    t.assertLiteral(firstLoc);
    t.assertLiteral(afterLoc);
    this.firstLoc = firstLoc;
    this.afterLoc = afterLoc;
  }
  (0, _util.inherits)(FinallyEntry, Entry);
  exports.FinallyEntry = FinallyEntry;
  function LabeledEntry(breakLoc, label) {
    Entry.call(this);
    t.assertLiteral(breakLoc);
    t.assertIdentifier(label);
    this.breakLoc = breakLoc;
    this.label = label;
  }
  (0, _util.inherits)(LabeledEntry, Entry);
  exports.LabeledEntry = LabeledEntry;
  function LeapManager(emitter) {
    _assert2.default.ok(this instanceof LeapManager);
    var Emitter = $__require('f7').Emitter;
    _assert2.default.ok(emitter instanceof Emitter);
    this.emitter = emitter;
    this.entryStack = [new FunctionEntry(emitter.finalLoc)];
  }
  var LMp = LeapManager.prototype;
  exports.LeapManager = LeapManager;
  LMp.withEntry = function(entry, callback) {
    _assert2.default.ok(entry instanceof Entry);
    this.entryStack.push(entry);
    try {
      callback.call(this.emitter);
    } finally {
      var popped = this.entryStack.pop();
      _assert2.default.strictEqual(popped, entry);
    }
  };
  LMp._findLeapLocation = function(property, label) {
    for (var i = this.entryStack.length - 1; i >= 0; --i) {
      var entry = this.entryStack[i];
      var loc = entry[property];
      if (loc) {
        if (label) {
          if (entry.label && entry.label.name === label.name) {
            return loc;
          }
        } else if (entry instanceof LabeledEntry) {} else {
          return loc;
        }
      }
    }
    return null;
  };
  LMp.getBreakLoc = function(label) {
    return this._findLeapLocation("breakLoc", label);
  };
  LMp.getContinueLoc = function(label) {
    return this._findLeapLocation("continueLoc", label);
  };
  return module.exports;
});

$__System.registerDynamic("f8", ["@node/assert", "9", "f9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _assert = $__require('@node/assert');
  var _assert2 = _interopRequireDefault(_assert);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var m = $__require('f9').makeAccessor();
  var hasOwn = Object.prototype.hasOwnProperty;
  function makePredicate(propertyName, knownTypes) {
    function onlyChildren(node) {
      t.assertNode(node);
      var result = false;
      function check(child) {
        if (result) {} else if (Array.isArray(child)) {
          child.some(check);
        } else if (t.isNode(child)) {
          _assert2.default.strictEqual(result, false);
          result = predicate(child);
        }
        return result;
      }
      var keys = t.VISITOR_KEYS[node.type];
      if (keys) {
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var child = node[key];
          check(child);
        }
      }
      return result;
    }
    function predicate(node) {
      t.assertNode(node);
      var meta = m(node);
      if (hasOwn.call(meta, propertyName))
        return meta[propertyName];
      if (hasOwn.call(opaqueTypes, node.type))
        return meta[propertyName] = false;
      if (hasOwn.call(knownTypes, node.type))
        return meta[propertyName] = true;
      return meta[propertyName] = onlyChildren(node);
    }
    predicate.onlyChildren = onlyChildren;
    return predicate;
  }
  var opaqueTypes = {FunctionExpression: true};
  var sideEffectTypes = {
    CallExpression: true,
    ForInStatement: true,
    UnaryExpression: true,
    BinaryExpression: true,
    AssignmentExpression: true,
    UpdateExpression: true,
    NewExpression: true
  };
  var leapTypes = {
    YieldExpression: true,
    BreakStatement: true,
    ContinueStatement: true,
    ReturnStatement: true,
    ThrowStatement: true
  };
  for (var type in leapTypes) {
    if (hasOwn.call(leapTypes, type)) {
      sideEffectTypes[type] = leapTypes[type];
    }
  }
  exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
  exports.containsLeap = makePredicate("containsLeap", leapTypes);
  return module.exports;
});

$__System.registerDynamic("f7", ["40", "@node/assert", "9", "f6", "f8", "fa", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _assert = $__require('@node/assert');
  var _assert2 = _interopRequireDefault(_assert);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _leap = $__require('f6');
  var leap = _interopRequireWildcard(_leap);
  var _meta = $__require('f8');
  var meta = _interopRequireWildcard(_meta);
  var _util = $__require('fa');
  var util = _interopRequireWildcard(_util);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var hasOwn = Object.prototype.hasOwnProperty;
  function Emitter(contextId) {
    _assert2.default.ok(this instanceof Emitter);
    t.assertIdentifier(contextId);
    this.nextTempId = 0;
    this.contextId = contextId;
    this.listing = [];
    this.marked = [true];
    this.finalLoc = loc();
    this.tryEntries = [];
    this.leapManager = new leap.LeapManager(this);
  }
  var Ep = Emitter.prototype;
  exports.Emitter = Emitter;
  function loc() {
    return t.numericLiteral(-1);
  }
  Ep.mark = function(loc) {
    t.assertLiteral(loc);
    var index = this.listing.length;
    if (loc.value === -1) {
      loc.value = index;
    } else {
      _assert2.default.strictEqual(loc.value, index);
    }
    this.marked[index] = true;
    return loc;
  };
  Ep.emit = function(node) {
    if (t.isExpression(node)) {
      node = t.expressionStatement(node);
    }
    t.assertStatement(node);
    this.listing.push(node);
  };
  Ep.emitAssign = function(lhs, rhs) {
    this.emit(this.assign(lhs, rhs));
    return lhs;
  };
  Ep.assign = function(lhs, rhs) {
    return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
  };
  Ep.contextProperty = function(name, computed) {
    return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
  };
  Ep.stop = function(rval) {
    if (rval) {
      this.setReturnValue(rval);
    }
    this.jump(this.finalLoc);
  };
  Ep.setReturnValue = function(valuePath) {
    t.assertExpression(valuePath.value);
    this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
  };
  Ep.clearPendingException = function(tryLoc, assignee) {
    t.assertLiteral(tryLoc);
    var catchCall = t.callExpression(this.contextProperty("catch", true), [tryLoc]);
    if (assignee) {
      this.emitAssign(assignee, catchCall);
    } else {
      this.emit(catchCall);
    }
  };
  Ep.jump = function(toLoc) {
    this.emitAssign(this.contextProperty("next"), toLoc);
    this.emit(t.breakStatement());
  };
  Ep.jumpIf = function(test, toLoc) {
    t.assertExpression(test);
    t.assertLiteral(toLoc);
    this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
  };
  Ep.jumpIfNot = function(test, toLoc) {
    t.assertExpression(test);
    t.assertLiteral(toLoc);
    var negatedTest = void 0;
    if (t.isUnaryExpression(test) && test.operator === "!") {
      negatedTest = test.argument;
    } else {
      negatedTest = t.unaryExpression("!", test);
    }
    this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
  };
  Ep.makeTempVar = function() {
    return this.contextProperty("t" + this.nextTempId++);
  };
  Ep.getContextFunction = function(id) {
    return t.functionExpression(id || null, [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, false);
  };
  Ep.getDispatchLoop = function() {
    var self = this;
    var cases = [];
    var current = void 0;
    var alreadyEnded = false;
    self.listing.forEach(function(stmt, i) {
      if (self.marked.hasOwnProperty(i)) {
        cases.push(t.switchCase(t.numericLiteral(i), current = []));
        alreadyEnded = false;
      }
      if (!alreadyEnded) {
        current.push(stmt);
        if (t.isCompletionStatement(stmt))
          alreadyEnded = true;
      }
    });
    this.finalLoc.value = this.listing.length;
    cases.push(t.switchCase(this.finalLoc, []), t.switchCase(t.stringLiteral("end"), [t.returnStatement(t.callExpression(this.contextProperty("stop"), []))]));
    return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
  };
  Ep.getTryLocsList = function() {
    if (this.tryEntries.length === 0) {
      return null;
    }
    var lastLocValue = 0;
    return t.arrayExpression(this.tryEntries.map(function(tryEntry) {
      var thisLocValue = tryEntry.firstLoc.value;
      _assert2.default.ok(thisLocValue >= lastLocValue, "try entries out of order");
      lastLocValue = thisLocValue;
      var ce = tryEntry.catchEntry;
      var fe = tryEntry.finallyEntry;
      var locs = [tryEntry.firstLoc, ce ? ce.firstLoc : null];
      if (fe) {
        locs[2] = fe.firstLoc;
        locs[3] = fe.afterLoc;
      }
      return t.arrayExpression(locs);
    }));
  };
  Ep.explode = function(path, ignoreResult) {
    var node = path.node;
    var self = this;
    t.assertNode(node);
    if (t.isDeclaration(node))
      throw getDeclError(node);
    if (t.isStatement(node))
      return self.explodeStatement(path);
    if (t.isExpression(node))
      return self.explodeExpression(path, ignoreResult);
    switch (node.type) {
      case "Program":
        return path.get("body").map(self.explodeStatement, self);
      case "VariableDeclarator":
        throw getDeclError(node);
      case "Property":
      case "SwitchCase":
      case "CatchClause":
        throw new Error(node.type + " nodes should be handled by their parents");
      default:
        throw new Error("unknown Node of type " + (0, _stringify2.default)(node.type));
    }
  };
  function getDeclError(node) {
    return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + (0, _stringify2.default)(node));
  }
  Ep.explodeStatement = function(path, labelId) {
    var stmt = path.node;
    var self = this;
    var before = void 0,
        after = void 0,
        head = void 0;
    t.assertStatement(stmt);
    if (labelId) {
      t.assertIdentifier(labelId);
    } else {
      labelId = null;
    }
    if (t.isBlockStatement(stmt)) {
      path.get("body").forEach(function(path) {
        self.explodeStatement(path);
      });
      return;
    }
    if (!meta.containsLeap(stmt)) {
      self.emit(stmt);
      return;
    }
    switch (stmt.type) {
      case "ExpressionStatement":
        self.explodeExpression(path.get("expression"), true);
        break;
      case "LabeledStatement":
        after = loc();
        self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function() {
          self.explodeStatement(path.get("body"), stmt.label);
        });
        self.mark(after);
        break;
      case "WhileStatement":
        before = loc();
        after = loc();
        self.mark(before);
        self.jumpIfNot(self.explodeExpression(path.get("test")), after);
        self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function() {
          self.explodeStatement(path.get("body"));
        });
        self.jump(before);
        self.mark(after);
        break;
      case "DoWhileStatement":
        var first = loc();
        var test = loc();
        after = loc();
        self.mark(first);
        self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function() {
          self.explode(path.get("body"));
        });
        self.mark(test);
        self.jumpIf(self.explodeExpression(path.get("test")), first);
        self.mark(after);
        break;
      case "ForStatement":
        head = loc();
        var update = loc();
        after = loc();
        if (stmt.init) {
          self.explode(path.get("init"), true);
        }
        self.mark(head);
        if (stmt.test) {
          self.jumpIfNot(self.explodeExpression(path.get("test")), after);
        } else {}
        self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function() {
          self.explodeStatement(path.get("body"));
        });
        self.mark(update);
        if (stmt.update) {
          self.explode(path.get("update"), true);
        }
        self.jump(head);
        self.mark(after);
        break;
      case "TypeCastExpression":
        return self.explodeExpression(path.get("expression"));
      case "ForInStatement":
        head = loc();
        after = loc();
        var keyIterNextFn = self.makeTempVar();
        self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));
        self.mark(head);
        var keyInfoTmpVar = self.makeTempVar();
        self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier("done"), false), after);
        self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier("value"), false));
        self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function() {
          self.explodeStatement(path.get("body"));
        });
        self.jump(head);
        self.mark(after);
        break;
      case "BreakStatement":
        self.emitAbruptCompletion({
          type: "break",
          target: self.leapManager.getBreakLoc(stmt.label)
        });
        break;
      case "ContinueStatement":
        self.emitAbruptCompletion({
          type: "continue",
          target: self.leapManager.getContinueLoc(stmt.label)
        });
        break;
      case "SwitchStatement":
        var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));
        after = loc();
        var defaultLoc = loc();
        var condition = defaultLoc;
        var caseLocs = [];
        var cases = stmt.cases || [];
        for (var i = cases.length - 1; i >= 0; --i) {
          var c = cases[i];
          t.assertSwitchCase(c);
          if (c.test) {
            condition = t.conditionalExpression(t.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
          } else {
            caseLocs[i] = defaultLoc;
          }
        }
        var discriminant = path.get("discriminant");
        discriminant.replaceWith(condition);
        self.jump(self.explodeExpression(discriminant));
        self.leapManager.withEntry(new leap.SwitchEntry(after), function() {
          path.get("cases").forEach(function(casePath) {
            var i = casePath.key;
            self.mark(caseLocs[i]);
            casePath.get("consequent").forEach(function(path) {
              self.explodeStatement(path);
            });
          });
        });
        self.mark(after);
        if (defaultLoc.value === -1) {
          self.mark(defaultLoc);
          _assert2.default.strictEqual(after.value, defaultLoc.value);
        }
        break;
      case "IfStatement":
        var elseLoc = stmt.alternate && loc();
        after = loc();
        self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);
        self.explodeStatement(path.get("consequent"));
        if (elseLoc) {
          self.jump(after);
          self.mark(elseLoc);
          self.explodeStatement(path.get("alternate"));
        }
        self.mark(after);
        break;
      case "ReturnStatement":
        self.emitAbruptCompletion({
          type: "return",
          value: self.explodeExpression(path.get("argument"))
        });
        break;
      case "WithStatement":
        throw new Error("WithStatement not supported in generator functions.");
      case "TryStatement":
        after = loc();
        var handler = stmt.handler;
        var catchLoc = handler && loc();
        var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);
        var finallyLoc = stmt.finalizer && loc();
        var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);
        var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);
        self.tryEntries.push(tryEntry);
        self.updateContextPrevLoc(tryEntry.firstLoc);
        self.leapManager.withEntry(tryEntry, function() {
          self.explodeStatement(path.get("block"));
          if (catchLoc) {
            (function() {
              if (finallyLoc) {
                self.jump(finallyLoc);
              } else {
                self.jump(after);
              }
              self.updateContextPrevLoc(self.mark(catchLoc));
              var bodyPath = path.get("handler.body");
              var safeParam = self.makeTempVar();
              self.clearPendingException(tryEntry.firstLoc, safeParam);
              bodyPath.traverse(catchParamVisitor, {
                safeParam: safeParam,
                catchParamName: handler.param.name
              });
              self.leapManager.withEntry(catchEntry, function() {
                self.explodeStatement(bodyPath);
              });
            })();
          }
          if (finallyLoc) {
            self.updateContextPrevLoc(self.mark(finallyLoc));
            self.leapManager.withEntry(finallyEntry, function() {
              self.explodeStatement(path.get("finalizer"));
            });
            self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
          }
        });
        self.mark(after);
        break;
      case "ThrowStatement":
        self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));
        break;
      default:
        throw new Error("unknown Statement of type " + (0, _stringify2.default)(stmt.type));
    }
  };
  var catchParamVisitor = {
    Identifier: function Identifier(path, state) {
      if (path.node.name === state.catchParamName && util.isReference(path)) {
        path.replaceWith(state.safeParam);
      }
    },
    Scope: function Scope(path, state) {
      if (path.scope.hasOwnBinding(state.catchParamName)) {
        path.skip();
      }
    }
  };
  Ep.emitAbruptCompletion = function(record) {
    if (!isValidCompletion(record)) {
      _assert2.default.ok(false, "invalid completion record: " + (0, _stringify2.default)(record));
    }
    _assert2.default.notStrictEqual(record.type, "normal", "normal completions are not abrupt");
    var abruptArgs = [t.stringLiteral(record.type)];
    if (record.type === "break" || record.type === "continue") {
      t.assertLiteral(record.target);
      abruptArgs[1] = record.target;
    } else if (record.type === "return" || record.type === "throw") {
      if (record.value) {
        t.assertExpression(record.value);
        abruptArgs[1] = record.value;
      }
    }
    this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
  };
  function isValidCompletion(record) {
    var type = record.type;
    if (type === "normal") {
      return !hasOwn.call(record, "target");
    }
    if (type === "break" || type === "continue") {
      return !hasOwn.call(record, "value") && t.isLiteral(record.target);
    }
    if (type === "return" || type === "throw") {
      return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
    }
    return false;
  }
  Ep.getUnmarkedCurrentLoc = function() {
    return t.numericLiteral(this.listing.length);
  };
  Ep.updateContextPrevLoc = function(loc) {
    if (loc) {
      t.assertLiteral(loc);
      if (loc.value === -1) {
        loc.value = this.listing.length;
      } else {
        _assert2.default.strictEqual(loc.value, this.listing.length);
      }
    } else {
      loc = this.getUnmarkedCurrentLoc();
    }
    this.emitAssign(this.contextProperty("prev"), loc);
  };
  Ep.explodeExpression = function(path, ignoreResult) {
    var expr = path.node;
    if (expr) {
      t.assertExpression(expr);
    } else {
      return expr;
    }
    var self = this;
    var result = void 0;
    var after = void 0;
    function finish(expr) {
      t.assertExpression(expr);
      if (ignoreResult) {
        self.emit(expr);
      } else {
        return expr;
      }
    }
    if (!meta.containsLeap(expr)) {
      return finish(expr);
    }
    var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);
    function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
      _assert2.default.ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");
      var result = self.explodeExpression(childPath, ignoreChildResult);
      if (ignoreChildResult) {} else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
        result = self.emitAssign(tempVar || self.makeTempVar(), result);
      }
      return result;
    }
    switch (expr.type) {
      case "MemberExpression":
        return finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed));
      case "CallExpression":
        var calleePath = path.get("callee");
        var argsPath = path.get("arguments");
        var newCallee = void 0;
        var newArgs = [];
        var hasLeapingArgs = false;
        argsPath.forEach(function(argPath) {
          hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);
        });
        if (t.isMemberExpression(calleePath.node)) {
          if (hasLeapingArgs) {
            var newObject = explodeViaTempVar(self.makeTempVar(), calleePath.get("object"));
            var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.node.property;
            newArgs.unshift(newObject);
            newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier("call"), false);
          } else {
            newCallee = self.explodeExpression(calleePath);
          }
        } else {
          newCallee = self.explodeExpression(calleePath);
          if (t.isMemberExpression(newCallee)) {
            newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);
          }
        }
        argsPath.forEach(function(argPath) {
          newArgs.push(explodeViaTempVar(null, argPath));
        });
        return finish(t.callExpression(newCallee, newArgs));
      case "NewExpression":
        return finish(t.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function(argPath) {
          return explodeViaTempVar(null, argPath);
        })));
      case "ObjectExpression":
        return finish(t.objectExpression(path.get("properties").map(function(propPath) {
          if (propPath.isObjectProperty()) {
            return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get("value")), propPath.node.computed);
          } else {
            return propPath.node;
          }
        })));
      case "ArrayExpression":
        return finish(t.arrayExpression(path.get("elements").map(function(elemPath) {
          return explodeViaTempVar(null, elemPath);
        })));
      case "SequenceExpression":
        var lastIndex = expr.expressions.length - 1;
        path.get("expressions").forEach(function(exprPath) {
          if (exprPath.key === lastIndex) {
            result = self.explodeExpression(exprPath, ignoreResult);
          } else {
            self.explodeExpression(exprPath, true);
          }
        });
        return result;
      case "LogicalExpression":
        after = loc();
        if (!ignoreResult) {
          result = self.makeTempVar();
        }
        var left = explodeViaTempVar(result, path.get("left"));
        if (expr.operator === "&&") {
          self.jumpIfNot(left, after);
        } else {
          _assert2.default.strictEqual(expr.operator, "||");
          self.jumpIf(left, after);
        }
        explodeViaTempVar(result, path.get("right"), ignoreResult);
        self.mark(after);
        return result;
      case "ConditionalExpression":
        var elseLoc = loc();
        after = loc();
        var test = self.explodeExpression(path.get("test"));
        self.jumpIfNot(test, elseLoc);
        if (!ignoreResult) {
          result = self.makeTempVar();
        }
        explodeViaTempVar(result, path.get("consequent"), ignoreResult);
        self.jump(after);
        self.mark(elseLoc);
        explodeViaTempVar(result, path.get("alternate"), ignoreResult);
        self.mark(after);
        return result;
      case "UnaryExpression":
        return finish(t.unaryExpression(expr.operator, self.explodeExpression(path.get("argument")), !!expr.prefix));
      case "BinaryExpression":
        return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))));
      case "AssignmentExpression":
        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));
      case "UpdateExpression":
        return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));
      case "YieldExpression":
        after = loc();
        var arg = expr.argument && self.explodeExpression(path.get("argument"));
        if (arg && expr.delegate) {
          var _result = self.makeTempVar();
          self.emit(t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [arg, t.stringLiteral(_result.property.name), after])));
          self.mark(after);
          return _result;
        }
        self.emitAssign(self.contextProperty("next"), after);
        self.emit(t.returnStatement(arg || null));
        self.mark(after);
        return self.contextProperty("sent");
      default:
        throw new Error("unknown Expression of type " + (0, _stringify2.default)(expr.type));
    }
  };
  return module.exports;
});

$__System.registerDynamic("fb", ["9f", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  exports.getBindingIdentifiers = getBindingIdentifiers;
  exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function getBindingIdentifiers(node, duplicates, outerOnly) {
    var search = [].concat(node);
    var ids = (0, _create2.default)(null);
    while (search.length) {
      var id = search.shift();
      if (!id)
        continue;
      var keys = t.getBindingIdentifiers.keys[id.type];
      if (t.isIdentifier(id)) {
        if (duplicates) {
          var _ids = ids[id.name] = ids[id.name] || [];
          _ids.push(id);
        } else {
          ids[id.name] = id;
        }
        continue;
      }
      if (t.isExportDeclaration(id)) {
        if (t.isDeclaration(node.declaration)) {
          search.push(node.declaration);
        }
        continue;
      }
      if (outerOnly) {
        if (t.isFunctionDeclaration(id)) {
          search.push(id.id);
          continue;
        }
        if (t.isFunctionExpression(id)) {
          continue;
        }
      }
      if (keys) {
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (id[key]) {
            search = search.concat(id[key]);
          }
        }
      }
    }
    return ids;
  }
  getBindingIdentifiers.keys = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    RestProperty: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  function getOuterBindingIdentifiers(node, duplicates) {
    return getBindingIdentifiers(node, duplicates, true);
  }
  return module.exports;
});

$__System.registerDynamic("fc", ["f", "fb", "fe", "9", "fd"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.isBinding = isBinding;
  exports.isReferenced = isReferenced;
  exports.isValidIdentifier = isValidIdentifier;
  exports.isLet = isLet;
  exports.isBlockScoped = isBlockScoped;
  exports.isVar = isVar;
  exports.isSpecifierDefault = isSpecifierDefault;
  exports.isScope = isScope;
  exports.isImmutable = isImmutable;
  var _retrievers = $__require('fb');
  var _esutils = $__require('fe');
  var _esutils2 = _interopRequireDefault(_esutils);
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  var _constants = $__require('fd');
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function isBinding(node, parent) {
    var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
    if (keys) {
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var val = parent[key];
        if (Array.isArray(val)) {
          if (val.indexOf(node) >= 0)
            return true;
        } else {
          if (val === node)
            return true;
        }
      }
    }
    return false;
  }
  function isReferenced(node, parent) {
    switch (parent.type) {
      case "BindExpression":
        return parent.object === node || parent.callee === node;
      case "MemberExpression":
      case "JSXMemberExpression":
        if (parent.property === node && parent.computed) {
          return true;
        } else if (parent.object === node) {
          return true;
        } else {
          return false;
        }
      case "MetaProperty":
        return false;
      case "ObjectProperty":
        if (parent.key === node) {
          return parent.computed;
        }
      case "VariableDeclarator":
        return parent.id !== node;
      case "ArrowFunctionExpression":
      case "FunctionDeclaration":
      case "FunctionExpression":
        for (var _iterator = parent.params,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var param = _ref;
          if (param === node)
            return false;
        }
        return parent.id !== node;
      case "ExportSpecifier":
        if (parent.source) {
          return false;
        } else {
          return parent.local === node;
        }
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return false;
      case "JSXAttribute":
        return parent.name !== node;
      case "ClassProperty":
        return parent.value === node;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return false;
      case "ClassDeclaration":
      case "ClassExpression":
        return parent.id !== node;
      case "ClassMethod":
      case "ObjectMethod":
        return parent.key === node && parent.computed;
      case "LabeledStatement":
        return false;
      case "CatchClause":
        return parent.param !== node;
      case "RestElement":
        return false;
      case "AssignmentExpression":
        return parent.right === node;
      case "AssignmentPattern":
        return parent.right === node;
      case "ObjectPattern":
      case "ArrayPattern":
        return false;
    }
    return true;
  }
  function isValidIdentifier(name) {
    if (typeof name !== "string" || _esutils2.default.keyword.isReservedWordES6(name, true)) {
      return false;
    } else {
      return (_esutils2.default.keyword.isIdentifierNameES6(name));
    }
  }
  function isLet(node) {
    return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
  }
  function isBlockScoped(node) {
    return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
  }
  function isVar(node) {
    return t.isVariableDeclaration(node, {kind: "var"}) && !node[_constants.BLOCK_SCOPED_SYMBOL];
  }
  function isSpecifierDefault(specifier) {
    return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, {name: "default"});
  }
  function isScope(node, parent) {
    if (t.isBlockStatement(node) && t.isFunction(parent, {body: node})) {
      return false;
    }
    return t.isScopable(node);
  }
  function isImmutable(node) {
    if (t.isType(node.type, "Immutable"))
      return true;
    if (t.isIdentifier(node)) {
      if (node.name === "undefined") {
        return true;
      } else {
        return false;
      }
    }
    return false;
  }
  return module.exports;
});

$__System.registerDynamic("ff", ["52", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
  return module.exports;
});

$__System.registerDynamic("100", ["ff", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('ff');
  module.exports = 0x1fffffffffffff;
  return module.exports;
});

$__System.registerDynamic("101", ["100", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('100'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("102", ["103", "6f"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseFor = $__require('103'),
      keysIn = $__require('6f');
  function baseForIn(object, iteratee) {
    return baseFor(object, iteratee, keysIn);
  }
  module.exports = baseForIn;
  return module.exports;
});

$__System.registerDynamic("73", ["102", "72", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseForIn = $__require('102'),
      isArguments = $__require('72'),
      isObjectLike = $__require('5a');
  var objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;
  function isPlainObject(value) {
    var Ctor;
    if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) || (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
      return false;
    }
    var result;
    baseForIn(value, function(subValue, key) {
      result = key;
    });
    return result === undefined || hasOwnProperty.call(value, result);
  }
  module.exports = isPlainObject;
  return module.exports;
});

$__System.registerDynamic("3a", ["5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObjectLike = $__require('5a');
  var numberTag = '[object Number]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isNumber(value) {
    return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
  }
  module.exports = isNumber;
  return module.exports;
});

$__System.registerDynamic("64", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  var regexpTag = '[object RegExp]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isRegExp(value) {
    return isObject(value) && objToString.call(value) == regexpTag;
  }
  module.exports = isRegExp;
  return module.exports;
});

$__System.registerDynamic("104", ["101", "40", "f", "73", "3a", "64", "63", "9", "18"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _maxSafeInteger = $__require('101');
  var _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.toComputedKey = toComputedKey;
  exports.toSequenceExpression = toSequenceExpression;
  exports.toKeyAlias = toKeyAlias;
  exports.toIdentifier = toIdentifier;
  exports.toBindingIdentifierName = toBindingIdentifierName;
  exports.toStatement = toStatement;
  exports.toExpression = toExpression;
  exports.toBlock = toBlock;
  exports.valueToNode = valueToNode;
  var _isPlainObject = $__require('73');
  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
  var _isNumber = $__require('3a');
  var _isNumber2 = _interopRequireDefault(_isNumber);
  var _isRegExp = $__require('64');
  var _isRegExp2 = _interopRequireDefault(_isRegExp);
  var _isString = $__require('63');
  var _isString2 = _interopRequireDefault(_isString);
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function toComputedKey(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
    if (!node.computed) {
      if (t.isIdentifier(key))
        key = t.stringLiteral(key.name);
    }
    return key;
  }
  function toSequenceExpression(nodes, scope) {
    if (!nodes || !nodes.length)
      return;
    var declars = [];
    var bailed = false;
    var result = convert(nodes);
    if (bailed)
      return;
    for (var i = 0; i < declars.length; i++) {
      scope.push(declars[i]);
    }
    return result;
    function convert(nodes) {
      var ensureLastUndefined = false;
      var exprs = [];
      for (var _iterator = nodes,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var node = _ref;
        if (t.isExpression(node)) {
          exprs.push(node);
        } else if (t.isExpressionStatement(node)) {
          exprs.push(node.expression);
        } else if (t.isVariableDeclaration(node)) {
          if (node.kind !== "var")
            return bailed = true;
          for (var _iterator2 = node.declarations,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
            var _ref2;
            if (_isArray2) {
              if (_i2 >= _iterator2.length)
                break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done)
                break;
              _ref2 = _i2.value;
            }
            var declar = _ref2;
            var bindings = t.getBindingIdentifiers(declar);
            for (var key in bindings) {
              declars.push({
                kind: node.kind,
                id: bindings[key]
              });
            }
            if (declar.init) {
              exprs.push(t.assignmentExpression("=", declar.id, declar.init));
            }
          }
          ensureLastUndefined = true;
          continue;
        } else if (t.isIfStatement(node)) {
          var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
          var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
          if (!consequent || !alternate)
            return bailed = true;
          exprs.push(t.conditionalExpression(node.test, consequent, alternate));
        } else if (t.isBlockStatement(node)) {
          exprs.push(convert(node.body));
        } else if (t.isEmptyStatement(node)) {
          ensureLastUndefined = true;
          continue;
        } else {
          return bailed = true;
        }
        ensureLastUndefined = false;
      }
      if (ensureLastUndefined || exprs.length === 0) {
        exprs.push(scope.buildUndefinedNode());
      }
      if (exprs.length === 1) {
        return exprs[0];
      } else {
        return t.sequenceExpression(exprs);
      }
    }
  }
  var traverse = void 0;
  function toKeyAlias(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
    if (!traverse)
      traverse = $__require('18').default;
    var alias = void 0;
    if (node.kind === "method") {
      return toKeyAlias.increment() + "";
    } else if (t.isIdentifier(key)) {
      alias = key.name;
    } else if (t.isStringLiteral(key)) {
      alias = (0, _stringify2.default)(key.value);
    } else {
      alias = (0, _stringify2.default)(traverse.removeProperties(t.cloneDeep(key)));
    }
    if (node.computed) {
      alias = "[" + alias + "]";
    }
    if (node.static) {
      alias = "static:" + alias;
    }
    return alias;
  }
  toKeyAlias.uid = 0;
  toKeyAlias.increment = function() {
    if (toKeyAlias.uid >= _maxSafeInteger2.default) {
      return toKeyAlias.uid = 0;
    } else {
      return toKeyAlias.uid++;
    }
  };
  function toIdentifier(name) {
    name = name + "";
    name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
    name = name.replace(/^[-0-9]+/, "");
    name = name.replace(/[-\s]+(.)?/g, function(match, c) {
      return c ? c.toUpperCase() : "";
    });
    if (!t.isValidIdentifier(name)) {
      name = "_" + name;
    }
    return name || "_";
  }
  function toBindingIdentifierName(name) {
    name = toIdentifier(name);
    if (name === "eval" || name === "arguments")
      name = "_" + name;
    return name;
  }
  function toStatement(node, ignore) {
    if (t.isStatement(node)) {
      return node;
    }
    var mustHaveId = false;
    var newType = void 0;
    if (t.isClass(node)) {
      mustHaveId = true;
      newType = "ClassDeclaration";
    } else if (t.isFunction(node)) {
      mustHaveId = true;
      newType = "FunctionDeclaration";
    } else if (t.isAssignmentExpression(node)) {
      return t.expressionStatement(node);
    }
    if (mustHaveId && !node.id) {
      newType = false;
    }
    if (!newType) {
      if (ignore) {
        return false;
      } else {
        throw new Error("cannot turn " + node.type + " to a statement");
      }
    }
    node.type = newType;
    return node;
  }
  function toExpression(node) {
    if (t.isExpressionStatement(node)) {
      node = node.expression;
    }
    if (t.isClass(node)) {
      node.type = "ClassExpression";
    } else if (t.isFunction(node)) {
      node.type = "FunctionExpression";
    }
    if (t.isExpression(node)) {
      return node;
    } else {
      throw new Error("cannot turn " + node.type + " to an expression");
    }
  }
  function toBlock(node, parent) {
    if (t.isBlockStatement(node)) {
      return node;
    }
    if (t.isEmptyStatement(node)) {
      node = [];
    }
    if (!Array.isArray(node)) {
      if (!t.isStatement(node)) {
        if (t.isFunction(parent)) {
          node = t.returnStatement(node);
        } else {
          node = t.expressionStatement(node);
        }
      }
      node = [node];
    }
    return t.blockStatement(node);
  }
  function valueToNode(value) {
    if (value === undefined) {
      return t.identifier("undefined");
    }
    if (value === true || value === false) {
      return t.booleanLiteral(value);
    }
    if (value === null) {
      return t.nullLiteral();
    }
    if ((0, _isString2.default)(value)) {
      return t.stringLiteral(value);
    }
    if ((0, _isNumber2.default)(value)) {
      return t.numericLiteral(value);
    }
    if ((0, _isRegExp2.default)(value)) {
      var pattern = value.source;
      var flags = value.toString().match(/\/([a-z]+|)$/)[1];
      return t.regExpLiteral(pattern, flags);
    }
    if (Array.isArray(value)) {
      return t.arrayExpression(value.map(t.valueToNode));
    }
    if ((0, _isPlainObject2.default)(value)) {
      var props = [];
      for (var key in value) {
        var nodeKey = void 0;
        if (t.isValidIdentifier(key)) {
          nodeKey = t.identifier(key);
        } else {
          nodeKey = t.stringLiteral(key);
        }
        props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
      }
      return t.objectExpression(props);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  return module.exports;
});

$__System.registerDynamic("105", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
  exports.removeTypeDuplicates = removeTypeDuplicates;
  exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function createUnionTypeAnnotation(types) {
    var flattened = removeTypeDuplicates(types);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return t.unionTypeAnnotation(flattened);
    }
  }
  function removeTypeDuplicates(nodes) {
    var generics = {};
    var bases = {};
    var typeGroups = [];
    var types = [];
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (!node)
        continue;
      if (types.indexOf(node) >= 0) {
        continue;
      }
      if (t.isAnyTypeAnnotation(node)) {
        return [node];
      }
      if (t.isFlowBaseAnnotation(node)) {
        bases[node.type] = node;
        continue;
      }
      if (t.isUnionTypeAnnotation(node)) {
        if (typeGroups.indexOf(node.types) < 0) {
          nodes = nodes.concat(node.types);
          typeGroups.push(node.types);
        }
        continue;
      }
      if (t.isGenericTypeAnnotation(node)) {
        var name = node.id.name;
        if (generics[name]) {
          var existing = generics[name];
          if (existing.typeParameters) {
            if (node.typeParameters) {
              existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
            }
          } else {
            existing = node.typeParameters;
          }
        } else {
          generics[name] = node;
        }
        continue;
      }
      types.push(node);
    }
    for (var type in bases) {
      types.push(bases[type]);
    }
    for (var _name in generics) {
      types.push(generics[_name]);
    }
    return types;
  }
  function createTypeAnnotationBasedOnTypeof(type) {
    if (type === "string") {
      return t.stringTypeAnnotation();
    } else if (type === "number") {
      return t.numberTypeAnnotation();
    } else if (type === "undefined") {
      return t.voidTypeAnnotation();
    } else if (type === "boolean") {
      return t.booleanTypeAnnotation();
    } else if (type === "function") {
      return t.genericTypeAnnotation(t.identifier("Function"));
    } else if (type === "object") {
      return t.genericTypeAnnotation(t.identifier("Object"));
    } else if (type === "symbol") {
      return t.genericTypeAnnotation(t.identifier("Symbol"));
    } else {
      throw new Error("Invalid typeof value");
    }
  }
  return module.exports;
});

$__System.registerDynamic("106", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function toFastProperties(obj) {
    function f() {}
    f.prototype = obj;
    new f();
    return;
    eval(obj);
  };
  return module.exports;
});

$__System.registerDynamic("107", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = -1,
        result = [];
    while (++index < length) {
      var value = array[index];
      if (value) {
        result[++resIndex] = value;
      }
    }
    return result;
  }
  module.exports = compact;
  return module.exports;
});

$__System.registerDynamic("108", ["109", "f0", "10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var getLength = $__require('109'),
      isLength = $__require('f0'),
      toObject = $__require('10a');
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        return eachFunc(collection, iteratee);
      }
      var index = fromRight ? length : -1,
          iterable = toObject(collection);
      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  module.exports = createBaseEach;
  return module.exports;
});

$__System.registerDynamic("48", ["10b", "108"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseForOwn = $__require('10b'),
      createBaseEach = $__require('108');
  var baseEach = createBaseEach(baseForOwn);
  module.exports = baseEach;
  return module.exports;
});

$__System.registerDynamic("10c", ["eb", "34"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var bindCallback = $__require('eb'),
      isArray = $__require('34');
  function createForEach(arrayFunc, eachFunc) {
    return function(collection, iteratee, thisArg) {
      return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection)) ? arrayFunc(collection, iteratee) : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
    };
  }
  module.exports = createForEach;
  return module.exports;
});

$__System.registerDynamic("10d", ["76", "48", "10c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arrayEach = $__require('76'),
      baseEach = $__require('48'),
      createForEach = $__require('10c');
  var forEach = createForEach(arrayEach, baseEach);
  module.exports = forEach;
  return module.exports;
});

$__System.registerDynamic("8", ["10d"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('10d');
  return module.exports;
});

$__System.registerDynamic("10e", ["10f", "10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIsEqual = $__require('10f'),
      toObject = $__require('10a');
  function baseIsMatch(object, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = toObject(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2]) ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var result = customizer ? customizer(objValue, srcValue, key) : undefined;
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  module.exports = baseIsMatch;
  return module.exports;
});

$__System.registerDynamic("110", ["78", "10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var keys = $__require('78'),
      toObject = $__require('10a');
  function pairs(object) {
    object = toObject(object);
    var index = -1,
        props = keys(object),
        length = props.length,
        result = Array(length);
    while (++index < length) {
      var key = props[index];
      result[index] = [key, object[key]];
    }
    return result;
  }
  module.exports = pairs;
  return module.exports;
});

$__System.registerDynamic("111", ["112", "110"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isStrictComparable = $__require('112'),
      pairs = $__require('110');
  function getMatchData(object) {
    var result = pairs(object),
        length = result.length;
    while (length--) {
      result[length][2] = isStrictComparable(result[length][1]);
    }
    return result;
  }
  module.exports = getMatchData;
  return module.exports;
});

$__System.registerDynamic("113", ["10e", "111", "10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIsMatch = $__require('10e'),
      getMatchData = $__require('111'),
      toObject = $__require('10a');
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      var key = matchData[0][0],
          value = matchData[0][1];
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === value && (value !== undefined || (key in toObject(object)));
      };
    }
    return function(object) {
      return baseIsMatch(object, matchData);
    };
  }
  module.exports = baseMatches;
  return module.exports;
});

$__System.registerDynamic("114", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  module.exports = arraySome;
  return module.exports;
});

$__System.registerDynamic("115", ["114"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arraySome = $__require('114');
  function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var index = -1,
        arrLength = array.length,
        othLength = other.length;
    if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
      return false;
    }
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index],
          result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
      if (result !== undefined) {
        if (result) {
          continue;
        }
        return false;
      }
      if (isLoose) {
        if (!arraySome(other, function(othValue) {
          return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
        })) {
          return false;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
        return false;
      }
    }
    return true;
  }
  module.exports = equalArrays;
  return module.exports;
});

$__System.registerDynamic("116", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';
  function equalByTag(object, other, tag) {
    switch (tag) {
      case boolTag:
      case dateTag:
        return +object == +other;
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case numberTag:
        return (object != +object) ? other != +other : object == +other;
      case regexpTag:
      case stringTag:
        return object == (other + '');
    }
    return false;
  }
  module.exports = equalByTag;
  return module.exports;
});

$__System.registerDynamic("117", ["78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var keys = $__require('78');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;
    if (objLength != othLength && !isLoose) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var skipCtor = isLoose;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key],
          result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;
      if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
        return false;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (!skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;
      if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        return false;
      }
    }
    return true;
  }
  module.exports = equalObjects;
  return module.exports;
});

$__System.registerDynamic("74", ["f0", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isLength = $__require('f0'),
      isObjectLike = $__require('5a');
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
  }
  module.exports = isTypedArray;
  return module.exports;
});

$__System.registerDynamic("118", ["115", "116", "117", "34", "74"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var equalArrays = $__require('115'),
      equalByTag = $__require('116'),
      equalObjects = $__require('117'),
      isArray = $__require('34'),
      isTypedArray = $__require('74');
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;
  function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;
    if (!objIsArr) {
      objTag = objToString.call(object);
      if (objTag == argsTag) {
        objTag = objectTag;
      } else if (objTag != objectTag) {
        objIsArr = isTypedArray(object);
      }
    }
    if (!othIsArr) {
      othTag = objToString.call(other);
      if (othTag == argsTag) {
        othTag = objectTag;
      } else if (othTag != objectTag) {
        othIsArr = isTypedArray(other);
      }
    }
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;
    if (isSameTag && !(objIsArr || objIsObj)) {
      return equalByTag(object, other, objTag);
    }
    if (!isLoose) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
      if (objIsWrapped || othIsWrapped) {
        return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stackA || (stackA = []);
    stackB || (stackB = []);
    var length = stackA.length;
    while (length--) {
      if (stackA[length] == object) {
        return stackB[length] == other;
      }
    }
    stackA.push(object);
    stackB.push(other);
    var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
    stackA.pop();
    stackB.pop();
    return result;
  }
  module.exports = baseIsEqualDeep;
  return module.exports;
});

$__System.registerDynamic("10f", ["118", "77", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIsEqualDeep = $__require('118'),
      isObject = $__require('77'),
      isObjectLike = $__require('5a');
  function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
  }
  module.exports = baseIsEqual;
  return module.exports;
});

$__System.registerDynamic("ed", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;
    start = start == null ? 0 : (+start || 0);
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = (end === undefined || end > length) ? length : (+end || 0);
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  module.exports = baseSlice;
  return module.exports;
});

$__System.registerDynamic("112", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }
  module.exports = isStrictComparable;
  return module.exports;
});

$__System.registerDynamic("f1", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function last(array) {
    var length = array ? array.length : 0;
    return length ? array[length - 1] : undefined;
  }
  module.exports = last;
  return module.exports;
});

$__System.registerDynamic("119", ["ec", "10f", "ed", "34", "ef", "112", "f1", "10a", "f2"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseGet = $__require('ec'),
      baseIsEqual = $__require('10f'),
      baseSlice = $__require('ed'),
      isArray = $__require('34'),
      isKey = $__require('ef'),
      isStrictComparable = $__require('112'),
      last = $__require('f1'),
      toObject = $__require('10a'),
      toPath = $__require('f2');
  function baseMatchesProperty(path, srcValue) {
    var isArr = isArray(path),
        isCommon = isKey(path) && isStrictComparable(srcValue),
        pathKey = (path + '');
    path = toPath(path);
    return function(object) {
      if (object == null) {
        return false;
      }
      var key = pathKey;
      object = toObject(object);
      if ((isArr || !isCommon) && !(key in object)) {
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        key = last(path);
        object = toObject(object);
      }
      return object[key] === srcValue ? (srcValue !== undefined || (key in object)) : baseIsEqual(srcValue, object[key], undefined, true);
    };
  }
  module.exports = baseMatchesProperty;
  return module.exports;
});

$__System.registerDynamic("ec", ["10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var toObject = $__require('10a');
  function baseGet(object, path, pathKey) {
    if (object == null) {
      return;
    }
    if (pathKey !== undefined && pathKey in toObject(object)) {
      path = [pathKey];
    }
    var index = 0,
        length = path.length;
    while (object != null && index < length) {
      object = object[path[index++]];
    }
    return (index && index == length) ? object : undefined;
  }
  module.exports = baseGet;
  return module.exports;
});

$__System.registerDynamic("58", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }
  module.exports = baseToString;
  return module.exports;
});

$__System.registerDynamic("f2", ["58", "34"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseToString = $__require('58'),
      isArray = $__require('34');
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
  var reEscapeChar = /\\(\\)?/g;
  function toPath(value) {
    if (isArray(value)) {
      return value;
    }
    var result = [];
    baseToString(value).replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  }
  module.exports = toPath;
  return module.exports;
});

$__System.registerDynamic("11a", ["ec", "f2"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseGet = $__require('ec'),
      toPath = $__require('f2');
  function basePropertyDeep(path) {
    var pathKey = (path + '');
    path = toPath(path);
    return function(object) {
      return baseGet(object, path, pathKey);
    };
  }
  module.exports = basePropertyDeep;
  return module.exports;
});

$__System.registerDynamic("ef", ["34", "10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArray = $__require('34'),
      toObject = $__require('10a');
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    var type = typeof value;
    if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
      return true;
    }
    if (isArray(value)) {
      return false;
    }
    var result = !reIsDeepProp.test(value);
    return result || (object != null && value in toObject(object));
  }
  module.exports = isKey;
  return module.exports;
});

$__System.registerDynamic("11b", ["11c", "11a", "ef"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseProperty = $__require('11c'),
      basePropertyDeep = $__require('11a'),
      isKey = $__require('ef');
  function property(path) {
    return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
  }
  module.exports = property;
  return module.exports;
});

$__System.registerDynamic("32", ["113", "119", "eb", "11d", "11b"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseMatches = $__require('113'),
      baseMatchesProperty = $__require('119'),
      bindCallback = $__require('eb'),
      identity = $__require('11d'),
      property = $__require('11b');
  function baseCallback(func, thisArg, argCount) {
    var type = typeof func;
    if (type == 'function') {
      return thisArg === undefined ? func : bindCallback(func, thisArg, argCount);
    }
    if (func == null) {
      return identity;
    }
    if (type == 'object') {
      return baseMatches(func);
    }
    return thisArg === undefined ? property(func) : baseMatchesProperty(func, thisArg);
  }
  module.exports = baseCallback;
  return module.exports;
});

$__System.registerDynamic("11e", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  function cacheIndexOf(cache, value) {
    var data = cache.data,
        result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];
    return result ? 0 : -1;
  }
  module.exports = cacheIndexOf;
  return module.exports;
});

$__System.registerDynamic("11f", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  function cachePush(value) {
    var data = this.data;
    if (typeof value == 'string' || isObject(value)) {
      data.set.add(value);
    } else {
      data.hash[value] = true;
    }
  }
  module.exports = cachePush;
  return module.exports;
});

$__System.registerDynamic("120", ["11f", "121"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var cachePush = $__require('11f'),
      getNative = $__require('121');
  var Set = getNative(global, 'Set');
  var nativeCreate = getNative(Object, 'create');
  function SetCache(values) {
    var length = values ? values.length : 0;
    this.data = {
      'hash': nativeCreate(null),
      'set': new Set
    };
    while (length--) {
      this.push(values[length]);
    }
  }
  SetCache.prototype.push = cachePush;
  module.exports = SetCache;
  return module.exports;
});

$__System.registerDynamic("122", ["120", "121"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var SetCache = $__require('120'),
      getNative = $__require('121');
  var Set = getNative(global, 'Set');
  var nativeCreate = getNative(Object, 'create');
  function createCache(values) {
    return (nativeCreate && Set) ? new SetCache(values) : null;
  }
  module.exports = createCache;
  return module.exports;
});

$__System.registerDynamic("123", ["de", "11e", "122"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIndexOf = $__require('de'),
      cacheIndexOf = $__require('11e'),
      createCache = $__require('122');
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq(array, iteratee) {
    var index = -1,
        indexOf = baseIndexOf,
        length = array.length,
        isCommon = true,
        isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
        seen = isLarge ? createCache() : null,
        result = [];
    if (seen) {
      indexOf = cacheIndexOf;
      isCommon = false;
    } else {
      isLarge = false;
      seen = iteratee ? [] : result;
    }
    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;
      if (isCommon && value === value) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (indexOf(seen, computed, 0) < 0) {
        if (iteratee || isLarge) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }
  module.exports = baseUniq;
  return module.exports;
});

$__System.registerDynamic("124", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;
      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }
  module.exports = sortedUniq;
  return module.exports;
});

$__System.registerDynamic("125", ["32", "123", "4e", "124"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseCallback = $__require('32'),
      baseUniq = $__require('123'),
      isIterateeCall = $__require('4e'),
      sortedUniq = $__require('124');
  function uniq(array, isSorted, iteratee, thisArg) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (isSorted != null && typeof isSorted != 'boolean') {
      thisArg = iteratee;
      iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
      isSorted = false;
    }
    iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
    return (isSorted) ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
  }
  module.exports = uniq;
  return module.exports;
});

$__System.registerDynamic("126", ["127", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('127');
  module.exports = $__require('55').Symbol['for'];
  return module.exports;
});

$__System.registerDynamic("128", ["126", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('126'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("fd", ["128"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;
  var _for = $__require('128');
  var _for2 = _interopRequireDefault(_for);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
  var FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
  var FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
  var COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
  var LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&"];
  var UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];
  var BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
  var EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
  var COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
  var BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
  var NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
  var BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);
  var BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
  var NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
  var STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];
  var UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);
  var INHERIT_KEYS = exports.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  };
  var BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = (0, _for2.default)("var used to be block scoped");
  var NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = (0, _for2.default)("should not be considered a local binding");
  return module.exports;
});

$__System.registerDynamic("129", ["9", "fd", "12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  var _constants = $__require('fd');
  var _index2 = $__require('12a');
  var _index3 = _interopRequireDefault(_index2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  (0, _index3.default)("ArrayExpression", {
    fields: {elements: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
        default: []
      }},
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  (0, _index3.default)("AssignmentExpression", {
    fields: {
      operator: {validate: (0, _index2.assertValueType)("string")},
      left: {validate: (0, _index2.assertNodeType)("LVal")},
      right: {validate: (0, _index2.assertNodeType)("Expression")}
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  (0, _index3.default)("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)},
      left: {validate: (0, _index2.assertNodeType)("Expression")},
      right: {validate: (0, _index2.assertNodeType)("Expression")}
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  (0, _index3.default)("Directive", {
    visitor: ["value"],
    fields: {value: {validate: (0, _index2.assertNodeType)("DirectiveLiteral")}}
  });
  (0, _index3.default)("DirectiveLiteral", {
    builder: ["value"],
    fields: {value: {validate: (0, _index2.assertValueType)("string")}}
  });
  (0, _index3.default)("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
        default: []
      },
      body: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))}
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  (0, _index3.default)("BreakStatement", {
    visitor: ["label"],
    fields: {label: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      }},
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  (0, _index3.default)("CallExpression", {
    visitor: ["callee", "arguments"],
    fields: {
      callee: {validate: (0, _index2.assertNodeType)("Expression")},
      arguments: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))}
    },
    aliases: ["Expression"]
  });
  (0, _index3.default)("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {validate: (0, _index2.assertNodeType)("Identifier")},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement")}
    },
    aliases: ["Scopable"]
  });
  (0, _index3.default)("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {validate: (0, _index2.assertNodeType)("Expression")},
      consequent: {validate: (0, _index2.assertNodeType)("Expression")},
      alternate: {validate: (0, _index2.assertNodeType)("Expression")}
    },
    aliases: ["Expression", "Conditional"]
  });
  (0, _index3.default)("ContinueStatement", {
    visitor: ["label"],
    fields: {label: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      }},
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  (0, _index3.default)("DebuggerStatement", {aliases: ["Statement"]});
  (0, _index3.default)("DoWhileStatement", {
    visitor: ["test", "body"],
    fields: {
      test: {validate: (0, _index2.assertNodeType)("Expression")},
      body: {validate: (0, _index2.assertNodeType)("Statement")}
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  (0, _index3.default)("EmptyStatement", {aliases: ["Statement"]});
  (0, _index3.default)("ExpressionStatement", {
    visitor: ["expression"],
    fields: {expression: {validate: (0, _index2.assertNodeType)("Expression")}},
    aliases: ["Statement", "ExpressionWrapper"]
  });
  (0, _index3.default)("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {program: {validate: (0, _index2.assertNodeType)("Program")}}
  });
  (0, _index3.default)("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {validate: (0, _index2.assertNodeType)("VariableDeclaration", "LVal")},
      right: {validate: (0, _index2.assertNodeType)("Expression")},
      body: {validate: (0, _index2.assertNodeType)("Statement")}
    }
  });
  (0, _index3.default)("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, _index2.assertNodeType)("VariableDeclaration", "Expression"),
        optional: true
      },
      test: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      update: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      body: {validate: (0, _index2.assertNodeType)("Statement")}
    }
  });
  (0, _index3.default)("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "params", "body", "returnType", "typeParameters"],
    fields: {
      id: {validate: (0, _index2.assertNodeType)("Identifier")},
      params: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement")},
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    },
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
  });
  (0, _index3.default)("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: {
      id: {
        validate: (0, _index2.assertNodeType)("Identifier"),
        optional: true
      },
      params: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement")},
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    }
  });
  (0, _index3.default)("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation"],
    aliases: ["Expression", "LVal"],
    fields: {name: {validate: function validate(node, key, val) {
          if (!t.isValidIdentifier(val)) {}
        }}}
  });
  (0, _index3.default)("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {validate: (0, _index2.assertNodeType)("Expression")},
      consequent: {validate: (0, _index2.assertNodeType)("Statement")},
      alternate: {
        optional: true,
        validate: (0, _index2.assertNodeType)("Statement")
      }
    }
  });
  (0, _index3.default)("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {validate: (0, _index2.assertNodeType)("Identifier")},
      body: {validate: (0, _index2.assertNodeType)("Statement")}
    }
  });
  (0, _index3.default)("StringLiteral", {
    builder: ["value"],
    fields: {value: {validate: (0, _index2.assertValueType)("string")}},
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, _index3.default)("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {value: {validate: (0, _index2.assertValueType)("number")}},
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, _index3.default)("NullLiteral", {aliases: ["Expression", "Pureish", "Literal", "Immutable"]});
  (0, _index3.default)("BooleanLiteral", {
    builder: ["value"],
    fields: {value: {validate: (0, _index2.assertValueType)("boolean")}},
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, _index3.default)("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Literal"],
    fields: {
      pattern: {validate: (0, _index2.assertValueType)("string")},
      flags: {
        validate: (0, _index2.assertValueType)("string"),
        default: ""
      }
    }
  });
  (0, _index3.default)("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)},
      left: {validate: (0, _index2.assertNodeType)("Expression")},
      right: {validate: (0, _index2.assertNodeType)("Expression")}
    }
  });
  (0, _index3.default)("MemberExpression", {
    builder: ["object", "property", "computed"],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: {
      object: {validate: (0, _index2.assertNodeType)("Expression")},
      property: {validate: function validate(node, key, val) {
          var expectedType = node.computed ? "Expression" : "Identifier";
          (0, _index2.assertNodeType)(expectedType)(node, key, val);
        }},
      computed: {default: false}
    }
  });
  (0, _index3.default)("NewExpression", {
    visitor: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: {
      callee: {validate: (0, _index2.assertNodeType)("Expression")},
      arguments: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))}
    }
  });
  (0, _index3.default)("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives"],
    fields: {
      directives: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
        default: []
      },
      body: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))}
    },
    aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
  });
  (0, _index3.default)("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {properties: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadProperty")))}}
  });
  (0, _index3.default)("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed"],
    fields: {
      kind: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("method", "get", "set")),
        default: "method"
      },
      computed: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      key: {validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }},
      decorators: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement")},
      generator: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index2.assertValueType)("boolean")
      }
    },
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  (0, _index3.default)("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", "decorators"],
    fields: {
      computed: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      key: {validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }},
      value: {validate: (0, _index2.assertNodeType)("Expression")},
      shorthand: {
        validate: (0, _index2.assertValueType)("boolean"),
        default: false
      },
      decorators: {
        validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator"))),
        optional: true
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"]
  });
  (0, _index3.default)("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    aliases: ["LVal"],
    fields: {argument: {validate: (0, _index2.assertNodeType)("LVal")}}
  });
  (0, _index3.default)("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {argument: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      }}
  });
  (0, _index3.default)("SequenceExpression", {
    visitor: ["expressions"],
    fields: {expressions: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression")))}},
    aliases: ["Expression"]
  });
  (0, _index3.default)("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, _index2.assertNodeType)("Expression"),
        optional: true
      },
      consequent: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))}
    }
  });
  (0, _index3.default)("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {validate: (0, _index2.assertNodeType)("Expression")},
      cases: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("SwitchCase")))}
    }
  });
  (0, _index3.default)("ThisExpression", {aliases: ["Expression"]});
  (0, _index3.default)("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {argument: {validate: (0, _index2.assertNodeType)("Expression")}}
  });
  (0, _index3.default)("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      body: {validate: (0, _index2.assertNodeType)("BlockStatement")},
      handler: {
        optional: true,
        handler: (0, _index2.assertNodeType)("BlockStatement")
      },
      finalizer: {
        optional: true,
        validate: (0, _index2.assertNodeType)("BlockStatement")
      }
    }
  });
  (0, _index3.default)("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {default: true},
      argument: {validate: (0, _index2.assertNodeType)("Expression")},
      operator: {validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)}
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  (0, _index3.default)("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {default: false},
      argument: {validate: (0, _index2.assertNodeType)("Expression")},
      operator: {validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)}
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  (0, _index3.default)("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      kind: {validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("var", "let", "const"))},
      declarations: {validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("VariableDeclarator")))}
    }
  });
  (0, _index3.default)("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {validate: (0, _index2.assertNodeType)("LVal")},
      init: {
        optional: true,
        validate: (0, _index2.assertNodeType)("Expression")
      }
    }
  });
  (0, _index3.default)("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {validate: (0, _index2.assertNodeType)("Expression")},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")}
    }
  });
  (0, _index3.default)("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {object: (0, _index2.assertNodeType)("Expression")},
      body: {validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")}
    }
  });
  return module.exports;
});

$__System.registerDynamic("12b", ["12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('12a');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  (0, _index2.default)("AssignmentPattern", {
    visitor: ["left", "right"],
    aliases: ["Pattern", "LVal"],
    fields: {
      left: {validate: (0, _index.assertNodeType)("Identifier")},
      right: {validate: (0, _index.assertNodeType)("Expression")}
    }
  });
  (0, _index2.default)("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    aliases: ["Pattern", "LVal"],
    fields: {elements: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))}}
  });
  (0, _index2.default)("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["params", "body", "returnType"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: {
      params: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))},
      body: {validate: (0, _index.assertNodeType)("BlockStatement", "Expression")},
      async: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      }
    }
  });
  (0, _index2.default)("ClassBody", {
    visitor: ["body"],
    fields: {body: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ClassMethod", "ClassProperty")))}}
  });
  (0, _index2.default)("ClassDeclaration", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
    aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
    fields: {
      id: {validate: (0, _index.assertNodeType)("Identifier")},
      body: {validate: (0, _index.assertNodeType)("ClassBody")},
      superClass: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      },
      decorators: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))}
    }
  });
  (0, _index2.default)("ClassExpression", {
    inherits: "ClassDeclaration",
    aliases: ["Scopable", "Class", "Expression", "Pureish"],
    fields: {
      id: {
        optional: true,
        validate: (0, _index.assertNodeType)("Identifier")
      },
      body: {validate: (0, _index.assertNodeType)("ClassBody")},
      superClass: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      },
      decorators: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))}
    }
  });
  (0, _index2.default)("ExportAllDeclaration", {
    visitor: ["source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {source: {validate: (0, _index.assertNodeType)("StringLiteral")}}
  });
  (0, _index2.default)("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {declaration: {validate: (0, _index.assertNodeType)("FunctionDeclaration", "ClassDeclaration", "Expression")}}
  });
  (0, _index2.default)("ExportNamedDeclaration", {
    visitor: ["declaration", "specifiers", "source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, _index.assertNodeType)("Declaration"),
        optional: true
      },
      specifiers: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ExportSpecifier")))},
      source: {
        validate: (0, _index.assertNodeType)("StringLiteral"),
        optional: true
      }
    }
  });
  (0, _index2.default)("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {validate: (0, _index.assertNodeType)("Identifier")},
      exported: {validate: (0, _index.assertNodeType)("Identifier")}
    }
  });
  (0, _index2.default)("ForOfStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {validate: (0, _index.assertNodeType)("VariableDeclaration", "LVal")},
      right: {validate: (0, _index.assertNodeType)("Expression")},
      body: {validate: (0, _index.assertNodeType)("Statement")}
    }
  });
  (0, _index2.default)("ImportDeclaration", {
    visitor: ["specifiers", "source"],
    aliases: ["Statement", "Declaration", "ModuleDeclaration"],
    fields: {
      specifiers: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))},
      source: {validate: (0, _index.assertNodeType)("StringLiteral")}
    }
  });
  (0, _index2.default)("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {local: {validate: (0, _index.assertNodeType)("Identifier")}}
  });
  (0, _index2.default)("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {local: {validate: (0, _index.assertNodeType)("Identifier")}}
  });
  (0, _index2.default)("ImportSpecifier", {
    visitor: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {validate: (0, _index.assertNodeType)("Identifier")},
      imported: {validate: (0, _index.assertNodeType)("Identifier")}
    }
  });
  (0, _index2.default)("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {validate: (0, _index.assertValueType)("string")},
      property: {validate: (0, _index.assertValueType)("string")}
    }
  });
  (0, _index2.default)("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    fields: {
      kind: {
        validate: (0, _index.chain)((0, _index.assertValueType)("string"), (0, _index.assertOneOf)("get", "set", "method", "constructor")),
        default: "method"
      },
      computed: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      static: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      key: {validate: function validate(node, key, val) {
          var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
          _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
        }},
      params: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))},
      body: {validate: (0, _index.assertNodeType)("BlockStatement")},
      generator: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      async: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      }
    }
  });
  (0, _index2.default)("ObjectPattern", {
    visitor: ["properties", "typeAnnotation"],
    aliases: ["Pattern", "LVal"],
    fields: {properties: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("RestProperty", "Property")))}}
  });
  (0, _index2.default)("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {argument: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  (0, _index2.default)("Super", {aliases: ["Expression"]});
  (0, _index2.default)("TaggedTemplateExpression", {
    visitor: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {validate: (0, _index.assertNodeType)("Expression")},
      quasi: {validate: (0, _index.assertNodeType)("TemplateLiteral")}
    }
  });
  (0, _index2.default)("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {},
      tail: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      }
    }
  });
  (0, _index2.default)("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("TemplateElement")))},
      expressions: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))}
    }
  });
  (0, _index2.default)("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: (0, _index.assertValueType)("boolean"),
        default: false
      },
      argument: {
        optional: true,
        validate: (0, _index.assertNodeType)("Expression")
      }
    }
  });
  return module.exports;
});

$__System.registerDynamic("12c", ["12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('12a');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  (0, _index2.default)("AnyTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("BooleanTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("BooleanLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("NullLiteralTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("ClassImplements", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("ClassProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    aliases: ["Flow", "Property"],
    fields: {}
  });
  (0, _index2.default)("DeclareClass", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("DeclareFunction", {
    visitor: ["id"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("DeclareInterface", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("DeclareModule", {
    visitor: ["id", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("DeclareVariable", {
    visitor: ["id"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("ExistentialTypeParam", {aliases: ["Flow"]});
  (0, _index2.default)("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("InterfaceDeclaration", {
    visitor: ["id", "typeParameters", "extends", "body"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("MixedTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
  (0, _index2.default)("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("NumericLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("NumberTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("StringLiteralTypeAnnotation", {
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("StringTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("ThisTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  (0, _index2.default)("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
    fields: {}
  });
  (0, _index2.default)("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["Flow", "ExpressionWrapper", "Expression"],
    fields: {}
  });
  (0, _index2.default)("TypeParameterDeclaration", {
    visitor: ["params"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("TypeParameterInstantiation", {
    visitor: ["params"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {}
  });
  (0, _index2.default)("ObjectTypeIndexer", {
    visitor: ["id", "key", "value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {}
  });
  (0, _index2.default)("ObjectTypeProperty", {
    visitor: ["key", "value"],
    aliases: ["Flow", "UserWhitespacable"],
    fields: {}
  });
  (0, _index2.default)("QualifiedTypeIdentifier", {
    visitor: ["id", "qualification"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["Flow"],
    fields: {}
  });
  (0, _index2.default)("VoidTypeAnnotation", {
    aliases: ["Flow", "FlowBaseAnnotation"],
    fields: {}
  });
  return module.exports;
});

$__System.registerDynamic("12d", ["12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('12a');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  (0, _index2.default)("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["JSX", "Immutable"],
    fields: {
      name: {validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXNamespacedName")},
      value: {
        optional: true,
        validate: (0, _index.assertNodeType)("JSXElement", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  (0, _index2.default)("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["JSX", "Immutable"],
    fields: {name: {validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")}}
  });
  (0, _index2.default)("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["JSX", "Immutable", "Expression"],
    fields: {
      openingElement: {validate: (0, _index.assertNodeType)("JSXOpeningElement")},
      closingElement: {
        optional: true,
        validate: (0, _index.assertNodeType)("JSXClosingElement")
      },
      children: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXElement")))}
    }
  });
  (0, _index2.default)("JSXEmptyExpression", {aliases: ["JSX", "Expression"]});
  (0, _index2.default)("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["JSX", "Immutable"],
    fields: {expression: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  (0, _index2.default)("JSXIdentifier", {
    builder: ["name"],
    aliases: ["JSX", "Expression"],
    fields: {name: {validate: (0, _index.assertValueType)("string")}}
  });
  (0, _index2.default)("JSXMemberExpression", {
    visitor: ["object", "property"],
    aliases: ["JSX", "Expression"],
    fields: {
      object: {validate: (0, _index.assertNodeType)("JSXMemberExpression", "JSXIdentifier")},
      property: {validate: (0, _index.assertNodeType)("JSXIdentifier")}
    }
  });
  (0, _index2.default)("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    aliases: ["JSX"],
    fields: {
      namespace: {validate: (0, _index.assertNodeType)("JSXIdentifier")},
      name: {validate: (0, _index.assertNodeType)("JSXIdentifier")}
    }
  });
  (0, _index2.default)("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["JSX", "Immutable"],
    fields: {
      name: {validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")},
      selfClosing: {
        default: false,
        validate: (0, _index.assertValueType)("boolean")
      },
      attributes: {validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))}
    }
  });
  (0, _index2.default)("JSXSpreadAttribute", {
    visitor: ["argument"],
    aliases: ["JSX"],
    fields: {argument: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  (0, _index2.default)("JSXText", {
    aliases: ["JSX"],
    builder: ["value"],
    fields: {value: {validate: (0, _index.assertValueType)("string")}}
  });
  return module.exports;
});

$__System.registerDynamic("12e", ["12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('12a');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  (0, _index2.default)("Noop", {visitor: []});
  (0, _index2.default)("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {expression: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  return module.exports;
});

$__System.registerDynamic("12f", ["12a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('12a');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  (0, _index2.default)("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {argument: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  (0, _index2.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: {}
  });
  (0, _index2.default)("Decorator", {
    visitor: ["expression"],
    fields: {expression: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  (0, _index2.default)("DoExpression", {
    visitor: ["body"],
    aliases: ["Expression"],
    fields: {body: {validate: (0, _index.assertNodeType)("BlockStatement")}}
  });
  (0, _index2.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {exported: {validate: (0, _index.assertNodeType)("Identifier")}}
  });
  (0, _index2.default)("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {exported: {validate: (0, _index.assertNodeType)("Identifier")}}
  });
  (0, _index2.default)("RestProperty", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {argument: {validate: (0, _index.assertNodeType)("LVal")}}
  });
  (0, _index2.default)("SpreadProperty", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    fields: {argument: {validate: (0, _index.assertNodeType)("Expression")}}
  });
  return module.exports;
});

$__System.registerDynamic("130", ["12a", "129", "12b", "12c", "12d", "12e", "12f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  $__require('12a');
  $__require('129');
  $__require('12b');
  $__require('12c');
  $__require('12d');
  $__require('12e');
  $__require('12f');
  return module.exports;
});

$__System.registerDynamic("12a", ["f", "40", "29", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  exports.assertEach = assertEach;
  exports.assertOneOf = assertOneOf;
  exports.assertNodeType = assertNodeType;
  exports.assertNodeOrValueType = assertNodeOrValueType;
  exports.assertValueType = assertValueType;
  exports.chain = chain;
  exports.default = defineType;
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var VISITOR_KEYS = exports.VISITOR_KEYS = {};
  var ALIAS_KEYS = exports.ALIAS_KEYS = {};
  var NODE_FIELDS = exports.NODE_FIELDS = {};
  var BUILDER_KEYS = exports.BUILDER_KEYS = {};
  var DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};
  function getType(val) {
    if (Array.isArray(val)) {
      return "array";
    } else if (val === null) {
      return "null";
    } else if (val === undefined) {
      return "undefined";
    } else {
      return (typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val));
    }
  }
  function assertEach(callback) {
    function validator(node, key, val) {
      if (!Array.isArray(val))
        return;
      for (var i = 0; i < val.length; i++) {
        callback(node, key + "[" + i + "]", val[i]);
      }
    }
    validator.each = callback;
    return validator;
  }
  function assertOneOf() {
    for (var _len = arguments.length,
        vals = Array(_len),
        _key = 0; _key < _len; _key++) {
      vals[_key] = arguments[_key];
    }
    function validate(node, key, val) {
      if (vals.indexOf(val) < 0) {
        throw new TypeError("Property " + key + " expected value to be one of " + (0, _stringify2.default)(vals) + " but got " + (0, _stringify2.default)(val));
      }
    }
    validate.oneOf = vals;
    return validate;
  }
  function assertNodeType() {
    for (var _len2 = arguments.length,
        types = Array(_len2),
        _key2 = 0; _key2 < _len2; _key2++) {
      types[_key2] = arguments[_key2];
    }
    function validate(node, key, val) {
      var valid = false;
      for (var _iterator = types,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var type = _ref;
        if (t.is(type, val)) {
          valid = true;
          break;
        }
      }
      if (!valid) {
        throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
      }
    }
    validate.oneOfNodeTypes = types;
    return validate;
  }
  function assertNodeOrValueType() {
    for (var _len3 = arguments.length,
        types = Array(_len3),
        _key3 = 0; _key3 < _len3; _key3++) {
      types[_key3] = arguments[_key3];
    }
    function validate(node, key, val) {
      var valid = false;
      for (var _iterator2 = types,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var type = _ref2;
        if (getType(val) === type || t.is(type, val)) {
          valid = true;
          break;
        }
      }
      if (!valid) {
        throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
      }
    }
    validate.oneOfNodeOrValueTypes = types;
    return validate;
  }
  function assertValueType(type) {
    function validate(node, key, val) {
      var valid = getType(val) === type;
      if (!valid) {
        throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
      }
    }
    validate.type = type;
    return validate;
  }
  function chain() {
    for (var _len4 = arguments.length,
        fns = Array(_len4),
        _key4 = 0; _key4 < _len4; _key4++) {
      fns[_key4] = arguments[_key4];
    }
    function validate() {
      for (var _iterator3 = fns,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var fn = _ref3;
        fn.apply(undefined, arguments);
      }
    }
    validate.chainOf = fns;
    return validate;
  }
  function defineType(type) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var inherits = opts.inherits && store[opts.inherits] || {};
    opts.fields = opts.fields || inherits.fields || {};
    opts.visitor = opts.visitor || inherits.visitor || [];
    opts.aliases = opts.aliases || inherits.aliases || [];
    opts.builder = opts.builder || inherits.builder || opts.visitor || [];
    if (opts.deprecatedAlias) {
      DEPRECATED_KEYS[opts.deprecatedAlias] = type;
    }
    for (var _iterator4 = opts.visitor.concat(opts.builder),
        _isArray4 = Array.isArray(_iterator4),
        _i4 = 0,
        _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
      var _ref4;
      if (_isArray4) {
        if (_i4 >= _iterator4.length)
          break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done)
          break;
        _ref4 = _i4.value;
      }
      var _key5 = _ref4;
      opts.fields[_key5] = opts.fields[_key5] || {};
    }
    for (var key in opts.fields) {
      var field = opts.fields[key];
      if (field.default === undefined) {
        field.default = null;
      } else if (!field.validate) {
        field.validate = assertValueType(getType(field.default));
      }
    }
    VISITOR_KEYS[type] = opts.visitor;
    BUILDER_KEYS[type] = opts.builder;
    NODE_FIELDS[type] = opts.fields;
    ALIAS_KEYS[type] = opts.aliases;
    store[type] = opts;
  }
  var store = {};
  return module.exports;
});

$__System.registerDynamic("131", ["9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.isReactComponent = undefined;
  exports.isCompatTag = isCompatTag;
  exports.buildChildren = buildChildren;
  var _index = $__require('9');
  var t = _interopRequireWildcard(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var isReactComponent = exports.isReactComponent = t.buildMatchMemberExpression("React.Component");
  function isCompatTag(tagName) {
    return !!tagName && /^[a-z]|\-/.test(tagName);
  }
  function cleanJSXElementLiteralChild(child, args) {
    var lines = child.value.split(/\r\n|\n|\r/);
    var lastNonEmptyLine = 0;
    for (var i = 0; i < lines.length; i++) {
      if (lines[i].match(/[^ \t]/)) {
        lastNonEmptyLine = i;
      }
    }
    var str = "";
    for (var _i = 0; _i < lines.length; _i++) {
      var line = lines[_i];
      var isFirstLine = _i === 0;
      var isLastLine = _i === lines.length - 1;
      var isLastNonEmptyLine = _i === lastNonEmptyLine;
      var trimmedLine = line.replace(/\t/g, " ");
      if (!isFirstLine) {
        trimmedLine = trimmedLine.replace(/^[ ]+/, "");
      }
      if (!isLastLine) {
        trimmedLine = trimmedLine.replace(/[ ]+$/, "");
      }
      if (trimmedLine) {
        if (!isLastNonEmptyLine) {
          trimmedLine += " ";
        }
        str += trimmedLine;
      }
    }
    if (str)
      args.push(t.stringLiteral(str));
  }
  function buildChildren(node) {
    var elems = [];
    for (var i = 0; i < node.children.length; i++) {
      var child = node.children[i];
      if (t.isJSXText(child)) {
        cleanJSXElementLiteralChild(child, elems);
        continue;
      }
      if (t.isJSXExpressionContainer(child))
        child = child.expression;
      if (t.isJSXEmptyExpression(child))
        continue;
      elems.push(child);
    }
    return elems;
  }
  return module.exports;
});

$__System.registerDynamic("132", ["127", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('127');
  module.exports = $__require('55').Object.getOwnPropertySymbols;
  return module.exports;
});

$__System.registerDynamic("133", ["132", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('132'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("134", ["15", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Hub = function Hub(file, options) {
    (0, _classCallCheck3.default)(this, Hub);
    this.file = file;
    this.options = options;
  };
  exports.default = Hub;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("135", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    if ('string' == typeof val)
      return parse(val);
    return options.long ? long(val) : short(val);
  };
  function parse(str) {
    str = '' + str;
    if (str.length > 10000)
      return;
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match)
      return;
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
    }
  }
  function short(ms) {
    if (ms >= d)
      return Math.round(ms / d) + 'd';
    if (ms >= h)
      return Math.round(ms / h) + 'h';
    if (ms >= m)
      return Math.round(ms / m) + 'm';
    if (ms >= s)
      return Math.round(ms / s) + 's';
    return ms + 'ms';
  }
  function long(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }
  function plural(ms, n, name) {
    if (ms < n)
      return;
    if (ms < n * 1.5)
      return Math.floor(ms / n) + ' ' + name;
    return Math.ceil(ms / n) + ' ' + name + 's';
  }
  return module.exports;
});

$__System.registerDynamic("136", ["135", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports = module.exports = debug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = $__require('135');
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevColor = 0;
  var prevTime;
  function selectColor() {
    return exports.colors[prevColor++ % exports.colors.length];
  }
  function debug(namespace) {
    function disabled() {}
    disabled.enabled = false;
    function enabled() {
      var self = enabled;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      if (null == self.useColors)
        self.useColors = exports.useColors();
      if (null == self.color && self.useColors)
        self.color = selectColor();
      var args = Array.prototype.slice.call(arguments);
      args[0] = exports.coerce(args[0]);
      if ('string' !== typeof args[0]) {
        args = ['%o'].concat(args);
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
        if (match === '%%')
          return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      if ('function' === typeof exports.formatArgs) {
        args = exports.formatArgs.apply(self, args);
      }
      var logFn = enabled.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }
    enabled.enabled = true;
    var fn = exports.enabled(namespace) ? enabled : disabled;
    fn.namespace = namespace;
    return fn;
  }
  function enable(namespaces) {
    exports.save(namespaces);
    var split = (namespaces || '').split(/[\s,]+/);
    var len = split.length;
    for (var i = 0; i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }
  function disable() {
    exports.enable('');
  }
  function enabled(name) {
    var i,
        len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function coerce(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  }
  return module.exports;
});

$__System.registerDynamic("47", ["@node/tty", "@node/util", "136", "@node/fs", "@node/net", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var tty = $__require('@node/tty');
  var util = $__require('@node/util');
  exports = module.exports = $__require('136');
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  var stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
  function useColors() {
    var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
    if (0 === debugColors.length) {
      return tty.isatty(fd);
    } else {
      return '0' !== debugColors && 'no' !== debugColors && 'false' !== debugColors && 'disabled' !== debugColors;
    }
  }
  var inspect = (4 === util.inspect.length ? function(v, colors) {
    return util.inspect(v, void 0, void 0, colors);
  } : function(v, colors) {
    return util.inspect(v, {colors: colors});
  });
  exports.formatters.o = function(v) {
    return inspect(v, this.useColors).replace(/\s*\n\s*/g, ' ');
  };
  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;
    var name = this.namespace;
    if (useColors) {
      var c = this.color;
      args[0] = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m' + args[0] + '\u001b[3' + c + 'm' + ' +' + exports.humanize(this.diff) + '\u001b[0m';
    } else {
      args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];
    }
    return args;
  }
  function log() {
    return stream.write(util.format.apply(this, arguments) + '\n');
  }
  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function createWritableStdioStream(fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');
    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;
      case 'FILE':
        var fs = $__require('@node/fs');
        stream = new fs.SyncWriteStream(fd, {autoClose: false});
        stream._type = 'fs';
        break;
      case 'PIPE':
      case 'TCP':
        var net = $__require('@node/net');
        stream = new net.Socket({
          fd: fd,
          readable: false,
          writable: true
        });
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;
      default:
        throw new Error('Implement me. Unknown stream file type!');
    }
    stream.fd = fd;
    stream._isStdio = true;
    return stream;
  }
  exports.enable(load());
  return module.exports;
});

$__System.registerDynamic("137", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var NODE_ENV = "production";
  var invariant = function(condition, format, a, b, c, d, e, f) {
    if (NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function() {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
      error.framesToPop = 1;
      throw error;
    }
  };
  module.exports = invariant;
  return module.exports;
});

$__System.registerDynamic("138", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Number.isNaN || function(x) {
    return x !== x;
  };
  return module.exports;
});

$__System.registerDynamic("2f", ["138"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var numberIsNan = $__require('138');
  module.exports = Number.isFinite || function(val) {
    return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
  };
  return module.exports;
});

$__System.registerDynamic("1b", ["2f"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isFinite = $__require('2f');
  module.exports = function(str, n) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string as the first argument');
    }
    if (n < 0 || !isFinite(n)) {
      throw new TypeError('Expected a finite positive number');
    }
    var ret = '';
    do {
      if (n & 1) {
        ret += str;
      }
      str += str;
    } while (n = n >> 1);
    return ret;
  };
  return module.exports;
});

$__System.registerDynamic("139", ["15", "13a", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _binding = $__require('13a');
  var _binding2 = _interopRequireDefault(_binding);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var renameVisitor = {
    ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
      var node = _ref.node;
      if (node.name === state.oldName) {
        node.name = state.newName;
      }
    },
    Scope: function Scope(path, state) {
      if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
        path.skip();
      }
    },
    "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
      var ids = path.getOuterBindingIdentifiers();
      for (var name in ids) {
        if (name === state.oldName)
          ids[name].name = state.newName;
      }
    }
  };
  var Renamer = function() {
    function Renamer(binding, oldName, newName) {
      (0, _classCallCheck3.default)(this, Renamer);
      this.newName = newName;
      this.oldName = oldName;
      this.binding = binding;
    }
    Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
      var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
      if (!exportDeclar)
        return;
      var isDefault = exportDeclar.isExportDefaultDeclaration();
      if (isDefault && (parentDeclar.isFunctionDeclaration() || parentDeclar.isClassDeclaration()) && !parentDeclar.node.id) {
        parentDeclar.node.id = parentDeclar.scope.generateUidIdentifier("default");
      }
      var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
      var specifiers = [];
      for (var name in bindingIdentifiers) {
        var localName = name === this.oldName ? this.newName : name;
        var exportedName = isDefault ? "default" : name;
        specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
      }
      var aliasDeclar = t.exportNamedDeclaration(null, specifiers);
      if (parentDeclar.isFunctionDeclaration()) {
        aliasDeclar._blockHoist = 3;
      }
      exportDeclar.insertAfter(aliasDeclar);
      exportDeclar.replaceWith(parentDeclar.node);
    };
    Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
      return;
      if (!path.isFunctionDeclaration() && !path.isClassDeclaration())
        return;
      if (this.binding.kind !== "hoisted")
        return;
      path.node.id = t.identifier(this.oldName);
      path.node._blockHoist = 3;
      path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
    };
    Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
      return;
      if (!path.isFunctionExpression() && !path.isClassExpression())
        return;
      if (this.binding.kind !== "local")
        return;
      path.node.id = t.identifier(this.oldName);
      this.binding.scope.parent.push({id: t.identifier(this.newName)});
      path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
    };
    Renamer.prototype.rename = function rename(block) {
      var binding = this.binding;
      var oldName = this.oldName;
      var newName = this.newName;
      var scope = binding.scope;
      var path = binding.path;
      var parentDeclar = path.find(function(path) {
        return path.isDeclaration() || path.isFunctionExpression();
      });
      if (parentDeclar) {
        this.maybeConvertFromExportDeclaration(parentDeclar);
      }
      scope.traverse(block || scope.block, renameVisitor, this);
      if (!block) {
        scope.removeOwnBinding(oldName);
        scope.bindings[newName] = binding;
        this.binding.identifier.name = newName;
      }
      if (binding.type === "hoisted") {}
      if (parentDeclar) {
        this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
        this.maybeConvertFromClassFunctionExpression(parentDeclar);
      }
    };
    return Renamer;
  }();
  exports.default = Renamer;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("13b", ["78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var keys = $__require('78');
  function assignWith(object, source, customizer) {
    var index = -1,
        props = keys(source),
        length = props.length;
    while (++index < length) {
      var key = props[index],
          value = object[key],
          result = customizer(value, source[key], key, object, source);
      if ((result === result ? (result !== value) : (value === value)) || (value === undefined && !(key in object))) {
        object[key] = result;
      }
    }
    return object;
  }
  module.exports = assignWith;
  return module.exports;
});

$__System.registerDynamic("7a", ["eb", "4e", "13c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var bindCallback = $__require('eb'),
      isIterateeCall = $__require('4e'),
      restParam = $__require('13c');
  function createAssigner(assigner) {
    return restParam(function(object, sources) {
      var index = -1,
          length = object == null ? 0 : sources.length,
          customizer = length > 2 ? sources[length - 2] : undefined,
          guard = length > 2 ? sources[2] : undefined,
          thisArg = length > 1 ? sources[length - 1] : undefined;
      if (typeof customizer == 'function') {
        customizer = bindCallback(customizer, thisArg, 5);
        length -= 2;
      } else {
        customizer = typeof thisArg == 'function' ? thisArg : undefined;
        length -= (customizer ? 1 : 0);
      }
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, customizer);
        }
      }
      return object;
    });
  }
  module.exports = createAssigner;
  return module.exports;
});

$__System.registerDynamic("9c", ["13b", "13d", "7a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var assignWith = $__require('13b'),
      baseAssign = $__require('13d'),
      createAssigner = $__require('7a');
  var assign = createAssigner(function(object, source, customizer) {
    return customizer ? assignWith(object, source, customizer) : baseAssign(object, source);
  });
  module.exports = assign;
  return module.exports;
});

$__System.registerDynamic("13e", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function assignDefaults(objectValue, sourceValue) {
    return objectValue === undefined ? sourceValue : objectValue;
  }
  module.exports = assignDefaults;
  return module.exports;
});

$__System.registerDynamic("13c", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var FUNC_ERROR_TEXT = 'Expected a function';
  var nativeMax = Math.max;
  function restParam(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          rest = Array(length);
      while (++index < length) {
        rest[index] = args[start + index];
      }
      switch (start) {
        case 0:
          return func.call(this, rest);
        case 1:
          return func.call(this, args[0], rest);
        case 2:
          return func.call(this, args[0], args[1], rest);
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = rest;
      return func.apply(this, otherArgs);
    };
  }
  module.exports = restParam;
  return module.exports;
});

$__System.registerDynamic("13f", ["13c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var restParam = $__require('13c');
  function createDefaults(assigner, customizer) {
    return restParam(function(args) {
      var object = args[0];
      if (object == null) {
        return object;
      }
      args.push(customizer);
      return assigner.apply(undefined, args);
    });
  }
  module.exports = createDefaults;
  return module.exports;
});

$__System.registerDynamic("a1", ["9c", "13e", "13f"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var assign = $__require('9c'),
      assignDefaults = $__require('13e'),
      createDefaults = $__require('13f');
  var defaults = createDefaults(assign, assignDefaults);
  module.exports = defaults;
  return module.exports;
});

$__System.registerDynamic("13a", ["15", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Binding = function() {
    function Binding(_ref) {
      var existing = _ref.existing;
      var identifier = _ref.identifier;
      var scope = _ref.scope;
      var path = _ref.path;
      var kind = _ref.kind;
      (0, _classCallCheck3.default)(this, Binding);
      this.identifier = identifier;
      this.scope = scope;
      this.path = path;
      this.kind = kind;
      this.constantViolations = [];
      this.constant = true;
      this.referencePaths = [];
      this.referenced = false;
      this.references = 0;
      this.clearValue();
      if (existing) {
        this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
      }
    }
    Binding.prototype.deoptValue = function deoptValue() {
      this.clearValue();
      this.hasDeoptedValue = true;
    };
    Binding.prototype.setValue = function setValue(value) {
      if (this.hasDeoptedValue)
        return;
      this.hasValue = true;
      this.value = value;
    };
    Binding.prototype.clearValue = function clearValue() {
      this.hasDeoptedValue = false;
      this.hasValue = false;
      this.value = null;
    };
    Binding.prototype.reassign = function reassign(path) {
      this.constant = false;
      if (this.constantViolations.indexOf(path) !== -1) {
        return;
      }
      this.constantViolations.push(path);
    };
    Binding.prototype.reference = function reference(path) {
      this.referenced = true;
      this.references++;
      this.referencePaths.push(path);
    };
    Binding.prototype.dereference = function dereference() {
      this.references--;
      this.referenced = !!this.references;
    };
    return Binding;
  }();
  exports.default = Binding;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("140", [], false, function() {
  return {
    "builtin": {
      "Array": false,
      "ArrayBuffer": false,
      "Boolean": false,
      "constructor": false,
      "DataView": false,
      "Date": false,
      "decodeURI": false,
      "decodeURIComponent": false,
      "encodeURI": false,
      "encodeURIComponent": false,
      "Error": false,
      "escape": false,
      "eval": false,
      "EvalError": false,
      "Float32Array": false,
      "Float64Array": false,
      "Function": false,
      "hasOwnProperty": false,
      "Infinity": false,
      "Int16Array": false,
      "Int32Array": false,
      "Int8Array": false,
      "isFinite": false,
      "isNaN": false,
      "isPrototypeOf": false,
      "JSON": false,
      "Map": false,
      "Math": false,
      "NaN": false,
      "Number": false,
      "Object": false,
      "parseFloat": false,
      "parseInt": false,
      "Promise": false,
      "propertyIsEnumerable": false,
      "Proxy": false,
      "RangeError": false,
      "ReferenceError": false,
      "Reflect": false,
      "RegExp": false,
      "Set": false,
      "String": false,
      "Symbol": false,
      "SyntaxError": false,
      "System": false,
      "toLocaleString": false,
      "toString": false,
      "TypeError": false,
      "Uint16Array": false,
      "Uint32Array": false,
      "Uint8Array": false,
      "Uint8ClampedArray": false,
      "undefined": false,
      "unescape": false,
      "URIError": false,
      "valueOf": false,
      "WeakMap": false,
      "WeakSet": false
    },
    "es5": {
      "Array": false,
      "Boolean": false,
      "constructor": false,
      "Date": false,
      "decodeURI": false,
      "decodeURIComponent": false,
      "encodeURI": false,
      "encodeURIComponent": false,
      "Error": false,
      "escape": false,
      "eval": false,
      "EvalError": false,
      "Float32Array": false,
      "Float64Array": false,
      "Function": false,
      "hasOwnProperty": false,
      "Infinity": false,
      "isFinite": false,
      "isNaN": false,
      "isPrototypeOf": false,
      "JSON": false,
      "Math": false,
      "NaN": false,
      "Number": false,
      "Object": false,
      "parseFloat": false,
      "parseInt": false,
      "propertyIsEnumerable": false,
      "RangeError": false,
      "ReferenceError": false,
      "RegExp": false,
      "String": false,
      "SyntaxError": false,
      "toLocaleString": false,
      "toString": false,
      "TypeError": false,
      "undefined": false,
      "unescape": false,
      "URIError": false,
      "valueOf": false
    },
    "es6": {
      "Array": false,
      "ArrayBuffer": false,
      "Boolean": false,
      "constructor": false,
      "DataView": false,
      "Date": false,
      "decodeURI": false,
      "decodeURIComponent": false,
      "encodeURI": false,
      "encodeURIComponent": false,
      "Error": false,
      "escape": false,
      "eval": false,
      "EvalError": false,
      "Float32Array": false,
      "Float64Array": false,
      "Function": false,
      "hasOwnProperty": false,
      "Infinity": false,
      "Int16Array": false,
      "Int32Array": false,
      "Int8Array": false,
      "isFinite": false,
      "isNaN": false,
      "isPrototypeOf": false,
      "JSON": false,
      "Map": false,
      "Math": false,
      "NaN": false,
      "Number": false,
      "Object": false,
      "parseFloat": false,
      "parseInt": false,
      "Promise": false,
      "propertyIsEnumerable": false,
      "Proxy": false,
      "RangeError": false,
      "ReferenceError": false,
      "Reflect": false,
      "RegExp": false,
      "Set": false,
      "String": false,
      "Symbol": false,
      "SyntaxError": false,
      "System": false,
      "toLocaleString": false,
      "toString": false,
      "TypeError": false,
      "Uint16Array": false,
      "Uint32Array": false,
      "Uint8Array": false,
      "Uint8ClampedArray": false,
      "undefined": false,
      "unescape": false,
      "URIError": false,
      "valueOf": false,
      "WeakMap": false,
      "WeakSet": false
    },
    "browser": {
      "addEventListener": false,
      "alert": false,
      "AnalyserNode": false,
      "AnimationEvent": false,
      "applicationCache": false,
      "ApplicationCache": false,
      "ApplicationCacheErrorEvent": false,
      "atob": false,
      "Attr": false,
      "Audio": false,
      "AudioBuffer": false,
      "AudioBufferSourceNode": false,
      "AudioContext": false,
      "AudioDestinationNode": false,
      "AudioListener": false,
      "AudioNode": false,
      "AudioParam": false,
      "AudioProcessingEvent": false,
      "AutocompleteErrorEvent": false,
      "BarProp": false,
      "BatteryManager": false,
      "BeforeUnloadEvent": false,
      "BiquadFilterNode": false,
      "Blob": false,
      "blur": false,
      "btoa": false,
      "Cache": false,
      "caches": false,
      "CacheStorage": false,
      "cancelAnimationFrame": false,
      "CanvasGradient": false,
      "CanvasPattern": false,
      "CanvasRenderingContext2D": false,
      "CDATASection": false,
      "ChannelMergerNode": false,
      "ChannelSplitterNode": false,
      "CharacterData": false,
      "clearInterval": false,
      "clearTimeout": false,
      "clientInformation": false,
      "ClientRect": false,
      "ClientRectList": false,
      "ClipboardEvent": false,
      "close": false,
      "closed": false,
      "CloseEvent": false,
      "Comment": false,
      "CompositionEvent": false,
      "confirm": false,
      "console": false,
      "ConvolverNode": false,
      "crypto": false,
      "Crypto": false,
      "CryptoKey": false,
      "CSS": false,
      "CSSFontFaceRule": false,
      "CSSImportRule": false,
      "CSSKeyframeRule": false,
      "CSSKeyframesRule": false,
      "CSSMediaRule": false,
      "CSSPageRule": false,
      "CSSRule": false,
      "CSSRuleList": false,
      "CSSStyleDeclaration": false,
      "CSSStyleRule": false,
      "CSSStyleSheet": false,
      "CSSSupportsRule": false,
      "CSSUnknownRule": false,
      "CSSViewportRule": false,
      "CustomEvent": false,
      "DataTransfer": false,
      "DataTransferItem": false,
      "DataTransferItemList": false,
      "Debug": false,
      "defaultStatus": false,
      "defaultstatus": false,
      "DelayNode": false,
      "DeviceMotionEvent": false,
      "DeviceOrientationEvent": false,
      "devicePixelRatio": false,
      "dispatchEvent": false,
      "document": false,
      "Document": false,
      "DocumentFragment": false,
      "DocumentType": false,
      "DOMError": false,
      "DOMException": false,
      "DOMImplementation": false,
      "DOMParser": false,
      "DOMSettableTokenList": false,
      "DOMStringList": false,
      "DOMStringMap": false,
      "DOMTokenList": false,
      "DragEvent": false,
      "DynamicsCompressorNode": false,
      "Element": false,
      "ElementTimeControl": false,
      "ErrorEvent": false,
      "event": false,
      "Event": false,
      "EventSource": false,
      "EventTarget": false,
      "external": false,
      "fetch": false,
      "File": false,
      "FileError": false,
      "FileList": false,
      "FileReader": false,
      "find": false,
      "focus": false,
      "FocusEvent": false,
      "FontFace": false,
      "FormData": false,
      "frameElement": false,
      "frames": false,
      "GainNode": false,
      "Gamepad": false,
      "GamepadButton": false,
      "GamepadEvent": false,
      "getComputedStyle": false,
      "getSelection": false,
      "HashChangeEvent": false,
      "Headers": false,
      "history": false,
      "History": false,
      "HTMLAllCollection": false,
      "HTMLAnchorElement": false,
      "HTMLAppletElement": false,
      "HTMLAreaElement": false,
      "HTMLAudioElement": false,
      "HTMLBaseElement": false,
      "HTMLBlockquoteElement": false,
      "HTMLBodyElement": false,
      "HTMLBRElement": false,
      "HTMLButtonElement": false,
      "HTMLCanvasElement": false,
      "HTMLCollection": false,
      "HTMLContentElement": false,
      "HTMLDataListElement": false,
      "HTMLDetailsElement": false,
      "HTMLDialogElement": false,
      "HTMLDirectoryElement": false,
      "HTMLDivElement": false,
      "HTMLDListElement": false,
      "HTMLDocument": false,
      "HTMLElement": false,
      "HTMLEmbedElement": false,
      "HTMLFieldSetElement": false,
      "HTMLFontElement": false,
      "HTMLFormControlsCollection": false,
      "HTMLFormElement": false,
      "HTMLFrameElement": false,
      "HTMLFrameSetElement": false,
      "HTMLHeadElement": false,
      "HTMLHeadingElement": false,
      "HTMLHRElement": false,
      "HTMLHtmlElement": false,
      "HTMLIFrameElement": false,
      "HTMLImageElement": false,
      "HTMLInputElement": false,
      "HTMLIsIndexElement": false,
      "HTMLKeygenElement": false,
      "HTMLLabelElement": false,
      "HTMLLayerElement": false,
      "HTMLLegendElement": false,
      "HTMLLIElement": false,
      "HTMLLinkElement": false,
      "HTMLMapElement": false,
      "HTMLMarqueeElement": false,
      "HTMLMediaElement": false,
      "HTMLMenuElement": false,
      "HTMLMetaElement": false,
      "HTMLMeterElement": false,
      "HTMLModElement": false,
      "HTMLObjectElement": false,
      "HTMLOListElement": false,
      "HTMLOptGroupElement": false,
      "HTMLOptionElement": false,
      "HTMLOptionsCollection": false,
      "HTMLOutputElement": false,
      "HTMLParagraphElement": false,
      "HTMLParamElement": false,
      "HTMLPictureElement": false,
      "HTMLPreElement": false,
      "HTMLProgressElement": false,
      "HTMLQuoteElement": false,
      "HTMLScriptElement": false,
      "HTMLSelectElement": false,
      "HTMLShadowElement": false,
      "HTMLSourceElement": false,
      "HTMLSpanElement": false,
      "HTMLStyleElement": false,
      "HTMLTableCaptionElement": false,
      "HTMLTableCellElement": false,
      "HTMLTableColElement": false,
      "HTMLTableElement": false,
      "HTMLTableRowElement": false,
      "HTMLTableSectionElement": false,
      "HTMLTemplateElement": false,
      "HTMLTextAreaElement": false,
      "HTMLTitleElement": false,
      "HTMLTrackElement": false,
      "HTMLUListElement": false,
      "HTMLUnknownElement": false,
      "HTMLVideoElement": false,
      "IDBCursor": false,
      "IDBCursorWithValue": false,
      "IDBDatabase": false,
      "IDBEnvironment": false,
      "IDBFactory": false,
      "IDBIndex": false,
      "IDBKeyRange": false,
      "IDBObjectStore": false,
      "IDBOpenDBRequest": false,
      "IDBRequest": false,
      "IDBTransaction": false,
      "IDBVersionChangeEvent": false,
      "Image": false,
      "ImageBitmap": false,
      "ImageData": false,
      "indexedDB": false,
      "innerHeight": false,
      "innerWidth": false,
      "InputEvent": false,
      "InputMethodContext": false,
      "Intl": false,
      "KeyboardEvent": false,
      "length": false,
      "localStorage": false,
      "location": false,
      "Location": false,
      "locationbar": false,
      "matchMedia": false,
      "MediaElementAudioSourceNode": false,
      "MediaEncryptedEvent": false,
      "MediaError": false,
      "MediaKeyError": false,
      "MediaKeyEvent": false,
      "MediaKeyMessageEvent": false,
      "MediaKeys": false,
      "MediaKeySession": false,
      "MediaKeyStatusMap": false,
      "MediaKeySystemAccess": false,
      "MediaList": false,
      "MediaQueryList": false,
      "MediaQueryListEvent": false,
      "MediaSource": false,
      "MediaStreamAudioDestinationNode": false,
      "MediaStreamAudioSourceNode": false,
      "MediaStreamEvent": false,
      "MediaStreamTrack": false,
      "menubar": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "MIDIAccess": false,
      "MIDIConnectionEvent": false,
      "MIDIInput": false,
      "MIDIInputMap": false,
      "MIDIMessageEvent": false,
      "MIDIOutput": false,
      "MIDIOutputMap": false,
      "MIDIPort": false,
      "MimeType": false,
      "MimeTypeArray": false,
      "MouseEvent": false,
      "moveBy": false,
      "moveTo": false,
      "MutationEvent": false,
      "MutationObserver": false,
      "MutationRecord": false,
      "name": false,
      "NamedNodeMap": false,
      "navigator": false,
      "Navigator": false,
      "Node": false,
      "NodeFilter": false,
      "NodeIterator": false,
      "NodeList": false,
      "Notification": false,
      "OfflineAudioCompletionEvent": false,
      "OfflineAudioContext": false,
      "offscreenBuffering": false,
      "onbeforeunload": true,
      "onblur": true,
      "onerror": true,
      "onfocus": true,
      "onload": true,
      "onresize": true,
      "onunload": true,
      "open": false,
      "openDatabase": false,
      "opener": false,
      "opera": false,
      "Option": false,
      "OscillatorNode": false,
      "outerHeight": false,
      "outerWidth": false,
      "PageTransitionEvent": false,
      "pageXOffset": false,
      "pageYOffset": false,
      "parent": false,
      "Path2D": false,
      "performance": false,
      "Performance": false,
      "PerformanceEntry": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceNavigation": false,
      "PerformanceResourceTiming": false,
      "PerformanceTiming": false,
      "PeriodicWave": false,
      "Permissions": false,
      "PermissionStatus": false,
      "personalbar": false,
      "Plugin": false,
      "PluginArray": false,
      "PopStateEvent": false,
      "postMessage": false,
      "print": false,
      "ProcessingInstruction": false,
      "ProgressEvent": false,
      "prompt": false,
      "PushManager": false,
      "PushSubscription": false,
      "RadioNodeList": false,
      "Range": false,
      "ReadableByteStream": false,
      "ReadableStream": false,
      "removeEventListener": false,
      "Request": false,
      "requestAnimationFrame": false,
      "resizeBy": false,
      "resizeTo": false,
      "Response": false,
      "RTCIceCandidate": false,
      "RTCSessionDescription": false,
      "screen": false,
      "Screen": false,
      "screenLeft": false,
      "ScreenOrientation": false,
      "screenTop": false,
      "screenX": false,
      "screenY": false,
      "ScriptProcessorNode": false,
      "scroll": false,
      "scrollbars": false,
      "scrollBy": false,
      "scrollTo": false,
      "scrollX": false,
      "scrollY": false,
      "SecurityPolicyViolationEvent": false,
      "Selection": false,
      "self": false,
      "ServiceWorker": false,
      "ServiceWorkerContainer": false,
      "ServiceWorkerRegistration": false,
      "sessionStorage": false,
      "setInterval": false,
      "setTimeout": false,
      "ShadowRoot": false,
      "SharedWorker": false,
      "showModalDialog": false,
      "speechSynthesis": false,
      "SpeechSynthesisEvent": false,
      "SpeechSynthesisUtterance": false,
      "status": false,
      "statusbar": false,
      "stop": false,
      "Storage": false,
      "StorageEvent": false,
      "styleMedia": false,
      "StyleSheet": false,
      "StyleSheetList": false,
      "SubtleCrypto": false,
      "SVGAElement": false,
      "SVGAltGlyphDefElement": false,
      "SVGAltGlyphElement": false,
      "SVGAltGlyphItemElement": false,
      "SVGAngle": false,
      "SVGAnimateColorElement": false,
      "SVGAnimatedAngle": false,
      "SVGAnimatedBoolean": false,
      "SVGAnimatedEnumeration": false,
      "SVGAnimatedInteger": false,
      "SVGAnimatedLength": false,
      "SVGAnimatedLengthList": false,
      "SVGAnimatedNumber": false,
      "SVGAnimatedNumberList": false,
      "SVGAnimatedPathData": false,
      "SVGAnimatedPoints": false,
      "SVGAnimatedPreserveAspectRatio": false,
      "SVGAnimatedRect": false,
      "SVGAnimatedString": false,
      "SVGAnimatedTransformList": false,
      "SVGAnimateElement": false,
      "SVGAnimateMotionElement": false,
      "SVGAnimateTransformElement": false,
      "SVGAnimationElement": false,
      "SVGCircleElement": false,
      "SVGClipPathElement": false,
      "SVGColor": false,
      "SVGColorProfileElement": false,
      "SVGColorProfileRule": false,
      "SVGComponentTransferFunctionElement": false,
      "SVGCSSRule": false,
      "SVGCursorElement": false,
      "SVGDefsElement": false,
      "SVGDescElement": false,
      "SVGDiscardElement": false,
      "SVGDocument": false,
      "SVGElement": false,
      "SVGElementInstance": false,
      "SVGElementInstanceList": false,
      "SVGEllipseElement": false,
      "SVGEvent": false,
      "SVGExternalResourcesRequired": false,
      "SVGFEBlendElement": false,
      "SVGFEColorMatrixElement": false,
      "SVGFEComponentTransferElement": false,
      "SVGFECompositeElement": false,
      "SVGFEConvolveMatrixElement": false,
      "SVGFEDiffuseLightingElement": false,
      "SVGFEDisplacementMapElement": false,
      "SVGFEDistantLightElement": false,
      "SVGFEDropShadowElement": false,
      "SVGFEFloodElement": false,
      "SVGFEFuncAElement": false,
      "SVGFEFuncBElement": false,
      "SVGFEFuncGElement": false,
      "SVGFEFuncRElement": false,
      "SVGFEGaussianBlurElement": false,
      "SVGFEImageElement": false,
      "SVGFEMergeElement": false,
      "SVGFEMergeNodeElement": false,
      "SVGFEMorphologyElement": false,
      "SVGFEOffsetElement": false,
      "SVGFEPointLightElement": false,
      "SVGFESpecularLightingElement": false,
      "SVGFESpotLightElement": false,
      "SVGFETileElement": false,
      "SVGFETurbulenceElement": false,
      "SVGFilterElement": false,
      "SVGFilterPrimitiveStandardAttributes": false,
      "SVGFitToViewBox": false,
      "SVGFontElement": false,
      "SVGFontFaceElement": false,
      "SVGFontFaceFormatElement": false,
      "SVGFontFaceNameElement": false,
      "SVGFontFaceSrcElement": false,
      "SVGFontFaceUriElement": false,
      "SVGForeignObjectElement": false,
      "SVGGElement": false,
      "SVGGeometryElement": false,
      "SVGGlyphElement": false,
      "SVGGlyphRefElement": false,
      "SVGGradientElement": false,
      "SVGGraphicsElement": false,
      "SVGHKernElement": false,
      "SVGICCColor": false,
      "SVGImageElement": false,
      "SVGLangSpace": false,
      "SVGLength": false,
      "SVGLengthList": false,
      "SVGLinearGradientElement": false,
      "SVGLineElement": false,
      "SVGLocatable": false,
      "SVGMarkerElement": false,
      "SVGMaskElement": false,
      "SVGMatrix": false,
      "SVGMetadataElement": false,
      "SVGMissingGlyphElement": false,
      "SVGMPathElement": false,
      "SVGNumber": false,
      "SVGNumberList": false,
      "SVGPaint": false,
      "SVGPathElement": false,
      "SVGPathSeg": false,
      "SVGPathSegArcAbs": false,
      "SVGPathSegArcRel": false,
      "SVGPathSegClosePath": false,
      "SVGPathSegCurvetoCubicAbs": false,
      "SVGPathSegCurvetoCubicRel": false,
      "SVGPathSegCurvetoCubicSmoothAbs": false,
      "SVGPathSegCurvetoCubicSmoothRel": false,
      "SVGPathSegCurvetoQuadraticAbs": false,
      "SVGPathSegCurvetoQuadraticRel": false,
      "SVGPathSegCurvetoQuadraticSmoothAbs": false,
      "SVGPathSegCurvetoQuadraticSmoothRel": false,
      "SVGPathSegLinetoAbs": false,
      "SVGPathSegLinetoHorizontalAbs": false,
      "SVGPathSegLinetoHorizontalRel": false,
      "SVGPathSegLinetoRel": false,
      "SVGPathSegLinetoVerticalAbs": false,
      "SVGPathSegLinetoVerticalRel": false,
      "SVGPathSegList": false,
      "SVGPathSegMovetoAbs": false,
      "SVGPathSegMovetoRel": false,
      "SVGPatternElement": false,
      "SVGPoint": false,
      "SVGPointList": false,
      "SVGPolygonElement": false,
      "SVGPolylineElement": false,
      "SVGPreserveAspectRatio": false,
      "SVGRadialGradientElement": false,
      "SVGRect": false,
      "SVGRectElement": false,
      "SVGRenderingIntent": false,
      "SVGScriptElement": false,
      "SVGSetElement": false,
      "SVGStopElement": false,
      "SVGStringList": false,
      "SVGStylable": false,
      "SVGStyleElement": false,
      "SVGSVGElement": false,
      "SVGSwitchElement": false,
      "SVGSymbolElement": false,
      "SVGTests": false,
      "SVGTextContentElement": false,
      "SVGTextElement": false,
      "SVGTextPathElement": false,
      "SVGTextPositioningElement": false,
      "SVGTitleElement": false,
      "SVGTransform": false,
      "SVGTransformable": false,
      "SVGTransformList": false,
      "SVGTRefElement": false,
      "SVGTSpanElement": false,
      "SVGUnitTypes": false,
      "SVGURIReference": false,
      "SVGUseElement": false,
      "SVGViewElement": false,
      "SVGViewSpec": false,
      "SVGVKernElement": false,
      "SVGZoomAndPan": false,
      "SVGZoomEvent": false,
      "Text": false,
      "TextDecoder": false,
      "TextEncoder": false,
      "TextEvent": false,
      "TextMetrics": false,
      "TextTrack": false,
      "TextTrackCue": false,
      "TextTrackCueList": false,
      "TextTrackList": false,
      "TimeEvent": false,
      "TimeRanges": false,
      "toolbar": false,
      "top": false,
      "Touch": false,
      "TouchEvent": false,
      "TouchList": false,
      "TrackEvent": false,
      "TransitionEvent": false,
      "TreeWalker": false,
      "UIEvent": false,
      "URL": false,
      "ValidityState": false,
      "VTTCue": false,
      "WaveShaperNode": false,
      "WebGLActiveInfo": false,
      "WebGLBuffer": false,
      "WebGLContextEvent": false,
      "WebGLFramebuffer": false,
      "WebGLProgram": false,
      "WebGLRenderbuffer": false,
      "WebGLRenderingContext": false,
      "WebGLShader": false,
      "WebGLShaderPrecisionFormat": false,
      "WebGLTexture": false,
      "WebGLUniformLocation": false,
      "WebSocket": false,
      "WheelEvent": false,
      "window": false,
      "Window": false,
      "Worker": false,
      "XDomainRequest": false,
      "XMLDocument": false,
      "XMLHttpRequest": false,
      "XMLHttpRequestEventTarget": false,
      "XMLHttpRequestProgressEvent": false,
      "XMLHttpRequestUpload": false,
      "XMLSerializer": false,
      "XPathEvaluator": false,
      "XPathException": false,
      "XPathExpression": false,
      "XPathNamespace": false,
      "XPathNSResolver": false,
      "XPathResult": false,
      "XSLTProcessor": false
    },
    "worker": {
      "applicationCache": false,
      "atob": false,
      "Blob": false,
      "BroadcastChannel": false,
      "btoa": false,
      "Cache": false,
      "caches": false,
      "clearInterval": false,
      "clearTimeout": false,
      "close": true,
      "console": false,
      "fetch": false,
      "FileReaderSync": false,
      "FormData": false,
      "Headers": false,
      "IDBCursor": false,
      "IDBCursorWithValue": false,
      "IDBDatabase": false,
      "IDBFactory": false,
      "IDBIndex": false,
      "IDBKeyRange": false,
      "IDBObjectStore": false,
      "IDBOpenDBRequest": false,
      "IDBRequest": false,
      "IDBTransaction": false,
      "IDBVersionChangeEvent": false,
      "ImageData": false,
      "importScripts": true,
      "indexedDB": false,
      "location": false,
      "MessageChannel": false,
      "MessagePort": false,
      "name": false,
      "navigator": false,
      "Notification": false,
      "onclose": true,
      "onconnect": true,
      "onerror": true,
      "onlanguagechange": true,
      "onmessage": true,
      "onoffline": true,
      "ononline": true,
      "onrejectionhandled": true,
      "onunhandledrejection": true,
      "performance": false,
      "Performance": false,
      "PerformanceEntry": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceNavigation": false,
      "PerformanceResourceTiming": false,
      "PerformanceTiming": false,
      "postMessage": true,
      "Promise": false,
      "Request": false,
      "Response": false,
      "self": true,
      "ServiceWorkerRegistration": false,
      "setInterval": false,
      "setTimeout": false,
      "TextDecoder": false,
      "TextEncoder": false,
      "URL": false,
      "WebSocket": false,
      "Worker": false,
      "XMLHttpRequest": false
    },
    "node": {
      "__dirname": false,
      "__filename": false,
      "arguments": false,
      "Buffer": false,
      "clearImmediate": false,
      "clearInterval": false,
      "clearTimeout": false,
      "console": false,
      "exports": true,
      "GLOBAL": false,
      "global": false,
      "module": false,
      "process": false,
      "require": false,
      "root": false,
      "setImmediate": false,
      "setInterval": false,
      "setTimeout": false
    },
    "commonjs": {
      "exports": true,
      "module": false,
      "require": false,
      "global": false
    },
    "amd": {
      "define": false,
      "require": false
    },
    "mocha": {
      "after": false,
      "afterEach": false,
      "before": false,
      "beforeEach": false,
      "context": false,
      "describe": false,
      "it": false,
      "mocha": false,
      "setup": false,
      "specify": false,
      "suite": false,
      "suiteSetup": false,
      "suiteTeardown": false,
      "teardown": false,
      "test": false,
      "xcontext": false,
      "xdescribe": false,
      "xit": false,
      "xspecify": false
    },
    "jasmine": {
      "afterAll": false,
      "afterEach": false,
      "beforeAll": false,
      "beforeEach": false,
      "describe": false,
      "expect": false,
      "fail": false,
      "fdescribe": false,
      "fit": false,
      "it": false,
      "jasmine": false,
      "pending": false,
      "runs": false,
      "spyOn": false,
      "waits": false,
      "waitsFor": false,
      "xdescribe": false,
      "xit": false
    },
    "jest": {
      "afterEach": false,
      "beforeEach": false,
      "describe": false,
      "expect": false,
      "it": false,
      "jest": false,
      "pit": false,
      "require": false,
      "xdescribe": false,
      "xit": false
    },
    "qunit": {
      "asyncTest": false,
      "deepEqual": false,
      "equal": false,
      "expect": false,
      "module": false,
      "notDeepEqual": false,
      "notEqual": false,
      "notOk": false,
      "notPropEqual": false,
      "notStrictEqual": false,
      "ok": false,
      "propEqual": false,
      "QUnit": false,
      "raises": false,
      "start": false,
      "stop": false,
      "strictEqual": false,
      "test": false,
      "throws": false
    },
    "phantomjs": {
      "console": true,
      "exports": true,
      "phantom": true,
      "require": true,
      "WebPage": true
    },
    "couch": {
      "emit": false,
      "exports": false,
      "getRow": false,
      "log": false,
      "module": false,
      "provides": false,
      "require": false,
      "respond": false,
      "send": false,
      "start": false,
      "sum": false
    },
    "rhino": {
      "defineClass": false,
      "deserialize": false,
      "gc": false,
      "help": false,
      "importClass": false,
      "importPackage": false,
      "java": false,
      "load": false,
      "loadClass": false,
      "Packages": false,
      "print": false,
      "quit": false,
      "readFile": false,
      "readUrl": false,
      "runCommand": false,
      "seal": false,
      "serialize": false,
      "spawn": false,
      "sync": false,
      "toint32": false,
      "version": false
    },
    "nashorn": {
      "__DIR__": false,
      "__FILE__": false,
      "__LINE__": false,
      "com": false,
      "edu": false,
      "exit": false,
      "Java": false,
      "java": false,
      "javafx": false,
      "JavaImporter": false,
      "javax": false,
      "JSAdapter": false,
      "load": false,
      "loadWithNewGlobal": false,
      "org": false,
      "Packages": false,
      "print": false,
      "quit": false
    },
    "wsh": {
      "ActiveXObject": true,
      "Enumerator": true,
      "GetObject": true,
      "ScriptEngine": true,
      "ScriptEngineBuildVersion": true,
      "ScriptEngineMajorVersion": true,
      "ScriptEngineMinorVersion": true,
      "VBArray": true,
      "WScript": true,
      "WSH": true,
      "XDomainRequest": true
    },
    "jquery": {
      "$": false,
      "jQuery": false
    },
    "yui": {
      "Y": false,
      "YUI": false,
      "YUI_config": false
    },
    "shelljs": {
      "cat": false,
      "cd": false,
      "chmod": false,
      "config": false,
      "cp": false,
      "dirs": false,
      "echo": false,
      "env": false,
      "error": false,
      "exec": false,
      "exit": false,
      "find": false,
      "grep": false,
      "ls": false,
      "ln": false,
      "mkdir": false,
      "mv": false,
      "popd": false,
      "pushd": false,
      "pwd": false,
      "rm": false,
      "sed": false,
      "target": false,
      "tempdir": false,
      "test": false,
      "which": false
    },
    "prototypejs": {
      "$": false,
      "$$": false,
      "$A": false,
      "$break": false,
      "$continue": false,
      "$F": false,
      "$H": false,
      "$R": false,
      "$w": false,
      "Abstract": false,
      "Ajax": false,
      "Autocompleter": false,
      "Builder": false,
      "Class": false,
      "Control": false,
      "Draggable": false,
      "Draggables": false,
      "Droppables": false,
      "Effect": false,
      "Element": false,
      "Enumerable": false,
      "Event": false,
      "Field": false,
      "Form": false,
      "Hash": false,
      "Insertion": false,
      "ObjectRange": false,
      "PeriodicalExecuter": false,
      "Position": false,
      "Prototype": false,
      "Scriptaculous": false,
      "Selector": false,
      "Sortable": false,
      "SortableObserver": false,
      "Sound": false,
      "Template": false,
      "Toggle": false,
      "Try": false
    },
    "meteor": {
      "$": false,
      "_": false,
      "Accounts": false,
      "App": false,
      "Assets": false,
      "Blaze": false,
      "check": false,
      "Cordova": false,
      "DDP": false,
      "DDPServer": false,
      "Deps": false,
      "EJSON": false,
      "Email": false,
      "HTTP": false,
      "Log": false,
      "Match": false,
      "Meteor": false,
      "Mongo": false,
      "MongoInternals": false,
      "Npm": false,
      "Package": false,
      "Plugin": false,
      "process": false,
      "Random": false,
      "ReactiveDict": false,
      "ReactiveVar": false,
      "Router": false,
      "Session": false,
      "share": false,
      "Spacebars": false,
      "Template": false,
      "Tinytest": false,
      "Tracker": false,
      "UI": false,
      "Utils": false,
      "WebApp": false,
      "WebAppInternals": false
    },
    "mongo": {
      "_isWindows": false,
      "_rand": false,
      "BulkWriteResult": false,
      "cat": false,
      "cd": false,
      "connect": false,
      "db": false,
      "getHostName": false,
      "getMemInfo": false,
      "hostname": false,
      "listFiles": false,
      "load": false,
      "ls": false,
      "md5sumFile": false,
      "mkdir": false,
      "Mongo": false,
      "ObjectId": false,
      "PlanCache": false,
      "print": false,
      "printjson": false,
      "pwd": false,
      "quit": false,
      "removeFile": false,
      "rs": false,
      "sh": false,
      "UUID": false,
      "version": false,
      "WriteResult": false
    },
    "applescript": {
      "$": false,
      "Application": false,
      "Automation": false,
      "console": false,
      "delay": false,
      "Library": false,
      "ObjC": false,
      "ObjectSpecifier": false,
      "Path": false,
      "Progress": false,
      "Ref": false
    },
    "serviceworker": {
      "caches": false,
      "Cache": false,
      "CacheStorage": false,
      "Client": false,
      "clients": false,
      "Clients": false,
      "ExtendableEvent": false,
      "ExtendableMessageEvent": false,
      "FetchEvent": false,
      "importScripts": false,
      "registration": false,
      "self": false,
      "ServiceWorker": false,
      "ServiceWorkerContainer": false,
      "ServiceWorkerGlobalScope": false,
      "ServiceWorkerMessageEvent": false,
      "ServiceWorkerRegistration": false,
      "skipWaiting": false,
      "WindowClient": false
    },
    "atomtest": {
      "advanceClock": false,
      "fakeClearInterval": false,
      "fakeClearTimeout": false,
      "fakeSetInterval": false,
      "fakeSetTimeout": false,
      "resetTimeouts": false,
      "waitsForPromise": false
    },
    "embertest": {
      "andThen": false,
      "click": false,
      "currentPath": false,
      "currentRouteName": false,
      "currentURL": false,
      "fillIn": false,
      "find": false,
      "findWithAssert": false,
      "keyEvent": false,
      "pauseTest": false,
      "triggerEvent": false,
      "visit": false
    },
    "protractor": {
      "$": false,
      "$$": false,
      "browser": false,
      "By": false,
      "by": false,
      "DartObject": false,
      "element": false,
      "protractor": false
    },
    "shared-node-browser": {
      "clearInterval": false,
      "clearTimeout": false,
      "console": false,
      "setInterval": false,
      "setTimeout": false
    },
    "webextensions": {
      "browser": false,
      "chrome": false,
      "opr": false
    },
    "greasemonkey": {
      "GM_addStyle": false,
      "GM_deleteValue": false,
      "GM_getResourceText": false,
      "GM_getResourceURL": false,
      "GM_getValue": false,
      "GM_info": false,
      "GM_listValues": false,
      "GM_log": false,
      "GM_openInTab": false,
      "GM_registerMenuCommand": false,
      "GM_setClipboard": false,
      "GM_setValue": false,
      "GM_xmlhttpRequest": false,
      "unsafeWindow": false
    }
  };
});

$__System.registerDynamic("141", ["140"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('140');
  return module.exports;
});

$__System.registerDynamic("142", ["d", "9f", "15", "f", "60", "1b", "139", "18", "a1", "6", "13a", "141", "9", "143", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _includes = $__require('60');
  var _includes2 = _interopRequireDefault(_includes);
  var _repeating = $__require('1b');
  var _repeating2 = _interopRequireDefault(_repeating);
  var _renamer = $__require('139');
  var _renamer2 = _interopRequireDefault(_renamer);
  var _index = $__require('18');
  var _index2 = _interopRequireDefault(_index);
  var _defaults = $__require('a1');
  var _defaults2 = _interopRequireDefault(_defaults);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _binding2 = $__require('13a');
  var _binding3 = _interopRequireDefault(_binding2);
  var _globals = $__require('141');
  var _globals2 = _interopRequireDefault(_globals);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _cache = $__require('143');
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var _crawlCallsCount = 0;
  function getCache(path, parentScope, self) {
    var scopes = _cache.scope.get(path.node) || [];
    for (var _iterator = scopes,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var scope = _ref;
      if (scope.parent === parentScope && scope.path === path)
        return scope;
    }
    scopes.push(self);
    if (!_cache.scope.has(path.node)) {
      _cache.scope.set(path.node, scopes);
    }
  }
  var collectorVisitor = {
    For: function For(path) {
      for (var _iterator2 = t.FOR_INIT_KEYS,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var key = _ref2;
        var declar = path.get(key);
        if (declar.isVar())
          path.scope.getFunctionParent().registerBinding("var", declar);
      }
    },
    Declaration: function Declaration(path) {
      if (path.isBlockScoped())
        return;
      if (path.isExportDeclaration() && path.get("declaration").isDeclaration())
        return;
      path.scope.getFunctionParent().registerDeclaration(path);
    },
    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      state.references.push(path);
    },
    ForXStatement: function ForXStatement(path, state) {
      var left = path.get("left");
      if (left.isPattern() || left.isIdentifier()) {
        state.constantViolations.push(left);
      }
    },
    ExportDeclaration: {exit: function exit(_ref3) {
        var node = _ref3.node;
        var scope = _ref3.scope;
        var declar = node.declaration;
        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
          var _id = declar.id;
          if (!_id)
            return;
          var binding = scope.getBinding(_id.name);
          if (binding)
            binding.reference();
        } else if (t.isVariableDeclaration(declar)) {
          for (var _iterator3 = declar.declarations,
              _isArray3 = Array.isArray(_iterator3),
              _i3 = 0,
              _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
            var _ref4;
            if (_isArray3) {
              if (_i3 >= _iterator3.length)
                break;
              _ref4 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done)
                break;
              _ref4 = _i3.value;
            }
            var decl = _ref4;
            var ids = t.getBindingIdentifiers(decl);
            for (var name in ids) {
              var _binding = scope.getBinding(name);
              if (_binding)
                _binding.reference();
            }
          }
        }
      }},
    LabeledStatement: function LabeledStatement(path) {
      path.scope.getProgramParent().addGlobal(path.node);
      path.scope.getBlockParent().registerDeclaration(path);
    },
    AssignmentExpression: function AssignmentExpression(path, state) {
      state.assignments.push(path);
    },
    UpdateExpression: function UpdateExpression(path, state) {
      state.constantViolations.push(path.get("argument"));
    },
    UnaryExpression: function UnaryExpression(path, state) {
      if (path.node.operator === "delete") {
        state.constantViolations.push(path.get("argument"));
      }
    },
    BlockScoped: function BlockScoped(path) {
      var scope = path.scope;
      if (scope.path === path)
        scope = scope.parent;
      scope.getBlockParent().registerDeclaration(path);
    },
    ClassDeclaration: function ClassDeclaration(path) {
      var id = path.node.id;
      if (!id)
        return;
      var name = id.name;
      path.scope.bindings[name] = path.scope.getBinding(name);
    },
    Block: function Block(path) {
      var paths = path.get("body");
      for (var _iterator4 = paths,
          _isArray4 = Array.isArray(_iterator4),
          _i4 = 0,
          _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
        var _ref5;
        if (_isArray4) {
          if (_i4 >= _iterator4.length)
            break;
          _ref5 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done)
            break;
          _ref5 = _i4.value;
        }
        var bodyPath = _ref5;
        if (bodyPath.isFunctionDeclaration()) {
          path.scope.getBlockParent().registerDeclaration(bodyPath);
        }
      }
    }
  };
  var uid = 0;
  var Scope = function() {
    function Scope(path, parentScope) {
      (0, _classCallCheck3.default)(this, Scope);
      if (parentScope && parentScope.block === path.node) {
        return parentScope;
      }
      var cached = getCache(path, parentScope, this);
      if (cached)
        return cached;
      this.uid = uid++;
      this.parent = parentScope;
      this.hub = path.hub;
      this.parentBlock = path.parent;
      this.block = path.node;
      this.path = path;
    }
    Scope.prototype.traverse = function traverse(node, opts, state) {
      (0, _index2.default)(node, opts, this, state, this.path);
    };
    Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
      var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
      var id = this.generateUidIdentifier(name);
      this.push({id: id});
      return id;
    };
    Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
      var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
      return t.identifier(this.generateUid(name));
    };
    Scope.prototype.generateUid = function generateUid() {
      var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
      name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
      var uid = void 0;
      var i = 0;
      do {
        uid = this._generateUid(name, i);
        i++;
      } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));
      var program = this.getProgramParent();
      program.references[uid] = true;
      program.uids[uid] = true;
      return uid;
    };
    Scope.prototype._generateUid = function _generateUid(name, i) {
      var id = name;
      if (i > 1)
        id += i;
      return ("_" + id);
    };
    Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent, defaultName) {
      var node = parent;
      if (t.isAssignmentExpression(parent)) {
        node = parent.left;
      } else if (t.isVariableDeclarator(parent)) {
        node = parent.id;
      } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
        node = node.key;
      }
      var parts = [];
      var add = function add(node) {
        if (t.isModuleDeclaration(node)) {
          if (node.source) {
            add(node.source);
          } else if (node.specifiers && node.specifiers.length) {
            for (var _iterator5 = node.specifiers,
                _isArray5 = Array.isArray(_iterator5),
                _i5 = 0,
                _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
              var _ref6;
              if (_isArray5) {
                if (_i5 >= _iterator5.length)
                  break;
                _ref6 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done)
                  break;
                _ref6 = _i5.value;
              }
              var specifier = _ref6;
              add(specifier);
            }
          } else if (node.declaration) {
            add(node.declaration);
          }
        } else if (t.isModuleSpecifier(node)) {
          add(node.local);
        } else if (t.isMemberExpression(node)) {
          add(node.object);
          add(node.property);
        } else if (t.isIdentifier(node)) {
          parts.push(node.name);
        } else if (t.isLiteral(node)) {
          parts.push(node.value);
        } else if (t.isCallExpression(node)) {
          add(node.callee);
        } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
          for (var _iterator6 = node.properties,
              _isArray6 = Array.isArray(_iterator6),
              _i6 = 0,
              _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6); ; ) {
            var _ref7;
            if (_isArray6) {
              if (_i6 >= _iterator6.length)
                break;
              _ref7 = _iterator6[_i6++];
            } else {
              _i6 = _iterator6.next();
              if (_i6.done)
                break;
              _ref7 = _i6.value;
            }
            var prop = _ref7;
            add(prop.key || prop.argument);
          }
        }
      };
      add(node);
      var id = parts.join("$");
      id = id.replace(/^_/, "") || defaultName || "ref";
      return this.generateUidIdentifier(id.slice(0, 20));
    };
    Scope.prototype.isStatic = function isStatic(node) {
      if (t.isThisExpression(node) || t.isSuper(node)) {
        return true;
      }
      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (binding) {
          return binding.constant;
        } else {
          return this.hasBinding(node.name);
        }
      }
      return false;
    };
    Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node, dontPush) {
      if (this.isStatic(node)) {
        return null;
      } else {
        var _id2 = this.generateUidIdentifierBasedOnNode(node);
        if (!dontPush)
          this.push({id: _id2});
        return _id2;
      }
    };
    Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind, name, id) {
      if (kind === "param")
        return;
      if (kind === "hoisted" && local.kind === "let")
        return;
      var duplicate = false;
      if (!duplicate)
        duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";
      if (!duplicate)
        duplicate = local.kind === "param" && (kind === "let" || kind === "const");
      if (duplicate) {
        throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
      }
    };
    Scope.prototype.rename = function rename(oldName, newName, block) {
      var binding = this.getBinding(oldName);
      if (binding) {
        newName = newName || this.generateUidIdentifier(oldName).name;
        return new _renamer2.default(binding, oldName, newName).rename(block);
      }
    };
    Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
      if (map[oldName]) {
        map[newName] = value;
        map[oldName] = null;
      }
    };
    Scope.prototype.dump = function dump() {
      var sep = (0, _repeating2.default)("-", 60);
      console.log(sep);
      var scope = this;
      do {
        console.log("#", scope.block.type);
        for (var name in scope.bindings) {
          var binding = scope.bindings[name];
          console.log(" -", name, {
            constant: binding.constant,
            references: binding.references,
            violations: binding.constantViolations.length,
            kind: binding.kind
          });
        }
      } while (scope = scope.parent);
      console.log(sep);
    };
    Scope.prototype.toArray = function toArray(node, i) {
      var file = this.hub.file;
      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (binding && binding.constant && binding.path.isGenericType("Array"))
          return node;
      }
      if (t.isArrayExpression(node)) {
        return node;
      }
      if (t.isIdentifier(node, {name: "arguments"})) {
        return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
      }
      var helperName = "toArray";
      var args = [node];
      if (i === true) {
        helperName = "toConsumableArray";
      } else if (i) {
        args.push(t.numericLiteral(i));
        helperName = "slicedToArray";
      }
      return t.callExpression(file.addHelper(helperName), args);
    };
    Scope.prototype.registerDeclaration = function registerDeclaration(path) {
      if (path.isLabeledStatement()) {
        this.registerBinding("label", path);
      } else if (path.isFunctionDeclaration()) {
        this.registerBinding("hoisted", path.get("id"), path);
      } else if (path.isVariableDeclaration()) {
        var declarations = path.get("declarations");
        for (var _iterator7 = declarations,
            _isArray7 = Array.isArray(_iterator7),
            _i7 = 0,
            _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7); ; ) {
          var _ref8;
          if (_isArray7) {
            if (_i7 >= _iterator7.length)
              break;
            _ref8 = _iterator7[_i7++];
          } else {
            _i7 = _iterator7.next();
            if (_i7.done)
              break;
            _ref8 = _i7.value;
          }
          var declar = _ref8;
          this.registerBinding(path.node.kind, declar);
        }
      } else if (path.isClassDeclaration()) {
        this.registerBinding("let", path);
      } else if (path.isImportDeclaration()) {
        var specifiers = path.get("specifiers");
        for (var _iterator8 = specifiers,
            _isArray8 = Array.isArray(_iterator8),
            _i8 = 0,
            _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8); ; ) {
          var _ref9;
          if (_isArray8) {
            if (_i8 >= _iterator8.length)
              break;
            _ref9 = _iterator8[_i8++];
          } else {
            _i8 = _iterator8.next();
            if (_i8.done)
              break;
            _ref9 = _i8.value;
          }
          var specifier = _ref9;
          this.registerBinding("module", specifier);
        }
      } else if (path.isExportDeclaration()) {
        var _declar = path.get("declaration");
        if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {
          this.registerDeclaration(_declar);
        }
      } else {
        this.registerBinding("unknown", path);
      }
    };
    Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
      if (this.hasBinding("undefined")) {
        return t.unaryExpression("void", t.numericLiteral(0), true);
      } else {
        return t.identifier("undefined");
      }
    };
    Scope.prototype.registerConstantViolation = function registerConstantViolation(path) {
      var ids = path.getBindingIdentifiers();
      for (var name in ids) {
        var binding = this.getBinding(name);
        if (binding)
          binding.reassign(path);
      }
    };
    Scope.prototype.registerBinding = function registerBinding(kind, path) {
      var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];
      if (!kind)
        throw new ReferenceError("no `kind`");
      if (path.isVariableDeclaration()) {
        var declarators = path.get("declarations");
        for (var _iterator9 = declarators,
            _isArray9 = Array.isArray(_iterator9),
            _i9 = 0,
            _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9); ; ) {
          var _ref10;
          if (_isArray9) {
            if (_i9 >= _iterator9.length)
              break;
            _ref10 = _iterator9[_i9++];
          } else {
            _i9 = _iterator9.next();
            if (_i9.done)
              break;
            _ref10 = _i9.value;
          }
          var declar = _ref10;
          this.registerBinding(kind, declar);
        }
        return;
      }
      var parent = this.getProgramParent();
      var ids = path.getBindingIdentifiers(true);
      for (var name in ids) {
        for (var _iterator10 = ids[name],
            _isArray10 = Array.isArray(_iterator10),
            _i10 = 0,
            _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10); ; ) {
          var _ref11;
          if (_isArray10) {
            if (_i10 >= _iterator10.length)
              break;
            _ref11 = _iterator10[_i10++];
          } else {
            _i10 = _iterator10.next();
            if (_i10.done)
              break;
            _ref11 = _i10.value;
          }
          var _id3 = _ref11;
          var local = this.getOwnBinding(name);
          if (local) {
            if (local.identifier === _id3)
              continue;
            this.checkBlockScopedCollisions(local, kind, name, _id3);
          }
          if (local && local.path.isFlow())
            local = null;
          parent.references[name] = true;
          this.bindings[name] = new _binding3.default({
            identifier: _id3,
            existing: local,
            scope: this,
            path: bindingPath,
            kind: kind
          });
        }
      }
    };
    Scope.prototype.addGlobal = function addGlobal(node) {
      this.globals[node.name] = node;
    };
    Scope.prototype.hasUid = function hasUid(name) {
      var scope = this;
      do {
        if (scope.uids[name])
          return true;
      } while (scope = scope.parent);
      return false;
    };
    Scope.prototype.hasGlobal = function hasGlobal(name) {
      var scope = this;
      do {
        if (scope.globals[name])
          return true;
      } while (scope = scope.parent);
      return false;
    };
    Scope.prototype.hasReference = function hasReference(name) {
      var scope = this;
      do {
        if (scope.references[name])
          return true;
      } while (scope = scope.parent);
      return false;
    };
    Scope.prototype.isPure = function isPure(node, constantsOnly) {
      if (t.isIdentifier(node)) {
        var binding = this.getBinding(node.name);
        if (!binding)
          return false;
        if (constantsOnly)
          return binding.constant;
        return true;
      } else if (t.isClass(node)) {
        if (node.superClass && !this.isPure(node.superClass, constantsOnly))
          return false;
        return this.isPure(node.body, constantsOnly);
      } else if (t.isClassBody(node)) {
        for (var _iterator11 = node.body,
            _isArray11 = Array.isArray(_iterator11),
            _i11 = 0,
            _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11); ; ) {
          var _ref12;
          if (_isArray11) {
            if (_i11 >= _iterator11.length)
              break;
            _ref12 = _iterator11[_i11++];
          } else {
            _i11 = _iterator11.next();
            if (_i11.done)
              break;
            _ref12 = _i11.value;
          }
          var method = _ref12;
          if (!this.isPure(method, constantsOnly))
            return false;
        }
        return true;
      } else if (t.isBinary(node)) {
        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
      } else if (t.isArrayExpression(node)) {
        for (var _iterator12 = node.elements,
            _isArray12 = Array.isArray(_iterator12),
            _i12 = 0,
            _iterator12 = _isArray12 ? _iterator12 : (0, _getIterator3.default)(_iterator12); ; ) {
          var _ref13;
          if (_isArray12) {
            if (_i12 >= _iterator12.length)
              break;
            _ref13 = _iterator12[_i12++];
          } else {
            _i12 = _iterator12.next();
            if (_i12.done)
              break;
            _ref13 = _i12.value;
          }
          var elem = _ref13;
          if (!this.isPure(elem, constantsOnly))
            return false;
        }
        return true;
      } else if (t.isObjectExpression(node)) {
        for (var _iterator13 = node.properties,
            _isArray13 = Array.isArray(_iterator13),
            _i13 = 0,
            _iterator13 = _isArray13 ? _iterator13 : (0, _getIterator3.default)(_iterator13); ; ) {
          var _ref14;
          if (_isArray13) {
            if (_i13 >= _iterator13.length)
              break;
            _ref14 = _iterator13[_i13++];
          } else {
            _i13 = _iterator13.next();
            if (_i13.done)
              break;
            _ref14 = _i13.value;
          }
          var prop = _ref14;
          if (!this.isPure(prop, constantsOnly))
            return false;
        }
        return true;
      } else if (t.isClassMethod(node)) {
        if (node.computed && !this.isPure(node.key, constantsOnly))
          return false;
        if (node.kind === "get" || node.kind === "set")
          return false;
        return true;
      } else if (t.isClassProperty(node) || t.isObjectProperty(node)) {
        if (node.computed && !this.isPure(node.key, constantsOnly))
          return false;
        return this.isPure(node.value, constantsOnly);
      } else if (t.isUnaryExpression(node)) {
        return this.isPure(node.argument, constantsOnly);
      } else {
        return t.isPureish(node);
      }
    };
    Scope.prototype.setData = function setData(key, val) {
      return this.data[key] = val;
    };
    Scope.prototype.getData = function getData(key) {
      var scope = this;
      do {
        var data = scope.data[key];
        if (data != null)
          return data;
      } while (scope = scope.parent);
    };
    Scope.prototype.removeData = function removeData(key) {
      var scope = this;
      do {
        var data = scope.data[key];
        if (data != null)
          scope.data[key] = null;
      } while (scope = scope.parent);
    };
    Scope.prototype.init = function init() {
      if (!this.references)
        this.crawl();
    };
    Scope.prototype.crawl = function crawl() {
      _crawlCallsCount++;
      this._crawl();
      _crawlCallsCount--;
    };
    Scope.prototype._crawl = function _crawl() {
      var path = this.path;
      this.references = (0, _create2.default)(null);
      this.bindings = (0, _create2.default)(null);
      this.globals = (0, _create2.default)(null);
      this.uids = (0, _create2.default)(null);
      this.data = (0, _create2.default)(null);
      if (path.isLoop()) {
        for (var _iterator14 = t.FOR_INIT_KEYS,
            _isArray14 = Array.isArray(_iterator14),
            _i14 = 0,
            _iterator14 = _isArray14 ? _iterator14 : (0, _getIterator3.default)(_iterator14); ; ) {
          var _ref15;
          if (_isArray14) {
            if (_i14 >= _iterator14.length)
              break;
            _ref15 = _iterator14[_i14++];
          } else {
            _i14 = _iterator14.next();
            if (_i14.done)
              break;
            _ref15 = _i14.value;
          }
          var key = _ref15;
          var node = path.get(key);
          if (node.isBlockScoped())
            this.registerBinding(node.node.kind, node);
        }
      }
      if (path.isFunctionExpression() && path.has("id")) {
        if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
          this.registerBinding("local", path.get("id"), path);
        }
      }
      if (path.isClassExpression() && path.has("id")) {
        if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
          this.registerBinding("local", path);
        }
      }
      if (path.isFunction()) {
        var params = path.get("params");
        for (var _iterator15 = params,
            _isArray15 = Array.isArray(_iterator15),
            _i15 = 0,
            _iterator15 = _isArray15 ? _iterator15 : (0, _getIterator3.default)(_iterator15); ; ) {
          var _ref16;
          if (_isArray15) {
            if (_i15 >= _iterator15.length)
              break;
            _ref16 = _iterator15[_i15++];
          } else {
            _i15 = _iterator15.next();
            if (_i15.done)
              break;
            _ref16 = _i15.value;
          }
          var param = _ref16;
          this.registerBinding("param", param);
        }
      }
      if (path.isCatchClause()) {
        this.registerBinding("let", path);
      }
      var parent = this.getProgramParent();
      if (parent.crawling)
        return;
      var state = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      this.crawling = true;
      path.traverse(collectorVisitor, state);
      this.crawling = false;
      for (var _iterator16 = state.assignments,
          _isArray16 = Array.isArray(_iterator16),
          _i16 = 0,
          _iterator16 = _isArray16 ? _iterator16 : (0, _getIterator3.default)(_iterator16); ; ) {
        var _ref17;
        if (_isArray16) {
          if (_i16 >= _iterator16.length)
            break;
          _ref17 = _iterator16[_i16++];
        } else {
          _i16 = _iterator16.next();
          if (_i16.done)
            break;
          _ref17 = _i16.value;
        }
        var _path = _ref17;
        var ids = _path.getBindingIdentifiers();
        var programParent = void 0;
        for (var name in ids) {
          if (_path.scope.getBinding(name))
            continue;
          programParent = programParent || _path.scope.getProgramParent();
          programParent.addGlobal(ids[name]);
        }
        _path.scope.registerConstantViolation(_path);
      }
      for (var _iterator17 = state.references,
          _isArray17 = Array.isArray(_iterator17),
          _i17 = 0,
          _iterator17 = _isArray17 ? _iterator17 : (0, _getIterator3.default)(_iterator17); ; ) {
        var _ref18;
        if (_isArray17) {
          if (_i17 >= _iterator17.length)
            break;
          _ref18 = _iterator17[_i17++];
        } else {
          _i17 = _iterator17.next();
          if (_i17.done)
            break;
          _ref18 = _i17.value;
        }
        var ref = _ref18;
        var binding = ref.scope.getBinding(ref.node.name);
        if (binding) {
          binding.reference(ref);
        } else {
          ref.scope.getProgramParent().addGlobal(ref.node);
        }
      }
      for (var _iterator18 = state.constantViolations,
          _isArray18 = Array.isArray(_iterator18),
          _i18 = 0,
          _iterator18 = _isArray18 ? _iterator18 : (0, _getIterator3.default)(_iterator18); ; ) {
        var _ref19;
        if (_isArray18) {
          if (_i18 >= _iterator18.length)
            break;
          _ref19 = _iterator18[_i18++];
        } else {
          _i18 = _iterator18.next();
          if (_i18.done)
            break;
          _ref19 = _i18.value;
        }
        var _path2 = _ref19;
        _path2.scope.registerConstantViolation(_path2);
      }
    };
    Scope.prototype.push = function push(opts) {
      var path = this.path;
      if (!path.isBlockStatement() && !path.isProgram()) {
        path = this.getBlockParent().path;
      }
      if (path.isSwitchStatement()) {
        path = this.getFunctionParent().path;
      }
      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
        t.ensureBlock(path.node);
        path = path.get("body");
      }
      var unique = opts.unique;
      var kind = opts.kind || "var";
      var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
      var dataKey = "declaration:" + kind + ":" + blockHoist;
      var declarPath = !unique && path.getData(dataKey);
      if (!declarPath) {
        var declar = t.variableDeclaration(kind, []);
        declar._generated = true;
        declar._blockHoist = blockHoist;
        var _path$unshiftContaine = path.unshiftContainer("body", [declar]);
        declarPath = _path$unshiftContaine[0];
        if (!unique)
          path.setData(dataKey, declarPath);
      }
      var declarator = t.variableDeclarator(opts.id, opts.init);
      declarPath.node.declarations.push(declarator);
      this.registerBinding(kind, declarPath.get("declarations").pop());
    };
    Scope.prototype.getProgramParent = function getProgramParent() {
      var scope = this;
      do {
        if (scope.path.isProgram()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a Function or Program...");
    };
    Scope.prototype.getFunctionParent = function getFunctionParent() {
      var scope = this;
      do {
        if (scope.path.isFunctionParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a Function or Program...");
    };
    Scope.prototype.getBlockParent = function getBlockParent() {
      var scope = this;
      do {
        if (scope.path.isBlockParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    };
    Scope.prototype.getAllBindings = function getAllBindings() {
      var ids = (0, _create2.default)(null);
      var scope = this;
      do {
        (0, _defaults2.default)(ids, scope.bindings);
        scope = scope.parent;
      } while (scope);
      return ids;
    };
    Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() {
      var ids = (0, _create2.default)(null);
      for (var _iterator19 = arguments,
          _isArray19 = Array.isArray(_iterator19),
          _i19 = 0,
          _iterator19 = _isArray19 ? _iterator19 : (0, _getIterator3.default)(_iterator19); ; ) {
        var _ref20;
        if (_isArray19) {
          if (_i19 >= _iterator19.length)
            break;
          _ref20 = _iterator19[_i19++];
        } else {
          _i19 = _iterator19.next();
          if (_i19.done)
            break;
          _ref20 = _i19.value;
        }
        var kind = _ref20;
        var scope = this;
        do {
          for (var name in scope.bindings) {
            var binding = scope.bindings[name];
            if (binding.kind === kind)
              ids[name] = binding;
          }
          scope = scope.parent;
        } while (scope);
      }
      return ids;
    };
    Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name, node) {
      return this.getBindingIdentifier(name) === node;
    };
    Scope.prototype.warnOnFlowBinding = function warnOnFlowBinding(binding) {
      if (_crawlCallsCount === 0 && binding && binding.path.isFlow()) {
        console.warn("\n        You or one of the Babel plugins you are using are using Flow declarations as bindings.\n        Support for this will be removed in version 6.8. To find out the caller, grep for this\n        message and change it to a `console.trace()`.\n      ");
      }
      return binding;
    };
    Scope.prototype.getBinding = function getBinding(name) {
      var scope = this;
      do {
        var binding = scope.getOwnBinding(name);
        if (binding)
          return this.warnOnFlowBinding(binding);
      } while (scope = scope.parent);
    };
    Scope.prototype.getOwnBinding = function getOwnBinding(name) {
      return this.warnOnFlowBinding(this.bindings[name]);
    };
    Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name) {
      var info = this.getBinding(name);
      return info && info.identifier;
    };
    Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name) {
      var binding = this.bindings[name];
      return binding && binding.identifier;
    };
    Scope.prototype.hasOwnBinding = function hasOwnBinding(name) {
      return !!this.getOwnBinding(name);
    };
    Scope.prototype.hasBinding = function hasBinding(name, noGlobals) {
      if (!name)
        return false;
      if (this.hasOwnBinding(name))
        return true;
      if (this.parentHasBinding(name, noGlobals))
        return true;
      if (this.hasUid(name))
        return true;
      if (!noGlobals && (0, _includes2.default)(Scope.globals, name))
        return true;
      if (!noGlobals && (0, _includes2.default)(Scope.contextVariables, name))
        return true;
      return false;
    };
    Scope.prototype.parentHasBinding = function parentHasBinding(name, noGlobals) {
      return this.parent && this.parent.hasBinding(name, noGlobals);
    };
    Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
      var info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
        info.scope = scope;
        scope.bindings[name] = info;
      }
    };
    Scope.prototype.removeOwnBinding = function removeOwnBinding(name) {
      delete this.bindings[name];
    };
    Scope.prototype.removeBinding = function removeBinding(name) {
      var info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
      }
      var scope = this;
      do {
        if (scope.uids[name]) {
          scope.uids[name] = false;
        }
      } while (scope = scope.parent);
    };
    return Scope;
  }();
  Scope.globals = (0, _keys2.default)(_globals2.default.builtin);
  Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  exports.default = Scope;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("144", ["f", "9", "145", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.findParent = findParent;
  exports.find = find;
  exports.getFunctionParent = getFunctionParent;
  exports.getStatementParent = getStatementParent;
  exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
  exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
  exports.getAncestry = getAncestry;
  exports.inType = inType;
  exports.inShadow = inShadow;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _index = $__require('145');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function findParent(callback) {
    var path = this;
    while (path = path.parentPath) {
      if (callback(path))
        return path;
    }
    return null;
  }
  function find(callback) {
    var path = this;
    do {
      if (callback(path))
        return path;
    } while (path = path.parentPath);
    return null;
  }
  function getFunctionParent() {
    return this.findParent(function(path) {
      return path.isFunction() || path.isProgram();
    });
  }
  function getStatementParent() {
    var path = this;
    do {
      if (Array.isArray(path.container)) {
        return path;
      }
    } while (path = path.parentPath);
  }
  function getEarliestCommonAncestorFrom(paths) {
    return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
      var earliest = void 0;
      var keys = t.VISITOR_KEYS[deepest.type];
      for (var _iterator = ancestries,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var ancestry = _ref;
        var path = ancestry[i + 1];
        if (!earliest) {
          earliest = path;
          continue;
        }
        if (path.listKey && earliest.listKey === path.listKey) {
          if (path.key < earliest.key) {
            earliest = path;
            continue;
          }
        }
        var earliestKeyIndex = keys.indexOf(earliest.parentKey);
        var currentKeyIndex = keys.indexOf(path.parentKey);
        if (earliestKeyIndex > currentKeyIndex) {
          earliest = path;
        }
      }
      return earliest;
    });
  }
  function getDeepestCommonAncestorFrom(paths, filter) {
    var _this = this;
    if (!paths.length) {
      return this;
    }
    if (paths.length === 1) {
      return paths[0];
    }
    var minDepth = Infinity;
    var lastCommonIndex = void 0,
        lastCommon = void 0;
    var ancestries = paths.map(function(path) {
      var ancestry = [];
      do {
        ancestry.unshift(path);
      } while ((path = path.parentPath) && path !== _this);
      if (ancestry.length < minDepth) {
        minDepth = ancestry.length;
      }
      return ancestry;
    });
    var first = ancestries[0];
    depthLoop: for (var i = 0; i < minDepth; i++) {
      var shouldMatch = first[i];
      for (var _iterator2 = ancestries,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var ancestry = _ref2;
        if (ancestry[i] !== shouldMatch) {
          break depthLoop;
        }
      }
      lastCommonIndex = i;
      lastCommon = shouldMatch;
    }
    if (lastCommon) {
      if (filter) {
        return filter(lastCommon, lastCommonIndex, ancestries);
      } else {
        return lastCommon;
      }
    } else {
      throw new Error("Couldn't find intersection");
    }
  }
  function getAncestry() {
    var path = this;
    var paths = [];
    do {
      paths.push(path);
    } while (path = path.parentPath);
    return paths;
  }
  function inType() {
    var path = this;
    while (path) {
      for (var _iterator3 = arguments,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var type = _ref3;
        if (path.node.type === type)
          return true;
      }
      path = path.parentPath;
    }
    return false;
  }
  function inShadow(key) {
    var parentFn = this.isFunction() ? this : this.findParent(function(p) {
      return p.isFunction();
    });
    if (!parentFn)
      return;
    if (parentFn.isFunctionExpression() || parentFn.isFunctionDeclaration()) {
      var shadow = parentFn.node.shadow;
      if (shadow && (!key || shadow[key] !== false)) {
        return parentFn;
      }
    } else if (parentFn.isArrowFunctionExpression()) {
      return parentFn;
    }
    return null;
  }
  return module.exports;
});

$__System.registerDynamic("146", ["f", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.default = function(node) {
    if (!this.isReferenced())
      return;
    var binding = this.scope.getBinding(node.name);
    if (binding) {
      if (binding.identifier.typeAnnotation) {
        return binding.identifier.typeAnnotation;
      } else {
        return getTypeAnnotationBindingConstantViolations(this, node.name);
      }
    }
    if (node.name === "undefined") {
      return t.voidTypeAnnotation();
    } else if (node.name === "NaN" || node.name === "Infinity") {
      return t.numberTypeAnnotation();
    } else if (node.name === "arguments") {}
  };
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function getTypeAnnotationBindingConstantViolations(path, name) {
    var binding = path.scope.getBinding(name);
    var types = [];
    path.typeAnnotation = t.unionTypeAnnotation(types);
    var functionConstantViolations = [];
    var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
    var testType = getConditionalAnnotation(path, name);
    if (testType) {
      (function() {
        var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
        constantViolations = constantViolations.filter(function(path) {
          return testConstantViolations.indexOf(path) < 0;
        });
        types.push(testType.typeAnnotation);
      })();
    }
    if (constantViolations.length) {
      constantViolations = constantViolations.concat(functionConstantViolations);
      for (var _iterator = constantViolations,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var violation = _ref;
        types.push(violation.getTypeAnnotation());
      }
    }
    if (types.length) {
      return t.createUnionTypeAnnotation(types);
    }
  }
  function getConstantViolationsBefore(binding, path, functions) {
    var violations = binding.constantViolations.slice();
    violations.unshift(binding.path);
    return violations.filter(function(violation) {
      violation = violation.resolve();
      var status = violation._guessExecutionStatusRelativeTo(path);
      if (functions && status === "function")
        functions.push(violation);
      return status === "before";
    });
  }
  function inferAnnotationFromBinaryExpression(name, path) {
    var operator = path.node.operator;
    var right = path.get("right").resolve();
    var left = path.get("left").resolve();
    var target = void 0;
    if (left.isIdentifier({name: name})) {
      target = right;
    } else if (right.isIdentifier({name: name})) {
      target = left;
    }
    if (target) {
      if (operator === "===") {
        return target.getTypeAnnotation();
      } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
        return t.numberTypeAnnotation();
      } else {
        return;
      }
    } else {
      if (operator !== "===")
        return;
    }
    var typeofPath = void 0;
    var typePath = void 0;
    if (left.isUnaryExpression({operator: "typeof"})) {
      typeofPath = left;
      typePath = right;
    } else if (right.isUnaryExpression({operator: "typeof"})) {
      typeofPath = right;
      typePath = left;
    }
    if (!typePath && !typeofPath)
      return;
    typePath = typePath.resolve();
    if (!typePath.isLiteral())
      return;
    var typeValue = typePath.node.value;
    if (typeof typeValue !== "string")
      return;
    if (!typeofPath.get("argument").isIdentifier({name: name}))
      return;
    return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
  }
  function getParentConditionalPath(path) {
    var parentPath = void 0;
    while (parentPath = path.parentPath) {
      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
        if (path.key === "test") {
          return;
        } else {
          return parentPath;
        }
      } else {
        path = parentPath;
      }
    }
  }
  function getConditionalAnnotation(path, name) {
    var ifStatement = getParentConditionalPath(path);
    if (!ifStatement)
      return;
    var test = ifStatement.get("test");
    var paths = [test];
    var types = [];
    do {
      var _path = paths.shift().resolve();
      if (_path.isLogicalExpression()) {
        paths.push(_path.get("left"));
        paths.push(_path.get("right"));
      }
      if (_path.isBinaryExpression()) {
        var type = inferAnnotationFromBinaryExpression(name, _path);
        if (type)
          types.push(type);
      }
    } while (paths.length);
    if (types.length) {
      return {
        typeAnnotation: t.createUnionTypeAnnotation(types),
        ifStatement: ifStatement
      };
    } else {
      return getConditionalAnnotation(ifStatement, name);
    }
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("147", ["146", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.Class = exports.Function = exports.Identifier = undefined;
  var _infererReference = $__require('146');
  Object.defineProperty(exports, "Identifier", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_infererReference).default;
    }
  });
  exports.VariableDeclarator = VariableDeclarator;
  exports.TypeCastExpression = TypeCastExpression;
  exports.NewExpression = NewExpression;
  exports.TemplateLiteral = TemplateLiteral;
  exports.UnaryExpression = UnaryExpression;
  exports.BinaryExpression = BinaryExpression;
  exports.LogicalExpression = LogicalExpression;
  exports.ConditionalExpression = ConditionalExpression;
  exports.SequenceExpression = SequenceExpression;
  exports.AssignmentExpression = AssignmentExpression;
  exports.UpdateExpression = UpdateExpression;
  exports.StringLiteral = StringLiteral;
  exports.NumericLiteral = NumericLiteral;
  exports.BooleanLiteral = BooleanLiteral;
  exports.NullLiteral = NullLiteral;
  exports.RegExpLiteral = RegExpLiteral;
  exports.ObjectExpression = ObjectExpression;
  exports.ArrayExpression = ArrayExpression;
  exports.RestElement = RestElement;
  exports.CallExpression = CallExpression;
  exports.TaggedTemplateExpression = TaggedTemplateExpression;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function VariableDeclarator() {
    var id = this.get("id");
    if (id.isIdentifier()) {
      return this.get("init").getTypeAnnotation();
    } else {
      return;
    }
  }
  function TypeCastExpression(node) {
    return node.typeAnnotation;
  }
  TypeCastExpression.validParent = true;
  function NewExpression(node) {
    if (this.get("callee").isIdentifier()) {
      return t.genericTypeAnnotation(node.callee);
    }
  }
  function TemplateLiteral() {
    return t.stringTypeAnnotation();
  }
  function UnaryExpression(node) {
    var operator = node.operator;
    if (operator === "void") {
      return t.voidTypeAnnotation();
    } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.numberTypeAnnotation();
    } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.stringTypeAnnotation();
    } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
      return t.booleanTypeAnnotation();
    }
  }
  function BinaryExpression(node) {
    var operator = node.operator;
    if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
      return t.numberTypeAnnotation();
    } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
      return t.booleanTypeAnnotation();
    } else if (operator === "+") {
      var right = this.get("right");
      var left = this.get("left");
      if (left.isBaseType("number") && right.isBaseType("number")) {
        return t.numberTypeAnnotation();
      } else if (left.isBaseType("string") || right.isBaseType("string")) {
        return t.stringTypeAnnotation();
      }
      return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
    }
  }
  function LogicalExpression() {
    return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
  }
  function ConditionalExpression() {
    return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
  }
  function SequenceExpression() {
    return this.get("expressions").pop().getTypeAnnotation();
  }
  function AssignmentExpression() {
    return this.get("right").getTypeAnnotation();
  }
  function UpdateExpression(node) {
    var operator = node.operator;
    if (operator === "++" || operator === "--") {
      return t.numberTypeAnnotation();
    }
  }
  function StringLiteral() {
    return t.stringTypeAnnotation();
  }
  function NumericLiteral() {
    return t.numberTypeAnnotation();
  }
  function BooleanLiteral() {
    return t.booleanTypeAnnotation();
  }
  function NullLiteral() {
    return t.nullLiteralTypeAnnotation();
  }
  function RegExpLiteral() {
    return t.genericTypeAnnotation(t.identifier("RegExp"));
  }
  function ObjectExpression() {
    return t.genericTypeAnnotation(t.identifier("Object"));
  }
  function ArrayExpression() {
    return t.genericTypeAnnotation(t.identifier("Array"));
  }
  function RestElement() {
    return ArrayExpression();
  }
  RestElement.validParent = true;
  function Func() {
    return t.genericTypeAnnotation(t.identifier("Function"));
  }
  exports.Function = Func;
  exports.Class = Func;
  function CallExpression() {
    return resolveCall(this.get("callee"));
  }
  function TaggedTemplateExpression() {
    return resolveCall(this.get("tag"));
  }
  function resolveCall(callee) {
    callee = callee.resolve();
    if (callee.isFunction()) {
      if (callee.is("async")) {
        if (callee.is("generator")) {
          return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
        } else {
          return t.genericTypeAnnotation(t.identifier("Promise"));
        }
      } else {
        if (callee.node.returnType) {
          return callee.node.returnType;
        } else {}
      }
    }
  }
  return module.exports;
});

$__System.registerDynamic("148", ["f", "147", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.getTypeAnnotation = getTypeAnnotation;
  exports._getTypeAnnotation = _getTypeAnnotation;
  exports.isBaseType = isBaseType;
  exports.couldBeBaseType = couldBeBaseType;
  exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
  exports.isGenericType = isGenericType;
  var _inferers = $__require('147');
  var inferers = _interopRequireWildcard(_inferers);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function getTypeAnnotation() {
    if (this.typeAnnotation)
      return this.typeAnnotation;
    var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
    if (t.isTypeAnnotation(type))
      type = type.typeAnnotation;
    return this.typeAnnotation = type;
  }
  function _getTypeAnnotation() {
    var node = this.node;
    if (!node) {
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        var declar = this.parentPath.parentPath;
        var declarParent = declar.parentPath;
        if (declar.key === "left" && declarParent.isForInStatement()) {
          return t.stringTypeAnnotation();
        }
        if (declar.key === "left" && declarParent.isForOfStatement()) {
          return t.anyTypeAnnotation();
        }
        return t.voidTypeAnnotation();
      } else {
        return;
      }
    }
    if (node.typeAnnotation) {
      return node.typeAnnotation;
    }
    var inferer = inferers[node.type];
    if (inferer) {
      return inferer.call(this, node);
    }
    inferer = inferers[this.parentPath.type];
    if (inferer && inferer.validParent) {
      return this.parentPath.getTypeAnnotation();
    }
  }
  function isBaseType(baseName, soft) {
    return _isBaseType(baseName, this.getTypeAnnotation(), soft);
  }
  function _isBaseType(baseName, type, soft) {
    if (baseName === "string") {
      return t.isStringTypeAnnotation(type);
    } else if (baseName === "number") {
      return t.isNumberTypeAnnotation(type);
    } else if (baseName === "boolean") {
      return t.isBooleanTypeAnnotation(type);
    } else if (baseName === "any") {
      return t.isAnyTypeAnnotation(type);
    } else if (baseName === "mixed") {
      return t.isMixedTypeAnnotation(type);
    } else if (baseName === "void") {
      return t.isVoidTypeAnnotation(type);
    } else {
      if (soft) {
        return false;
      } else {
        throw new Error("Unknown base type " + baseName);
      }
    }
  }
  function couldBeBaseType(name) {
    var type = this.getTypeAnnotation();
    if (t.isAnyTypeAnnotation(type))
      return true;
    if (t.isUnionTypeAnnotation(type)) {
      for (var _iterator = type.types,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var type2 = _ref;
        if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
          return true;
        }
      }
      return false;
    } else {
      return _isBaseType(name, type, true);
    }
  }
  function baseTypeStrictlyMatches(right) {
    var left = this.getTypeAnnotation();
    right = right.getTypeAnnotation();
    if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
      return right.type === left.type;
    }
  }
  function isGenericType(genericName) {
    var type = this.getTypeAnnotation();
    return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {name: genericName});
  }
  return module.exports;
});

$__System.registerDynamic("149", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  module.exports.matchToToken = function(match) {
    var token = {
      type: "invalid",
      value: match[0]
    };
    if (match[1])
      token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5])
      token.type = "comment";
    else if (match[6])
      token.type = "comment", token.closed = !!match[7];
    else if (match[8])
      token.type = "regex";
    else if (match[9])
      token.type = "number";
    else if (match[10])
      token.type = "name";
    else if (match[11])
      token.type = "punctuator";
    else if (match[12])
      token.type = "whitespace";
    return token;
  };
  return module.exports;
});

$__System.registerDynamic("14a", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    'use strict';
    function isExpression(node) {
      if (node == null) {
        return false;
      }
      switch (node.type) {
        case 'ArrayExpression':
        case 'AssignmentExpression':
        case 'BinaryExpression':
        case 'CallExpression':
        case 'ConditionalExpression':
        case 'FunctionExpression':
        case 'Identifier':
        case 'Literal':
        case 'LogicalExpression':
        case 'MemberExpression':
        case 'NewExpression':
        case 'ObjectExpression':
        case 'SequenceExpression':
        case 'ThisExpression':
        case 'UnaryExpression':
        case 'UpdateExpression':
          return true;
      }
      return false;
    }
    function isIterationStatement(node) {
      if (node == null) {
        return false;
      }
      switch (node.type) {
        case 'DoWhileStatement':
        case 'ForInStatement':
        case 'ForStatement':
        case 'WhileStatement':
          return true;
      }
      return false;
    }
    function isStatement(node) {
      if (node == null) {
        return false;
      }
      switch (node.type) {
        case 'BlockStatement':
        case 'BreakStatement':
        case 'ContinueStatement':
        case 'DebuggerStatement':
        case 'DoWhileStatement':
        case 'EmptyStatement':
        case 'ExpressionStatement':
        case 'ForInStatement':
        case 'ForStatement':
        case 'IfStatement':
        case 'LabeledStatement':
        case 'ReturnStatement':
        case 'SwitchStatement':
        case 'ThrowStatement':
        case 'TryStatement':
        case 'VariableDeclaration':
        case 'WhileStatement':
        case 'WithStatement':
          return true;
      }
      return false;
    }
    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }
    function trailingStatement(node) {
      switch (node.type) {
        case 'IfStatement':
          if (node.alternate != null) {
            return node.alternate;
          }
          return node.consequent;
        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
          return node.body;
      }
      return null;
    }
    function isProblematicIfStatement(node) {
      var current;
      if (node.type !== 'IfStatement') {
        return false;
      }
      if (node.alternate == null) {
        return false;
      }
      current = node.consequent;
      do {
        if (current.type === 'IfStatement') {
          if (current.alternate == null) {
            return true;
          }
        }
        current = trailingStatement(current);
      } while (current);
      return false;
    }
    module.exports = {
      isExpression: isExpression,
      isStatement: isStatement,
      isIterationStatement: isIterationStatement,
      isSourceElement: isSourceElement,
      isProblematicIfStatement: isProblematicIfStatement,
      trailingStatement: trailingStatement
    };
  }());
  return module.exports;
});

$__System.registerDynamic("14b", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    'use strict';
    var ES6Regex,
        ES5Regex,
        NON_ASCII_WHITESPACES,
        IDENTIFIER_START,
        IDENTIFIER_PART,
        ch;
    ES5Regex = {
      NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
      NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };
    ES6Regex = {
      NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
      NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };
    function isDecimalDigit(ch) {
      return 0x30 <= ch && ch <= 0x39;
    }
    function isHexDigit(ch) {
      return 0x30 <= ch && ch <= 0x39 || 0x61 <= ch && ch <= 0x66 || 0x41 <= ch && ch <= 0x46;
    }
    function isOctalDigit(ch) {
      return ch >= 0x30 && ch <= 0x37;
    }
    NON_ASCII_WHITESPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];
    function isWhiteSpace(ch) {
      return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }
    function isLineTerminator(ch) {
      return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }
    function fromCodePoint(cp) {
      if (cp <= 0xFFFF) {
        return String.fromCharCode(cp);
      }
      var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
      var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
      return cu1 + cu2;
    }
    IDENTIFIER_START = new Array(0x80);
    for (ch = 0; ch < 0x80; ++ch) {
      IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch === 0x24 || ch === 0x5F;
    }
    IDENTIFIER_PART = new Array(0x80);
    for (ch = 0; ch < 0x80; ++ch) {
      IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch >= 0x30 && ch <= 0x39 || ch === 0x24 || ch === 0x5F;
    }
    function isIdentifierStartES5(ch) {
      return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }
    function isIdentifierPartES5(ch) {
      return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }
    function isIdentifierStartES6(ch) {
      return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }
    function isIdentifierPartES6(ch) {
      return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }
    module.exports = {
      isDecimalDigit: isDecimalDigit,
      isHexDigit: isHexDigit,
      isOctalDigit: isOctalDigit,
      isWhiteSpace: isWhiteSpace,
      isLineTerminator: isLineTerminator,
      isIdentifierStartES5: isIdentifierStartES5,
      isIdentifierPartES5: isIdentifierPartES5,
      isIdentifierStartES6: isIdentifierStartES6,
      isIdentifierPartES6: isIdentifierPartES6
    };
  }());
  return module.exports;
});

$__System.registerDynamic("14c", ["14b"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    'use strict';
    var code = $__require('14b');
    function isStrictModeReservedWordES6(id) {
      switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
          return true;
        default:
          return false;
      }
    }
    function isKeywordES5(id, strict) {
      if (!strict && id === 'yield') {
        return false;
      }
      return isKeywordES6(id, strict);
    }
    function isKeywordES6(id, strict) {
      if (strict && isStrictModeReservedWordES6(id)) {
        return true;
      }
      switch (id.length) {
        case 2:
          return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
          return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
          return (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
          return (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw') || (id === 'const') || (id === 'yield') || (id === 'class') || (id === 'super');
        case 6:
          return (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
          return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
          return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
          return (id === 'instanceof');
        default:
          return false;
      }
    }
    function isReservedWordES5(id, strict) {
      return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }
    function isReservedWordES6(id, strict) {
      return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }
    function isRestrictedWord(id) {
      return id === 'eval' || id === 'arguments';
    }
    function isIdentifierNameES5(id) {
      var i,
          iz,
          ch;
      if (id.length === 0) {
        return false;
      }
      ch = id.charCodeAt(0);
      if (!code.isIdentifierStartES5(ch)) {
        return false;
      }
      for (i = 1, iz = id.length; i < iz; ++i) {
        ch = id.charCodeAt(i);
        if (!code.isIdentifierPartES5(ch)) {
          return false;
        }
      }
      return true;
    }
    function decodeUtf16(lead, trail) {
      return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }
    function isIdentifierNameES6(id) {
      var i,
          iz,
          ch,
          lowCh,
          check;
      if (id.length === 0) {
        return false;
      }
      check = code.isIdentifierStartES6;
      for (i = 0, iz = id.length; i < iz; ++i) {
        ch = id.charCodeAt(i);
        if (0xD800 <= ch && ch <= 0xDBFF) {
          ++i;
          if (i >= iz) {
            return false;
          }
          lowCh = id.charCodeAt(i);
          if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
            return false;
          }
          ch = decodeUtf16(ch, lowCh);
        }
        if (!check(ch)) {
          return false;
        }
        check = code.isIdentifierPartES6;
      }
      return true;
    }
    function isIdentifierES5(id, strict) {
      return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }
    function isIdentifierES6(id, strict) {
      return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }
    module.exports = {
      isKeywordES5: isKeywordES5,
      isKeywordES6: isKeywordES6,
      isReservedWordES5: isReservedWordES5,
      isReservedWordES6: isReservedWordES6,
      isRestrictedWord: isRestrictedWord,
      isIdentifierNameES5: isIdentifierNameES5,
      isIdentifierNameES6: isIdentifierNameES6,
      isIdentifierES5: isIdentifierES5,
      isIdentifierES6: isIdentifierES6
    };
  }());
  return module.exports;
});

$__System.registerDynamic("fe", ["14a", "14b", "14c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    'use strict';
    exports.ast = $__require('14a');
    exports.code = $__require('14b');
    exports.keyword = $__require('14c');
  }());
  return module.exports;
});

$__System.registerDynamic("14d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  module.exports = function(str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }
    return str.replace(matchOperatorsRe, '\\$&');
  };
  return module.exports;
});

$__System.registerDynamic("14e", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function assembleStyles() {
    var styles = {
      modifiers: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      colors: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39]
      },
      bgColors: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49]
      }
    };
    styles.colors.grey = styles.colors.gray;
    Object.keys(styles).forEach(function(groupName) {
      var group = styles[groupName];
      Object.keys(group).forEach(function(styleName) {
        var style = group[styleName];
        styles[styleName] = group[styleName] = {
          open: '\u001b[' + style[0] + 'm',
          close: '\u001b[' + style[1] + 'm'
        };
      });
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    });
    return styles;
  }
  Object.defineProperty(module, 'exports', {
    enumerable: true,
    get: assembleStyles
  });
  return module.exports;
});

$__System.registerDynamic("14f", ["150"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ansiRegex = $__require('150')();
  module.exports = function(str) {
    return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
  };
  return module.exports;
});

$__System.registerDynamic("150", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function() {
    return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
  };
  return module.exports;
});

$__System.registerDynamic("151", ["150"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ansiRegex = $__require('150');
  var re = new RegExp(ansiRegex().source);
  module.exports = re.test.bind(re);
  return module.exports;
});

$__System.registerDynamic("152", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var argv = process.argv;
  var terminator = argv.indexOf('--');
  var hasFlag = function(flag) {
    flag = '--' + flag;
    var pos = argv.indexOf(flag);
    return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
  };
  module.exports = (function() {
    if ('FORCE_COLOR' in process.env) {
      return true;
    }
    if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
      return false;
    }
    if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
      return true;
    }
    if (process.stdout && !process.stdout.isTTY) {
      return false;
    }
    if (process.platform === 'win32') {
      return true;
    }
    if ('COLORTERM' in process.env) {
      return true;
    }
    if (process.env.TERM === 'dumb') {
      return false;
    }
    if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
      return true;
    }
    return false;
  })();
  return module.exports;
});

$__System.registerDynamic("153", ["14d", "14e", "14f", "151", "152", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var escapeStringRegexp = $__require('14d');
  var ansiStyles = $__require('14e');
  var stripAnsi = $__require('14f');
  var hasAnsi = $__require('151');
  var supportsColor = $__require('152');
  var defineProps = Object.defineProperties;
  var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);
  function Chalk(options) {
    this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
  }
  if (isSimpleWindowsTerm) {
    ansiStyles.blue.open = '\u001b[94m';
  }
  var styles = (function() {
    var ret = {};
    Object.keys(ansiStyles).forEach(function(key) {
      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
      ret[key] = {get: function() {
          return build.call(this, this._styles.concat(key));
        }};
    });
    return ret;
  })();
  var proto = defineProps(function chalk() {}, styles);
  function build(_styles) {
    var builder = function() {
      return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder.enabled = this.enabled;
    builder.__proto__ = proto;
    return builder;
  }
  function applyStyle() {
    var args = arguments;
    var argsLen = args.length;
    var str = argsLen !== 0 && String(arguments[0]);
    if (argsLen > 1) {
      for (var a = 1; a < argsLen; a++) {
        str += ' ' + args[a];
      }
    }
    if (!this.enabled || !str) {
      return str;
    }
    var nestedStyles = this._styles;
    var i = nestedStyles.length;
    var originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
      ansiStyles.dim.open = '';
    }
    while (i--) {
      var code = ansiStyles[nestedStyles[i]];
      str = code.open + str.replace(code.closeRe, code.open) + code.close;
    }
    ansiStyles.dim.open = originalDim;
    return str;
  }
  function init() {
    var ret = {};
    Object.keys(styles).forEach(function(name) {
      ret[name] = {get: function() {
          return build.call(this, [name]);
        }};
    });
    return ret;
  }
  defineProps(Chalk.prototype, init());
  module.exports = new Chalk();
  module.exports.styles = ansiStyles;
  module.exports.hasColor = hasAnsi;
  module.exports.stripColor = stripAnsi;
  module.exports.supportsColor = supportsColor;
  return module.exports;
});

$__System.registerDynamic("a0", ["149", "fe", "153"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(rawLines, lineNumber, colNumber) {
    var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
    colNumber = Math.max(colNumber, 0);
    var highlighted = opts.highlightCode && _chalk2.default.supportsColor;
    if (highlighted)
      rawLines = highlight(rawLines);
    var lines = rawLines.split(NEWLINE);
    var start = Math.max(lineNumber - 3, 0);
    var end = Math.min(lines.length, lineNumber + 3);
    if (!lineNumber && !colNumber) {
      start = 0;
      end = lines.length;
    }
    var numberMaxWidth = String(end).length;
    var frame = lines.slice(start, end).map(function(line, index) {
      var number = start + 1 + index;
      var paddedNumber = (" " + number).slice(-numberMaxWidth);
      var gutter = " " + paddedNumber + " | ";
      if (number === lineNumber) {
        var markerLine = "";
        if (colNumber) {
          var markerSpacing = line.slice(0, colNumber - 1).replace(/[^\t]/g, " ");
          markerLine = "\n " + gutter.replace(/\d/g, " ") + markerSpacing + "^";
        }
        return (">" + gutter + line + markerLine);
      } else {
        return (" " + gutter + line);
      }
    }).join("\n");
    if (highlighted) {
      return (_chalk2.default.reset(frame));
    } else {
      return frame;
    }
  };
  var _jsTokens = $__require('149');
  var _jsTokens2 = _interopRequireDefault(_jsTokens);
  var _esutils = $__require('fe');
  var _esutils2 = _interopRequireDefault(_esutils);
  var _chalk = $__require('153');
  var _chalk2 = _interopRequireDefault(_chalk);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var defs = {
    string: _chalk2.default.red,
    punctuator: _chalk2.default.bold,
    curly: _chalk2.default.green,
    parens: _chalk2.default.blue.bold,
    square: _chalk2.default.yellow,
    keyword: _chalk2.default.cyan,
    number: _chalk2.default.magenta,
    regex: _chalk2.default.magenta,
    comment: _chalk2.default.grey,
    invalid: _chalk2.default.inverse
  };
  var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  function getTokenType(match) {
    var token = _jsTokens2.default.matchToToken(match);
    if (token.type === "name" && _esutils2.default.keyword.isReservedWordES6(token.value)) {
      return "keyword";
    }
    if (token.type === "punctuator") {
      switch (token.value) {
        case "{":
        case "}":
          return "curly";
        case "(":
        case ")":
          return "parens";
        case "[":
        case "]":
          return "square";
      }
    }
    return token.type;
  }
  function highlight(text) {
    return text.replace(_jsTokens2.default, function() {
      for (var _len = arguments.length,
          args = Array(_len),
          _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var type = getTokenType(args);
      var colorize = defs[type];
      if (colorize) {
        return args[0].split(NEWLINE).map(function(str) {
          return colorize(str);
        }).join("\n");
      } else {
        return args[0];
      }
    });
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("154", ["155", "156", "157"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _types = $__require('155');
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  var _whitespace = $__require('157');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  pp.addExtra = function(node, key, val) {
    if (!node)
      return;
    var extra = node.extra = node.extra || {};
    extra[key] = val;
  };
  pp.isRelational = function(op) {
    return this.match(_types.types.relational) && this.state.value === op;
  };
  pp.expectRelational = function(op) {
    if (this.isRelational(op)) {
      this.next();
    } else {
      this.unexpected();
    }
  };
  pp.isContextual = function(name) {
    return this.match(_types.types.name) && this.state.value === name;
  };
  pp.eatContextual = function(name) {
    return this.state.value === name && this.eat(_types.types.name);
  };
  pp.expectContextual = function(name) {
    if (!this.eatContextual(name))
      this.unexpected();
  };
  pp.canInsertSemicolon = function() {
    return this.match(_types.types.eof) || this.match(_types.types.braceR) || _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
  };
  pp.isLineTerminator = function() {
    return this.eat(_types.types.semi) || this.canInsertSemicolon();
  };
  pp.semicolon = function() {
    if (!this.isLineTerminator())
      this.unexpected();
  };
  pp.expect = function(type) {
    return this.eat(type) || this.unexpected();
  };
  pp.unexpected = function(pos) {
    this.raise(pos != null ? pos : this.state.start, "Unexpected token");
  };
  return module.exports;
});

$__System.registerDynamic("158", ["f", "9f", "155", "156", "157"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _types = $__require('155');
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  var _whitespace = $__require('157');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  pp.parseTopLevel = function(file, program) {
    program.sourceType = this.options.sourceType;
    this.parseBlockBody(program, true, true, _types.types.eof);
    file.program = this.finishNode(program, "Program");
    file.comments = this.state.comments;
    file.tokens = this.state.tokens;
    return this.finishNode(file, "File");
  };
  var loopLabel = {kind: "loop"},
      switchLabel = {kind: "switch"};
  pp.stmtToDirective = function(stmt) {
    var expr = stmt.expression;
    var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
    var directive = this.startNodeAt(stmt.start, stmt.loc.start);
    var raw = this.input.slice(expr.start, expr.end);
    var val = directiveLiteral.value = raw.slice(1, -1);
    this.addExtra(directiveLiteral, "raw", raw);
    this.addExtra(directiveLiteral, "rawValue", val);
    directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
    return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
  };
  pp.parseStatement = function(declaration, topLevel) {
    if (this.match(_types.types.at)) {
      this.parseDecorators(true);
    }
    var starttype = this.state.type,
        node = this.startNode();
    switch (starttype) {
      case _types.types._break:
      case _types.types._continue:
        return this.parseBreakContinueStatement(node, starttype.keyword);
      case _types.types._debugger:
        return this.parseDebuggerStatement(node);
      case _types.types._do:
        return this.parseDoStatement(node);
      case _types.types._for:
        return this.parseForStatement(node);
      case _types.types._function:
        if (!declaration)
          this.unexpected();
        return this.parseFunctionStatement(node);
      case _types.types._class:
        if (!declaration)
          this.unexpected();
        this.takeDecorators(node);
        return this.parseClass(node, true);
      case _types.types._if:
        return this.parseIfStatement(node);
      case _types.types._return:
        return this.parseReturnStatement(node);
      case _types.types._switch:
        return this.parseSwitchStatement(node);
      case _types.types._throw:
        return this.parseThrowStatement(node);
      case _types.types._try:
        return this.parseTryStatement(node);
      case _types.types._let:
      case _types.types._const:
        if (!declaration)
          this.unexpected();
      case _types.types._var:
        return this.parseVarStatement(node, starttype);
      case _types.types._while:
        return this.parseWhileStatement(node);
      case _types.types._with:
        return this.parseWithStatement(node);
      case _types.types.braceL:
        return this.parseBlock();
      case _types.types.semi:
        return this.parseEmptyStatement(node);
      case _types.types._export:
      case _types.types._import:
        if (!this.options.allowImportExportEverywhere) {
          if (!topLevel) {
            this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
          }
          if (!this.inModule) {
            this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
          }
        }
        return starttype === _types.types._import ? this.parseImport(node) : this.parseExport(node);
      case _types.types.name:
        if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
          var state = this.state.clone();
          this.next();
          if (this.match(_types.types._function) && !this.canInsertSemicolon()) {
            this.expect(_types.types._function);
            return this.parseFunction(node, true, false, true);
          } else {
            this.state = state;
          }
        }
    }
    var maybeName = this.state.value;
    var expr = this.parseExpression();
    if (starttype === _types.types.name && expr.type === "Identifier" && this.eat(_types.types.colon)) {
      return this.parseLabeledStatement(node, maybeName, expr);
    } else {
      return this.parseExpressionStatement(node, expr);
    }
  };
  pp.takeDecorators = function(node) {
    if (this.state.decorators.length) {
      node.decorators = this.state.decorators;
      this.state.decorators = [];
    }
  };
  pp.parseDecorators = function(allowExport) {
    while (this.match(_types.types.at)) {
      this.state.decorators.push(this.parseDecorator());
    }
    if (allowExport && this.match(_types.types._export)) {
      return;
    }
    if (!this.match(_types.types._class)) {
      this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
    }
  };
  pp.parseDecorator = function() {
    if (!this.hasPlugin("decorators")) {
      this.unexpected();
    }
    var node = this.startNode();
    this.next();
    node.expression = this.parseMaybeAssign();
    return this.finishNode(node, "Decorator");
  };
  pp.parseBreakContinueStatement = function(node, keyword) {
    var isBreak = keyword === "break";
    this.next();
    if (this.isLineTerminator()) {
      node.label = null;
    } else if (!this.match(_types.types.name)) {
      this.unexpected();
    } else {
      node.label = this.parseIdentifier();
      this.semicolon();
    }
    var i = void 0;
    for (i = 0; i < this.state.labels.length; ++i) {
      var lab = this.state.labels[i];
      if (node.label == null || lab.name === node.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop"))
          break;
        if (node.label && isBreak)
          break;
      }
    }
    if (i === this.state.labels.length)
      this.raise(node.start, "Unsyntactic " + keyword);
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
  };
  pp.parseDebuggerStatement = function(node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement");
  };
  pp.parseDoStatement = function(node) {
    this.next();
    this.state.labels.push(loopLabel);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    this.expect(_types.types._while);
    node.test = this.parseParenExpression();
    this.eat(_types.types.semi);
    return this.finishNode(node, "DoWhileStatement");
  };
  pp.parseForStatement = function(node) {
    this.next();
    this.state.labels.push(loopLabel);
    var forAwait = false;
    if (this.hasPlugin("asyncGenerators") && this.state.inAsync && this.isContextual("await")) {
      forAwait = true;
      this.next();
    }
    this.expect(_types.types.parenL);
    if (this.match(_types.types.semi)) {
      if (forAwait) {
        this.unexpected();
      }
      return this.parseFor(node, null);
    }
    if (this.match(_types.types._var) || this.match(_types.types._let) || this.match(_types.types._const)) {
      var _init = this.startNode(),
          varKind = this.state.type;
      this.next();
      this.parseVar(_init, true, varKind);
      this.finishNode(_init, "VariableDeclaration");
      if (this.match(_types.types._in) || this.isContextual("of")) {
        if (_init.declarations.length === 1 && !_init.declarations[0].init) {
          return this.parseForIn(node, _init, forAwait);
        }
      }
      if (forAwait) {
        this.unexpected();
      }
      return this.parseFor(node, _init);
    }
    var refShorthandDefaultPos = {start: 0};
    var init = this.parseExpression(true, refShorthandDefaultPos);
    if (this.match(_types.types._in) || this.isContextual("of")) {
      this.toAssignable(init);
      this.checkLVal(init);
      return this.parseForIn(node, init, forAwait);
    } else if (refShorthandDefaultPos.start) {
      this.unexpected(refShorthandDefaultPos.start);
    }
    if (forAwait) {
      this.unexpected();
    }
    return this.parseFor(node, init);
  };
  pp.parseFunctionStatement = function(node) {
    this.next();
    return this.parseFunction(node, true);
  };
  pp.parseIfStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    node.consequent = this.parseStatement(false);
    node.alternate = this.eat(_types.types._else) ? this.parseStatement(false) : null;
    return this.finishNode(node, "IfStatement");
  };
  pp.parseReturnStatement = function(node) {
    if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
      this.raise(this.state.start, "'return' outside of function");
    }
    this.next();
    if (this.isLineTerminator()) {
      node.argument = null;
    } else {
      node.argument = this.parseExpression();
      this.semicolon();
    }
    return this.finishNode(node, "ReturnStatement");
  };
  pp.parseSwitchStatement = function(node) {
    this.next();
    node.discriminant = this.parseParenExpression();
    node.cases = [];
    this.expect(_types.types.braceL);
    this.state.labels.push(switchLabel);
    var cur = void 0;
    for (var sawDefault; !this.match(_types.types.braceR); ) {
      if (this.match(_types.types._case) || this.match(_types.types._default)) {
        var isCase = this.match(_types.types._case);
        if (cur)
          this.finishNode(cur, "SwitchCase");
        node.cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault)
            this.raise(this.state.lastTokStart, "Multiple default clauses");
          sawDefault = true;
          cur.test = null;
        }
        this.expect(_types.types.colon);
      } else {
        if (cur) {
          cur.consequent.push(this.parseStatement(true));
        } else {
          this.unexpected();
        }
      }
    }
    if (cur)
      this.finishNode(cur, "SwitchCase");
    this.next();
    this.state.labels.pop();
    return this.finishNode(node, "SwitchStatement");
  };
  pp.parseThrowStatement = function(node) {
    this.next();
    if (_whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start)))
      this.raise(this.state.lastTokEnd, "Illegal newline after throw");
    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement");
  };
  var empty = [];
  pp.parseTryStatement = function(node) {
    this.next();
    node.block = this.parseBlock();
    node.handler = null;
    if (this.match(_types.types._catch)) {
      var clause = this.startNode();
      this.next();
      this.expect(_types.types.parenL);
      clause.param = this.parseBindingAtom();
      this.checkLVal(clause.param, true, (0, _create2.default)(null));
      this.expect(_types.types.parenR);
      clause.body = this.parseBlock();
      node.handler = this.finishNode(clause, "CatchClause");
    }
    node.guardedHandlers = empty;
    node.finalizer = this.eat(_types.types._finally) ? this.parseBlock() : null;
    if (!node.handler && !node.finalizer) {
      this.raise(node.start, "Missing catch or finally clause");
    }
    return this.finishNode(node, "TryStatement");
  };
  pp.parseVarStatement = function(node, kind) {
    this.next();
    this.parseVar(node, false, kind);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration");
  };
  pp.parseWhileStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    this.state.labels.push(loopLabel);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, "WhileStatement");
  };
  pp.parseWithStatement = function(node) {
    if (this.state.strict)
      this.raise(this.state.start, "'with' in strict mode");
    this.next();
    node.object = this.parseParenExpression();
    node.body = this.parseStatement(false);
    return this.finishNode(node, "WithStatement");
  };
  pp.parseEmptyStatement = function(node) {
    this.next();
    return this.finishNode(node, "EmptyStatement");
  };
  pp.parseLabeledStatement = function(node, maybeName, expr) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;
    try {
      for (var _iterator = (0, _getIterator3.default)(this.state.labels),
          _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _label = _step.value;
        if (_label.name === maybeName) {
          this.raise(expr.start, "Label '" + maybeName + "' is already declared");
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
    var kind = this.state.type.isLoop ? "loop" : this.match(_types.types._switch) ? "switch" : null;
    for (var i = this.state.labels.length - 1; i >= 0; i--) {
      var label = this.state.labels[i];
      if (label.statementStart === node.start) {
        label.statementStart = this.state.start;
        label.kind = kind;
      } else {
        break;
      }
    }
    this.state.labels.push({
      name: maybeName,
      kind: kind,
      statementStart: this.state.start
    });
    node.body = this.parseStatement(true);
    this.state.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement");
  };
  pp.parseExpressionStatement = function(node, expr) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement");
  };
  pp.parseBlock = function(allowDirectives) {
    var node = this.startNode();
    this.expect(_types.types.braceL);
    this.parseBlockBody(node, allowDirectives, false, _types.types.braceR);
    return this.finishNode(node, "BlockStatement");
  };
  pp.parseBlockBody = function(node, allowDirectives, topLevel, end) {
    node.body = [];
    node.directives = [];
    var parsedNonDirective = false;
    var oldStrict = void 0;
    var octalPosition = void 0;
    while (!this.eat(end)) {
      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
        octalPosition = this.state.octalPosition;
      }
      var stmt = this.parseStatement(true, topLevel);
      if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
        var directive = this.stmtToDirective(stmt);
        node.directives.push(directive);
        if (oldStrict === undefined && directive.value.value === "use strict") {
          oldStrict = this.state.strict;
          this.setStrict(true);
          if (octalPosition) {
            this.raise(octalPosition, "Octal literal in strict mode");
          }
        }
        continue;
      }
      parsedNonDirective = true;
      node.body.push(stmt);
    }
    if (oldStrict === false) {
      this.setStrict(false);
    }
  };
  pp.parseFor = function(node, init) {
    node.init = init;
    this.expect(_types.types.semi);
    node.test = this.match(_types.types.semi) ? null : this.parseExpression();
    this.expect(_types.types.semi);
    node.update = this.match(_types.types.parenR) ? null : this.parseExpression();
    this.expect(_types.types.parenR);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, "ForStatement");
  };
  pp.parseForIn = function(node, init, forAwait) {
    var type = void 0;
    if (forAwait) {
      this.eatContextual("of");
      type = "ForAwaitStatement";
    } else {
      type = this.match(_types.types._in) ? "ForInStatement" : "ForOfStatement";
      this.next();
    }
    node.left = init;
    node.right = this.parseExpression();
    this.expect(_types.types.parenR);
    node.body = this.parseStatement(false);
    this.state.labels.pop();
    return this.finishNode(node, type);
  };
  pp.parseVar = function(node, isFor, kind) {
    node.declarations = [];
    node.kind = kind.keyword;
    for (; ; ) {
      var decl = this.startNode();
      this.parseVarHead(decl);
      if (this.eat(_types.types.eq)) {
        decl.init = this.parseMaybeAssign(isFor);
      } else if (kind === _types.types._const && !(this.match(_types.types._in) || this.isContextual("of"))) {
        this.unexpected();
      } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_types.types._in) || this.isContextual("of")))) {
        this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
      } else {
        decl.init = null;
      }
      node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(_types.types.comma))
        break;
    }
    return node;
  };
  pp.parseVarHead = function(decl) {
    decl.id = this.parseBindingAtom();
    this.checkLVal(decl.id, true);
  };
  pp.parseFunction = function(node, isStatement, allowExpressionBody, isAsync, optionalId) {
    var oldInMethod = this.state.inMethod;
    this.state.inMethod = false;
    this.initFunction(node, isAsync);
    if (this.match(_types.types.star)) {
      if (node.async && !this.hasPlugin("asyncGenerators")) {
        this.unexpected();
      } else {
        node.generator = true;
        this.next();
      }
    }
    if (isStatement && !optionalId && !this.match(_types.types.name) && !this.match(_types.types._yield)) {
      this.unexpected();
    }
    if (this.match(_types.types.name) || this.match(_types.types._yield)) {
      node.id = this.parseBindingIdentifier();
    }
    this.parseFunctionParams(node);
    this.parseFunctionBody(node, allowExpressionBody);
    this.state.inMethod = oldInMethod;
    return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
  };
  pp.parseFunctionParams = function(node) {
    this.expect(_types.types.parenL);
    node.params = this.parseBindingList(_types.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
  };
  pp.parseClass = function(node, isStatement, optionalId) {
    this.next();
    this.parseClassId(node, isStatement, optionalId);
    this.parseClassSuper(node);
    this.parseClassBody(node);
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
  };
  pp.isClassProperty = function() {
    return this.match(_types.types.eq) || this.isLineTerminator();
  };
  pp.parseClassBody = function(node) {
    var oldStrict = this.state.strict;
    this.state.strict = true;
    var hadConstructorCall = false;
    var hadConstructor = false;
    var decorators = [];
    var classBody = this.startNode();
    classBody.body = [];
    this.expect(_types.types.braceL);
    while (!this.eat(_types.types.braceR)) {
      if (this.eat(_types.types.semi)) {
        continue;
      }
      if (this.match(_types.types.at)) {
        decorators.push(this.parseDecorator());
        continue;
      }
      var method = this.startNode();
      if (decorators.length) {
        method.decorators = decorators;
        decorators = [];
      }
      var isConstructorCall = false;
      var isMaybeStatic = this.match(_types.types.name) && this.state.value === "static";
      var isGenerator = this.eat(_types.types.star);
      var isGetSet = false;
      var isAsync = false;
      this.parsePropertyName(method);
      method.static = isMaybeStatic && !this.match(_types.types.parenL);
      if (method.static) {
        if (isGenerator)
          this.unexpected();
        isGenerator = this.eat(_types.types.star);
        this.parsePropertyName(method);
      }
      if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
        if (this.isClassProperty()) {
          classBody.body.push(this.parseClassProperty(method));
          continue;
        }
        if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_types.types.name) && this.state.value === "constructor") {
          isConstructorCall = true;
          this.parsePropertyName(method);
        }
      }
      var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_types.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
      if (isAsyncMethod) {
        if (this.hasPlugin("asyncGenerators") && this.eat(_types.types.star))
          isGenerator = true;
        isAsync = true;
        this.parsePropertyName(method);
      }
      method.kind = "method";
      if (!method.computed) {
        var key = method.key;
        if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_types.types.parenL) && (key.name === "get" || key.name === "set")) {
          isGetSet = true;
          method.kind = key.name;
          key = this.parsePropertyName(method);
        }
        var isConstructor = !isConstructorCall && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
        if (isConstructor) {
          if (hadConstructor)
            this.raise(key.start, "Duplicate constructor in the same class");
          if (isGetSet)
            this.raise(key.start, "Constructor can't have get/set modifier");
          if (isGenerator)
            this.raise(key.start, "Constructor can't be a generator");
          if (isAsync)
            this.raise(key.start, "Constructor can't be an async function");
          method.kind = "constructor";
          hadConstructor = true;
        }
        var isStaticPrototype = method.static && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
        if (isStaticPrototype) {
          this.raise(key.start, "Classes may not have static property named prototype");
        }
      }
      if (isConstructorCall) {
        if (hadConstructorCall)
          this.raise(method.start, "Duplicate constructor call in the same class");
        method.kind = "constructorCall";
        hadConstructorCall = true;
      }
      if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
        this.raise(method.start, "You can't attach decorators to a class constructor");
      }
      this.parseClassMethod(classBody, method, isGenerator, isAsync);
      if (isGetSet) {
        var paramCount = method.kind === "get" ? 0 : 1;
        if (method.params.length !== paramCount) {
          var start = method.start;
          if (method.kind === "get") {
            this.raise(start, "getter should have no params");
          } else {
            this.raise(start, "setter should have exactly one param");
          }
        }
      }
    }
    if (decorators.length) {
      this.raise(this.state.start, "You have trailing decorators with no method");
    }
    node.body = this.finishNode(classBody, "ClassBody");
    this.state.strict = oldStrict;
  };
  pp.parseClassProperty = function(node) {
    if (this.match(_types.types.eq)) {
      if (!this.hasPlugin("classProperties"))
        this.unexpected();
      this.next();
      node.value = this.parseMaybeAssign();
    } else {
      node.value = null;
    }
    this.semicolon();
    return this.finishNode(node, "ClassProperty");
  };
  pp.parseClassMethod = function(classBody, method, isGenerator, isAsync) {
    this.parseMethod(method, isGenerator, isAsync);
    classBody.body.push(this.finishNode(method, "ClassMethod"));
  };
  pp.parseClassId = function(node, isStatement, optionalId) {
    if (this.match(_types.types.name)) {
      node.id = this.parseIdentifier();
    } else {
      if (optionalId || !isStatement) {
        node.id = null;
      } else {
        this.unexpected();
      }
    }
  };
  pp.parseClassSuper = function(node) {
    node.superClass = this.eat(_types.types._extends) ? this.parseExprSubscripts() : null;
  };
  pp.parseExport = function(node) {
    this.next();
    if (this.match(_types.types.star)) {
      var specifier = this.startNode();
      this.next();
      if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
        specifier.exported = this.parseIdentifier();
        node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
        this.parseExportSpecifiersMaybe(node);
        this.parseExportFrom(node, true);
      } else {
        this.parseExportFrom(node, true);
        return this.finishNode(node, "ExportAllDeclaration");
      }
    } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
      var _specifier = this.startNode();
      _specifier.exported = this.parseIdentifier(true);
      node.specifiers = [this.finishNode(_specifier, "ExportDefaultSpecifier")];
      if (this.match(_types.types.comma) && this.lookahead().type === _types.types.star) {
        this.expect(_types.types.comma);
        var _specifier2 = this.startNode();
        this.expect(_types.types.star);
        this.expectContextual("as");
        _specifier2.exported = this.parseIdentifier();
        node.specifiers.push(this.finishNode(_specifier2, "ExportNamespaceSpecifier"));
      } else {
        this.parseExportSpecifiersMaybe(node);
      }
      this.parseExportFrom(node, true);
    } else if (this.eat(_types.types._default)) {
      var expr = this.startNode();
      var needsSemi = false;
      if (this.eat(_types.types._function)) {
        expr = this.parseFunction(expr, true, false, false, true);
      } else if (this.match(_types.types._class)) {
        expr = this.parseClass(expr, true, true);
      } else {
        needsSemi = true;
        expr = this.parseMaybeAssign();
      }
      node.declaration = expr;
      if (needsSemi)
        this.semicolon();
      this.checkExport(node);
      return this.finishNode(node, "ExportDefaultDeclaration");
    } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
      node.specifiers = [];
      node.source = null;
      node.declaration = this.parseExportDeclaration(node);
    } else {
      node.declaration = null;
      node.specifiers = this.parseExportSpecifiers();
      this.parseExportFrom(node);
    }
    this.checkExport(node);
    return this.finishNode(node, "ExportNamedDeclaration");
  };
  pp.parseExportDeclaration = function() {
    return this.parseStatement(true);
  };
  pp.isExportDefaultSpecifier = function() {
    if (this.match(_types.types.name)) {
      return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
    }
    if (!this.match(_types.types._default)) {
      return false;
    }
    var lookahead = this.lookahead();
    return lookahead.type === _types.types.comma || lookahead.type === _types.types.name && lookahead.value === "from";
  };
  pp.parseExportSpecifiersMaybe = function(node) {
    if (this.eat(_types.types.comma)) {
      node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
    }
  };
  pp.parseExportFrom = function(node, expect) {
    if (this.eatContextual("from")) {
      node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
      this.checkExport(node);
    } else {
      if (expect) {
        this.unexpected();
      } else {
        node.source = null;
      }
    }
    this.semicolon();
  };
  pp.shouldParseExportDeclaration = function() {
    return this.hasPlugin("asyncFunctions") && this.isContextual("async");
  };
  pp.checkExport = function(node) {
    if (this.state.decorators.length) {
      var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
      if (!node.declaration || !isClass) {
        this.raise(node.start, "You can only use decorators on an export when exporting a class");
      }
      this.takeDecorators(node.declaration);
    }
  };
  pp.parseExportSpecifiers = function() {
    var nodes = [];
    var first = true;
    var needsFrom = void 0;
    this.expect(_types.types.braceL);
    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR))
          break;
      }
      var isDefault = this.match(_types.types._default);
      if (isDefault && !needsFrom)
        needsFrom = true;
      var node = this.startNode();
      node.local = this.parseIdentifier(isDefault);
      node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
      nodes.push(this.finishNode(node, "ExportSpecifier"));
    }
    if (needsFrom && !this.isContextual("from")) {
      this.unexpected();
    }
    return nodes;
  };
  pp.parseImport = function(node) {
    this.next();
    if (this.match(_types.types.string)) {
      node.specifiers = [];
      node.source = this.parseExprAtom();
    } else {
      node.specifiers = [];
      this.parseImportSpecifiers(node);
      this.expectContextual("from");
      node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
    }
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  };
  pp.parseImportSpecifiers = function(node) {
    var first = true;
    if (this.match(_types.types.name)) {
      var startPos = this.state.start,
          startLoc = this.state.startLoc;
      node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
      if (!this.eat(_types.types.comma))
        return;
    }
    if (this.match(_types.types.star)) {
      var specifier = this.startNode();
      this.next();
      this.expectContextual("as");
      specifier.local = this.parseIdentifier();
      this.checkLVal(specifier.local, true);
      node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
      return;
    }
    this.expect(_types.types.braceL);
    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR))
          break;
      }
      var _specifier3 = this.startNode();
      _specifier3.imported = this.parseIdentifier(true);
      _specifier3.local = this.eatContextual("as") ? this.parseIdentifier() : _specifier3.imported.__clone();
      this.checkLVal(_specifier3.local, true);
      node.specifiers.push(this.finishNode(_specifier3, "ImportSpecifier"));
    }
  };
  pp.parseImportSpecifierDefault = function(id, startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.local = id;
    this.checkLVal(node.local, true);
    return this.finishNode(node, "ImportDefaultSpecifier");
  };
  return module.exports;
});

$__System.registerDynamic("159", ["f", "155", "156", "15a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _types = $__require('155');
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  var _identifier = $__require('15a');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  pp.toAssignable = function(node, isBinding) {
    if (node) {
      switch (node.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
          break;
        case "ObjectExpression":
          node.type = "ObjectPattern";
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;
          try {
            for (var _iterator = (0, _getIterator3.default)(node.properties),
                _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var prop = _step.value;
              if (prop.type === "ObjectMethod") {
                if (prop.kind === "get" || prop.kind === "set") {
                  this.raise(prop.key.start, "Object pattern can't contain getter or setter");
                } else {
                  this.raise(prop.key.start, "Object pattern can't contain methods");
                }
              } else {
                this.toAssignable(prop, isBinding);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          break;
        case "ObjectProperty":
          this.toAssignable(node.value, isBinding);
          break;
        case "SpreadProperty":
          node.type = "RestProperty";
          break;
        case "ArrayExpression":
          node.type = "ArrayPattern";
          this.toAssignableList(node.elements, isBinding);
          break;
        case "AssignmentExpression":
          if (node.operator === "=") {
            node.type = "AssignmentPattern";
            delete node.operator;
          } else {
            this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
          }
          break;
        case "MemberExpression":
          if (!isBinding)
            break;
        default:
          this.raise(node.start, "Assigning to rvalue");
      }
    }
    return node;
  };
  pp.toAssignableList = function(exprList, isBinding) {
    var end = exprList.length;
    if (end) {
      var last = exprList[end - 1];
      if (last && last.type === "RestElement") {
        --end;
      } else if (last && last.type === "SpreadElement") {
        last.type = "RestElement";
        var arg = last.argument;
        this.toAssignable(arg, isBinding);
        if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
          this.unexpected(arg.start);
        }
        --end;
      }
    }
    for (var i = 0; i < end; i++) {
      var elt = exprList[i];
      if (elt)
        this.toAssignable(elt, isBinding);
    }
    return exprList;
  };
  pp.toReferencedList = function(exprList) {
    return exprList;
  };
  pp.parseSpread = function(refShorthandDefaultPos) {
    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
    return this.finishNode(node, "SpreadElement");
  };
  pp.parseRest = function() {
    var node = this.startNode();
    this.next();
    node.argument = this.parseBindingIdentifier();
    return this.finishNode(node, "RestElement");
  };
  pp.shouldAllowYieldIdentifier = function() {
    return this.match(_types.types._yield) && !this.state.strict && !this.state.inGenerator;
  };
  pp.parseBindingIdentifier = function() {
    return this.parseIdentifier(this.shouldAllowYieldIdentifier());
  };
  pp.parseBindingAtom = function() {
    switch (this.state.type) {
      case _types.types._yield:
        if (this.state.strict || this.state.inGenerator)
          this.unexpected();
      case _types.types.name:
        return this.parseIdentifier(true);
      case _types.types.bracketL:
        var node = this.startNode();
        this.next();
        node.elements = this.parseBindingList(_types.types.bracketR, true, true);
        return this.finishNode(node, "ArrayPattern");
      case _types.types.braceL:
        return this.parseObj(true);
      default:
        this.unexpected();
    }
  };
  pp.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
    var elts = [];
    var first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
      }
      if (allowEmpty && this.match(_types.types.comma)) {
        elts.push(null);
      } else if (allowTrailingComma && this.eat(close)) {
        break;
      } else if (this.match(_types.types.ellipsis)) {
        elts.push(this.parseAssignableListItemTypes(this.parseRest()));
        this.expect(close);
        break;
      } else {
        var decorators = [];
        while (this.match(_types.types.at)) {
          decorators.push(this.parseDecorator());
        }
        var left = this.parseMaybeDefault();
        if (decorators.length) {
          left.decorators = decorators;
        }
        this.parseAssignableListItemTypes(left);
        elts.push(this.parseMaybeDefault(null, null, left));
      }
    }
    return elts;
  };
  pp.parseAssignableListItemTypes = function(param) {
    return param;
  };
  pp.parseMaybeDefault = function(startPos, startLoc, left) {
    startLoc = startLoc || this.state.startLoc;
    startPos = startPos || this.state.start;
    left = left || this.parseBindingAtom();
    if (!this.eat(_types.types.eq))
      return left;
    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.right = this.parseMaybeAssign();
    return this.finishNode(node, "AssignmentPattern");
  };
  pp.checkLVal = function(expr, isBinding, checkClashes) {
    switch (expr.type) {
      case "Identifier":
        if (this.state.strict && (_identifier.reservedWords.strictBind(expr.name) || _identifier.reservedWords.strict(expr.name))) {
          this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
        }
        if (checkClashes) {
          var key = "_" + expr.name;
          if (checkClashes[key]) {
            this.raise(expr.start, "Argument name clash in strict mode");
          } else {
            checkClashes[key] = true;
          }
        }
        break;
      case "MemberExpression":
        if (isBinding)
          this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
        break;
      case "ObjectPattern":
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;
        try {
          for (var _iterator2 = (0, _getIterator3.default)(expr.properties),
              _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var prop = _step2.value;
            if (prop.type === "ObjectProperty")
              prop = prop.value;
            this.checkLVal(prop, isBinding, checkClashes);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
        break;
      case "ArrayPattern":
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;
        try {
          for (var _iterator3 = (0, _getIterator3.default)(expr.elements),
              _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var elem = _step3.value;
            if (elem)
              this.checkLVal(elem, isBinding, checkClashes);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
        break;
      case "AssignmentPattern":
        this.checkLVal(expr.left, isBinding, checkClashes);
        break;
      case "RestProperty":
      case "RestElement":
        this.checkLVal(expr.argument, isBinding, checkClashes);
        break;
      default:
        this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
    }
  };
  return module.exports;
});

$__System.registerDynamic("15b", ["9f", "f", "155", "156", "15a"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _types = $__require('155');
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  var _identifier = $__require('15a');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  pp.checkPropClash = function(prop, propHash) {
    if (prop.computed)
      return;
    var key = prop.key;
    var name = void 0;
    switch (key.type) {
      case "Identifier":
        name = key.name;
        break;
      case "StringLiteral":
      case "NumericLiteral":
        name = String(key.value);
        break;
      default:
        return;
    }
    if (name === "__proto__" && prop.kind === "init") {
      if (propHash.proto)
        this.raise(key.start, "Redefinition of __proto__ property");
      propHash.proto = true;
    }
  };
  pp.parseExpression = function(noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
    if (this.match(_types.types.comma)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.expressions = [expr];
      while (this.eat(_types.types.comma)) {
        node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
      }
      this.toReferencedList(node.expressions);
      return this.finishNode(node, "SequenceExpression");
    }
    return expr;
  };
  pp.parseMaybeAssign = function(noIn, refShorthandDefaultPos, afterLeftParse) {
    if (this.match(_types.types._yield) && this.state.inGenerator) {
      return this.parseYield();
    }
    var failOnShorthandAssign = void 0;
    if (refShorthandDefaultPos) {
      failOnShorthandAssign = false;
    } else {
      refShorthandDefaultPos = {start: 0};
      failOnShorthandAssign = true;
    }
    var startPos = this.state.start;
    var startLoc = this.state.startLoc;
    if (this.match(_types.types.parenL) || this.match(_types.types.name)) {
      this.state.potentialArrowAt = this.state.start;
    }
    var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
    if (afterLeftParse)
      left = afterLeftParse.call(this, left, startPos, startLoc);
    if (this.state.type.isAssign) {
      var node = this.startNodeAt(startPos, startLoc);
      node.operator = this.state.value;
      node.left = this.match(_types.types.eq) ? this.toAssignable(left) : left;
      refShorthandDefaultPos.start = 0;
      this.checkLVal(left);
      if (left.extra && left.extra.parenthesized) {
        var errorMsg = void 0;
        if (left.type === "ObjectPattern") {
          errorMsg = "`({a}) = 0` use `({a} = 0)`";
        } else if (left.type === "ArrayPattern") {
          errorMsg = "`([a]) = 0` use `([a] = 0)`";
        }
        if (errorMsg) {
          this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
        }
      }
      this.next();
      node.right = this.parseMaybeAssign(noIn);
      return this.finishNode(node, "AssignmentExpression");
    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
      this.unexpected(refShorthandDefaultPos.start);
    }
    return left;
  };
  pp.parseMaybeConditional = function(noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start)
      return expr;
    if (this.eat(_types.types.question)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.test = expr;
      node.consequent = this.parseMaybeAssign();
      this.expect(_types.types.colon);
      node.alternate = this.parseMaybeAssign(noIn);
      return this.finishNode(node, "ConditionalExpression");
    }
    return expr;
  };
  pp.parseExprOps = function(noIn, refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseMaybeUnary(refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
      return expr;
    } else {
      return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
    }
  };
  pp.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
    var prec = this.state.type.binop;
    if (prec != null && (!noIn || !this.match(_types.types._in))) {
      if (prec > minPrec) {
        var node = this.startNodeAt(leftStartPos, leftStartLoc);
        node.left = left;
        node.operator = this.state.value;
        if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
          this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
        }
        var op = this.state.type;
        this.next();
        var startPos = this.state.start;
        var startLoc = this.state.startLoc;
        node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
        this.finishNode(node, op === _types.types.logicalOR || op === _types.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
      }
    }
    return left;
  };
  pp.parseMaybeUnary = function(refShorthandDefaultPos) {
    if (this.state.type.prefix) {
      var node = this.startNode();
      var update = this.match(_types.types.incDec);
      node.operator = this.state.value;
      node.prefix = true;
      this.next();
      var argType = this.state.type;
      this.addExtra(node, "parenthesizedArgument", argType === _types.types.parenL);
      node.argument = this.parseMaybeUnary();
      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
        this.unexpected(refShorthandDefaultPos.start);
      }
      if (update) {
        this.checkLVal(node.argument);
      } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
        this.raise(node.start, "Deleting local variable in strict mode");
      }
      return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    }
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var expr = this.parseExprSubscripts(refShorthandDefaultPos);
    if (refShorthandDefaultPos && refShorthandDefaultPos.start)
      return expr;
    while (this.state.type.postfix && !this.canInsertSemicolon()) {
      var _node = this.startNodeAt(startPos, startLoc);
      _node.operator = this.state.value;
      _node.prefix = false;
      _node.argument = expr;
      this.checkLVal(expr);
      this.next();
      expr = this.finishNode(_node, "UpdateExpression");
    }
    return expr;
  };
  pp.parseExprSubscripts = function(refShorthandDefaultPos) {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var potentialArrowAt = this.state.potentialArrowAt;
    var expr = this.parseExprAtom(refShorthandDefaultPos);
    if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
      return expr;
    }
    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
      return expr;
    }
    return this.parseSubscripts(expr, startPos, startLoc);
  };
  pp.parseSubscripts = function(base, startPos, startLoc, noCalls) {
    for (; ; ) {
      if (!noCalls && this.eat(_types.types.doubleColon)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        node.callee = this.parseNoCallExpr();
        return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
      } else if (this.eat(_types.types.dot)) {
        var _node2 = this.startNodeAt(startPos, startLoc);
        _node2.object = base;
        _node2.property = this.parseIdentifier(true);
        _node2.computed = false;
        base = this.finishNode(_node2, "MemberExpression");
      } else if (this.eat(_types.types.bracketL)) {
        var _node3 = this.startNodeAt(startPos, startLoc);
        _node3.object = base;
        _node3.property = this.parseExpression();
        _node3.computed = true;
        this.expect(_types.types.bracketR);
        base = this.finishNode(_node3, "MemberExpression");
      } else if (!noCalls && this.match(_types.types.parenL)) {
        var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
        this.next();
        var _node4 = this.startNodeAt(startPos, startLoc);
        _node4.callee = base;
        _node4.arguments = this.parseCallExpressionArguments(_types.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
        base = this.finishNode(_node4, "CallExpression");
        if (possibleAsync && this.shouldParseAsyncArrow()) {
          return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);
        } else {
          this.toReferencedList(_node4.arguments);
        }
      } else if (this.match(_types.types.backQuote)) {
        var _node5 = this.startNodeAt(startPos, startLoc);
        _node5.tag = base;
        _node5.quasi = this.parseTemplate();
        base = this.finishNode(_node5, "TaggedTemplateExpression");
      } else {
        return base;
      }
    }
  };
  pp.parseCallExpressionArguments = function(close, allowTrailingComma, possibleAsyncArrow) {
    var innerParenStart = void 0;
    var elts = [],
        first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (allowTrailingComma && this.eat(close))
          break;
      }
      if (this.match(_types.types.parenL) && !innerParenStart) {
        innerParenStart = this.state.start;
      }
      elts.push(this.parseExprListItem());
    }
    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
      this.unexpected();
    }
    return elts;
  };
  pp.shouldParseAsyncArrow = function() {
    return this.match(_types.types.arrow);
  };
  pp.parseAsyncArrowFromCallExpression = function(node, call) {
    if (!this.hasPlugin("asyncFunctions"))
      this.unexpected();
    this.expect(_types.types.arrow);
    return this.parseArrowExpression(node, call.arguments, true);
  };
  pp.parseNoCallExpr = function() {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
  };
  pp.parseExprAtom = function(refShorthandDefaultPos) {
    var node = void 0,
        canBeArrow = this.state.potentialArrowAt === this.state.start;
    switch (this.state.type) {
      case _types.types._super:
        if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
          this.raise(this.state.start, "'super' outside of function or class");
        }
        node = this.startNode();
        this.next();
        if (!this.match(_types.types.parenL) && !this.match(_types.types.bracketL) && !this.match(_types.types.dot)) {
          this.unexpected();
        }
        if (this.match(_types.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
          this.raise(node.start, "super() outside of class constructor");
        }
        return this.finishNode(node, "Super");
      case _types.types._this:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression");
      case _types.types._yield:
        if (this.state.inGenerator)
          this.unexpected();
      case _types.types.name:
        node = this.startNode();
        var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
        var allowYield = this.shouldAllowYieldIdentifier();
        var id = this.parseIdentifier(allowAwait || allowYield);
        if (this.hasPlugin("asyncFunctions")) {
          if (id.name === "await") {
            if (this.state.inAsync || this.inModule) {
              return this.parseAwait(node);
            }
          } else if (id.name === "async" && this.match(_types.types._function) && !this.canInsertSemicolon()) {
            this.next();
            return this.parseFunction(node, false, false, true);
          } else if (canBeArrow && id.name === "async" && this.match(_types.types.name)) {
            var params = [this.parseIdentifier()];
            this.expect(_types.types.arrow);
            return this.parseArrowExpression(node, params, true);
          }
        }
        if (canBeArrow && !this.canInsertSemicolon() && this.eat(_types.types.arrow)) {
          return this.parseArrowExpression(node, [id]);
        }
        return id;
      case _types.types._do:
        if (this.hasPlugin("doExpressions")) {
          var _node6 = this.startNode();
          this.next();
          var oldInFunction = this.state.inFunction;
          var oldLabels = this.state.labels;
          this.state.labels = [];
          this.state.inFunction = false;
          _node6.body = this.parseBlock(false, true);
          this.state.inFunction = oldInFunction;
          this.state.labels = oldLabels;
          return this.finishNode(_node6, "DoExpression");
        }
      case _types.types.regexp:
        var value = this.state.value;
        node = this.parseLiteral(value.value, "RegExpLiteral");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;
      case _types.types.num:
        return this.parseLiteral(this.state.value, "NumericLiteral");
      case _types.types.string:
        return this.parseLiteral(this.state.value, "StringLiteral");
      case _types.types._null:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "NullLiteral");
      case _types.types._true:
      case _types.types._false:
        node = this.startNode();
        node.value = this.match(_types.types._true);
        this.next();
        return this.finishNode(node, "BooleanLiteral");
      case _types.types.parenL:
        return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
      case _types.types.bracketL:
        node = this.startNode();
        this.next();
        node.elements = this.parseExprList(_types.types.bracketR, true, true, refShorthandDefaultPos);
        this.toReferencedList(node.elements);
        return this.finishNode(node, "ArrayExpression");
      case _types.types.braceL:
        return this.parseObj(false, refShorthandDefaultPos);
      case _types.types._function:
        return this.parseFunctionExpression();
      case _types.types.at:
        this.parseDecorators();
      case _types.types._class:
        node = this.startNode();
        this.takeDecorators(node);
        return this.parseClass(node, false);
      case _types.types._new:
        return this.parseNew();
      case _types.types.backQuote:
        return this.parseTemplate();
      case _types.types.doubleColon:
        node = this.startNode();
        this.next();
        node.object = null;
        var callee = node.callee = this.parseNoCallExpr();
        if (callee.type === "MemberExpression") {
          return this.finishNode(node, "BindExpression");
        } else {
          this.raise(callee.start, "Binding should be performed on object property.");
        }
      default:
        this.unexpected();
    }
  };
  pp.parseFunctionExpression = function() {
    var node = this.startNode();
    var meta = this.parseIdentifier(true);
    if (this.state.inGenerator && this.eat(_types.types.dot) && this.hasPlugin("functionSent")) {
      return this.parseMetaProperty(node, meta, "sent");
    } else {
      return this.parseFunction(node, false);
    }
  };
  pp.parseMetaProperty = function(node, meta, propertyName) {
    node.meta = meta;
    node.property = this.parseIdentifier(true);
    if (node.property.name !== propertyName) {
      this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
    }
    return this.finishNode(node, "MetaProperty");
  };
  pp.parseLiteral = function(value, type) {
    var node = this.startNode();
    this.addExtra(node, "rawValue", value);
    this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
    node.value = value;
    this.next();
    return this.finishNode(node, type);
  };
  pp.parseParenExpression = function() {
    this.expect(_types.types.parenL);
    var val = this.parseExpression();
    this.expect(_types.types.parenR);
    return val;
  };
  pp.parseParenAndDistinguishExpression = function(startPos, startLoc, canBeArrow, isAsync, allowOptionalCommaStart) {
    startPos = startPos || this.state.start;
    startLoc = startLoc || this.state.startLoc;
    var val = void 0;
    this.next();
    var innerStartPos = this.state.start,
        innerStartLoc = this.state.startLoc;
    var exprList = [],
        first = true;
    var refShorthandDefaultPos = {start: 0},
        spreadStart = void 0,
        optionalCommaStart = void 0;
    while (!this.match(_types.types.parenR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.match(_types.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
          optionalCommaStart = this.state.start;
          break;
        }
      }
      if (this.match(_types.types.ellipsis)) {
        var spreadNodeStartPos = this.state.start,
            spreadNodeStartLoc = this.state.startLoc;
        spreadStart = this.state.start;
        exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
        break;
      } else {
        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
      }
    }
    var innerEndPos = this.state.start;
    var innerEndLoc = this.state.startLoc;
    this.expect(_types.types.parenR);
    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_types.types.arrow)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;
      try {
        for (var _iterator = (0, _getIterator3.default)(exprList),
            _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;
          if (param.extra && param.extra.parenthesized)
            this.unexpected(param.extra.parenStart);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
    }
    if (!exprList.length) {
      if (isAsync) {
        return;
      } else {
        this.unexpected(this.state.lastTokStart);
      }
    }
    if (optionalCommaStart && !allowOptionalCommaStart)
      this.unexpected(optionalCommaStart);
    if (spreadStart)
      this.unexpected(spreadStart);
    if (refShorthandDefaultPos.start)
      this.unexpected(refShorthandDefaultPos.start);
    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.toReferencedList(val.expressions);
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }
    this.addExtra(val, "parenthesized", true);
    this.addExtra(val, "parenStart", startPos);
    return val;
  };
  pp.parseParenItem = function(node) {
    return node;
  };
  pp.parseNew = function() {
    var node = this.startNode();
    var meta = this.parseIdentifier(true);
    if (this.eat(_types.types.dot)) {
      return this.parseMetaProperty(node, meta, "target");
    }
    node.callee = this.parseNoCallExpr();
    if (this.eat(_types.types.parenL)) {
      node.arguments = this.parseExprList(_types.types.parenR, this.hasPlugin("trailingFunctionCommas"));
      this.toReferencedList(node.arguments);
    } else {
      node.arguments = [];
    }
    return this.finishNode(node, "NewExpression");
  };
  pp.parseTemplateElement = function() {
    var elem = this.startNode();
    elem.value = {
      raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
      cooked: this.state.value
    };
    this.next();
    elem.tail = this.match(_types.types.backQuote);
    return this.finishNode(elem, "TemplateElement");
  };
  pp.parseTemplate = function() {
    var node = this.startNode();
    this.next();
    node.expressions = [];
    var curElt = this.parseTemplateElement();
    node.quasis = [curElt];
    while (!curElt.tail) {
      this.expect(_types.types.dollarBraceL);
      node.expressions.push(this.parseExpression());
      this.expect(_types.types.braceR);
      node.quasis.push(curElt = this.parseTemplateElement());
    }
    this.next();
    return this.finishNode(node, "TemplateLiteral");
  };
  pp.parseObj = function(isPattern, refShorthandDefaultPos) {
    var decorators = [];
    var propHash = (0, _create2.default)(null);
    var first = true;
    var node = this.startNode();
    node.properties = [];
    this.next();
    while (!this.eat(_types.types.braceR)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (this.eat(_types.types.braceR))
          break;
      }
      while (this.match(_types.types.at)) {
        decorators.push(this.parseDecorator());
      }
      var prop = this.startNode(),
          isGenerator = false,
          isAsync = false,
          startPos = void 0,
          startLoc = void 0;
      if (decorators.length) {
        prop.decorators = decorators;
        decorators = [];
      }
      if (this.hasPlugin("objectRestSpread") && this.match(_types.types.ellipsis)) {
        prop = this.parseSpread();
        prop.type = isPattern ? "RestProperty" : "SpreadProperty";
        node.properties.push(prop);
        continue;
      }
      prop.method = false;
      prop.shorthand = false;
      if (isPattern || refShorthandDefaultPos) {
        startPos = this.state.start;
        startLoc = this.state.startLoc;
      }
      if (!isPattern) {
        isGenerator = this.eat(_types.types.star);
      }
      if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
        if (isGenerator)
          this.unexpected();
        var asyncId = this.parseIdentifier();
        if (this.match(_types.types.colon) || this.match(_types.types.parenL) || this.match(_types.types.braceR)) {
          prop.key = asyncId;
        } else {
          isAsync = true;
          if (this.hasPlugin("asyncGenerators"))
            isGenerator = this.eat(_types.types.star);
          this.parsePropertyName(prop);
        }
      } else {
        this.parsePropertyName(prop);
      }
      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
      this.checkPropClash(prop, propHash);
      if (prop.shorthand) {
        this.addExtra(prop, "shorthand", true);
      }
      node.properties.push(prop);
    }
    if (decorators.length) {
      this.raise(this.state.start, "You have trailing decorators with no property");
    }
    return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
  };
  pp.parseObjPropValue = function(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
    if (isAsync || isGenerator || this.match(_types.types.parenL)) {
      if (isPattern)
        this.unexpected();
      prop.kind = "method";
      prop.method = true;
      this.parseMethod(prop, isGenerator, isAsync);
      return this.finishNode(prop, "ObjectMethod");
    }
    if (this.eat(_types.types.colon)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
      return this.finishNode(prop, "ObjectProperty");
    }
    if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_types.types.comma) && !this.match(_types.types.braceR)) {
      if (isGenerator || isAsync || isPattern)
        this.unexpected();
      prop.kind = prop.key.name;
      this.parsePropertyName(prop);
      this.parseMethod(prop, false);
      var paramCount = prop.kind === "get" ? 0 : 1;
      if (prop.params.length !== paramCount) {
        var start = prop.start;
        if (prop.kind === "get") {
          this.raise(start, "getter should have no params");
        } else {
          this.raise(start, "setter should have exactly one param");
        }
      }
      return this.finishNode(prop, "ObjectMethod");
    }
    if (!prop.computed && prop.key.type === "Identifier") {
      if (isPattern) {
        var illegalBinding = this.isKeyword(prop.key.name);
        if (!illegalBinding && this.state.strict) {
          illegalBinding = _identifier.reservedWords.strictBind(prop.key.name) || _identifier.reservedWords.strict(prop.key.name);
        }
        if (illegalBinding) {
          this.raise(prop.key.start, "Binding " + prop.key.name);
        }
        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
      } else if (this.match(_types.types.eq) && refShorthandDefaultPos) {
        if (!refShorthandDefaultPos.start) {
          refShorthandDefaultPos.start = this.state.start;
        }
        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
      } else {
        prop.value = prop.key.__clone();
      }
      prop.shorthand = true;
      return this.finishNode(prop, "ObjectProperty");
    }
    this.unexpected();
  };
  pp.parsePropertyName = function(prop) {
    if (this.eat(_types.types.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(_types.types.bracketR);
      return prop.key;
    } else {
      prop.computed = false;
      return prop.key = this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
    }
  };
  pp.initFunction = function(node, isAsync) {
    node.id = null;
    node.generator = false;
    node.expression = false;
    if (this.hasPlugin("asyncFunctions")) {
      node.async = !!isAsync;
    }
  };
  pp.parseMethod = function(node, isGenerator, isAsync) {
    var oldInMethod = this.state.inMethod;
    this.state.inMethod = node.kind || true;
    this.initFunction(node, isAsync);
    this.expect(_types.types.parenL);
    node.params = this.parseBindingList(_types.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
    node.generator = isGenerator;
    this.parseFunctionBody(node);
    this.state.inMethod = oldInMethod;
    return node;
  };
  pp.parseArrowExpression = function(node, params, isAsync) {
    this.initFunction(node, isAsync);
    node.params = this.toAssignableList(params, true);
    this.parseFunctionBody(node, true);
    return this.finishNode(node, "ArrowFunctionExpression");
  };
  pp.parseFunctionBody = function(node, allowExpression) {
    var isExpression = allowExpression && !this.match(_types.types.braceL);
    var oldInAsync = this.state.inAsync;
    this.state.inAsync = node.async;
    if (isExpression) {
      node.body = this.parseMaybeAssign();
      node.expression = true;
    } else {
      var oldInFunc = this.state.inFunction,
          oldInGen = this.state.inGenerator,
          oldLabels = this.state.labels;
      this.state.inFunction = true;
      this.state.inGenerator = node.generator;
      this.state.labels = [];
      node.body = this.parseBlock(true);
      node.expression = false;
      this.state.inFunction = oldInFunc;
      this.state.inGenerator = oldInGen;
      this.state.labels = oldLabels;
    }
    this.state.inAsync = oldInAsync;
    var checkLVal = this.state.strict;
    var checkLValStrict = false;
    var isStrict = false;
    if (allowExpression)
      checkLVal = true;
    if (!isExpression && node.body.directives.length) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;
      try {
        for (var _iterator2 = (0, _getIterator3.default)(node.body.directives),
            _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var directive = _step2.value;
          if (directive.value.value === "use strict") {
            isStrict = true;
            checkLVal = true;
            checkLValStrict = true;
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
    if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
      this.raise(node.id.start, "Binding yield in strict mode");
    }
    if (checkLVal) {
      var nameHash = (0, _create2.default)(null);
      var oldStrict = this.state.strict;
      if (checkLValStrict)
        this.state.strict = true;
      if (node.id) {
        this.checkLVal(node.id, true);
      }
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;
      try {
        for (var _iterator3 = (0, _getIterator3.default)(node.params),
            _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var param = _step3.value;
          this.checkLVal(param, true, nameHash);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
      this.state.strict = oldStrict;
    }
  };
  pp.parseExprList = function(close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
    var elts = [],
        first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(_types.types.comma);
        if (allowTrailingComma && this.eat(close))
          break;
      }
      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
    }
    return elts;
  };
  pp.parseExprListItem = function(allowEmpty, refShorthandDefaultPos) {
    var elt = void 0;
    if (allowEmpty && this.match(_types.types.comma)) {
      elt = null;
    } else if (this.match(_types.types.ellipsis)) {
      elt = this.parseSpread(refShorthandDefaultPos);
    } else {
      elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
    }
    return elt;
  };
  pp.parseIdentifier = function(liberal) {
    var node = this.startNode();
    if (this.match(_types.types.name)) {
      if (!liberal && this.state.strict && _identifier.reservedWords.strict(this.state.value)) {
        this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
      }
      node.name = this.state.value;
    } else if (liberal && this.state.type.keyword) {
      node.name = this.state.type.keyword;
    } else {
      this.unexpected();
    }
    if (!liberal && node.name === "await" && this.state.inAsync) {
      this.raise(node.start, "invalid use of await inside of an async function");
    }
    this.next();
    return this.finishNode(node, "Identifier");
  };
  pp.parseAwait = function(node) {
    if (!this.state.inAsync) {
      this.unexpected();
    }
    if (this.isLineTerminator()) {
      this.unexpected();
    }
    if (this.match(_types.types.star)) {
      this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
    }
    node.argument = this.parseMaybeUnary();
    return this.finishNode(node, "AwaitExpression");
  };
  pp.parseYield = function() {
    var node = this.startNode();
    this.next();
    if (this.match(_types.types.semi) || this.canInsertSemicolon() || !this.match(_types.types.star) && !this.state.type.startsExpr) {
      node.delegate = false;
      node.argument = null;
    } else {
      node.delegate = this.eat(_types.types.star);
      node.argument = this.parseMaybeAssign();
    }
    return this.finishNode(node, "YieldExpression");
  };
  return module.exports;
});

$__System.registerDynamic("15c", ["15", "15e", "156", "15d"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _createClass2 = $__require('15e');
  var _createClass3 = _interopRequireDefault(_createClass2);
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  var _location = $__require('15d');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  var Node = function() {
    function Node(pos, loc, filename) {
      (0, _classCallCheck3.default)(this, Node);
      this.type = "";
      this.start = pos;
      this.end = 0;
      this.loc = new _location.SourceLocation(loc);
      if (filename)
        this.loc.filename = filename;
    }
    (0, _createClass3.default)(Node, [{
      key: "__clone",
      value: function __clone() {
        var node2 = new Node();
        for (var key in this) {
          node2[key] = this[key];
        }
        return node2;
      }
    }]);
    return Node;
  }();
  pp.startNode = function() {
    return new Node(this.state.start, this.state.startLoc, this.filename);
  };
  pp.startNodeAt = function(pos, loc) {
    return new Node(pos, loc, this.filename);
  };
  function finishNodeAt(node, type, pos, loc) {
    node.type = type;
    node.end = pos;
    node.loc.end = loc;
    this.processComment(node);
    return node;
  }
  pp.finishNode = function(node, type) {
    return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
  };
  pp.finishNodeAt = function(node, type, pos, loc) {
    return finishNodeAt.call(this, node, type, pos, loc);
  };
  return module.exports;
});

$__System.registerDynamic("15f", ["15d", "156"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _location = $__require('15d');
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _index2.default.prototype;
  pp.raise = function(pos, message) {
    var loc = (0, _location.getLineInfo)(this.input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    throw err;
  };
  return module.exports;
});

$__System.registerDynamic("160", ["156"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var _index = $__require('156');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function last(stack) {
    return stack[stack.length - 1];
  }
  var pp = _index2.default.prototype;
  pp.addComment = function(comment) {
    this.state.trailingComments.push(comment);
    this.state.leadingComments.push(comment);
  };
  pp.processComment = function(node) {
    if (node.type === "Program" && node.body.length > 0)
      return;
    var stack = this.state.commentStack;
    var lastChild = void 0,
        trailingComments = void 0,
        i = void 0;
    if (this.state.trailingComments.length > 0) {
      if (this.state.trailingComments[0].start >= node.end) {
        trailingComments = this.state.trailingComments;
        this.state.trailingComments = [];
      } else {
        this.state.trailingComments.length = 0;
      }
    } else {
      var lastInStack = last(stack);
      if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
        trailingComments = lastInStack.trailingComments;
        lastInStack.trailingComments = null;
      }
    }
    while (stack.length > 0 && last(stack).start >= node.start) {
      lastChild = stack.pop();
    }
    if (lastChild) {
      if (lastChild.leadingComments) {
        if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
          node.leadingComments = lastChild.leadingComments;
          lastChild.leadingComments = null;
        } else {
          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
            if (lastChild.leadingComments[i].end <= node.start) {
              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
              break;
            }
          }
        }
      }
    } else if (this.state.leadingComments.length > 0) {
      if (last(this.state.leadingComments).end <= node.start) {
        node.leadingComments = this.state.leadingComments;
        this.state.leadingComments = [];
      } else {
        for (i = 0; i < this.state.leadingComments.length; i++) {
          if (this.state.leadingComments[i].end > node.start) {
            break;
          }
        }
        node.leadingComments = this.state.leadingComments.slice(0, i);
        if (node.leadingComments.length === 0) {
          node.leadingComments = null;
        }
        trailingComments = this.state.leadingComments.slice(i);
        if (trailingComments.length === 0) {
          trailingComments = null;
        }
      }
    }
    if (trailingComments) {
      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
        node.innerComments = trailingComments;
      } else {
        node.trailingComments = trailingComments;
      }
    }
    stack.push(node);
  };
  return module.exports;
});

$__System.registerDynamic("161", ["155", "156"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.default = function(instance) {
    instance.extend("parseFunctionBody", function(inner) {
      return function(node, allowExpression) {
        if (this.match(_types.types.colon) && !allowExpression) {
          node.returnType = this.flowParseTypeAnnotation();
        }
        return inner.call(this, node, allowExpression);
      };
    });
    instance.extend("parseStatement", function(inner) {
      return function(declaration, topLevel) {
        if (this.state.strict && this.match(_types.types.name) && this.state.value === "interface") {
          var node = this.startNode();
          this.next();
          return this.flowParseInterface(node);
        } else {
          return inner.call(this, declaration, topLevel);
        }
      };
    });
    instance.extend("parseExpressionStatement", function(inner) {
      return function(node, expr) {
        if (expr.type === "Identifier") {
          if (expr.name === "declare") {
            if (this.match(_types.types._class) || this.match(_types.types.name) || this.match(_types.types._function) || this.match(_types.types._var)) {
              return this.flowParseDeclare(node);
            }
          } else if (this.match(_types.types.name)) {
            if (expr.name === "interface") {
              return this.flowParseInterface(node);
            } else if (expr.name === "type") {
              return this.flowParseTypeAlias(node);
            }
          }
        }
        return inner.call(this, node, expr);
      };
    });
    instance.extend("shouldParseExportDeclaration", function(inner) {
      return function() {
        return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
      };
    });
    instance.extend("parseParenItem", function() {
      return function(node, startLoc, startPos, forceArrow) {
        var canBeArrow = this.state.potentialArrowAt = startPos;
        if (this.match(_types.types.colon)) {
          var typeCastNode = this.startNodeAt(startLoc, startPos);
          typeCastNode.expression = node;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
          if (forceArrow && !this.match(_types.types.arrow)) {
            this.unexpected();
          }
          if (canBeArrow && this.eat(_types.types.arrow)) {
            var params = node.type === "SequenceExpression" ? node.expressions : [node];
            var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
            func.returnType = typeCastNode.typeAnnotation;
            return func;
          } else {
            return this.finishNode(typeCastNode, "TypeCastExpression");
          }
        } else {
          return node;
        }
      };
    });
    instance.extend("parseExport", function(inner) {
      return function(node) {
        node = inner.call(this, node);
        if (node.type === "ExportNamedDeclaration") {
          node.exportKind = node.exportKind || "value";
        }
        return node;
      };
    });
    instance.extend("parseExportDeclaration", function(inner) {
      return function(node) {
        if (this.isContextual("type")) {
          node.exportKind = "type";
          var declarationNode = this.startNode();
          this.next();
          if (this.match(_types.types.braceL)) {
            node.specifiers = this.parseExportSpecifiers();
            this.parseExportFrom(node);
            return null;
          } else {
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual("interface")) {
          node.exportKind = "type";
          var _declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(_declarationNode);
        } else {
          return inner.call(this, node);
        }
      };
    });
    instance.extend("parseClassId", function(inner) {
      return function(node) {
        inner.apply(this, arguments);
        if (this.isRelational("<")) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      };
    });
    instance.extend("isKeyword", function(inner) {
      return function(name) {
        if (this.state.inType && name === "void") {
          return false;
        } else {
          return inner.call(this, name);
        }
      };
    });
    instance.extend("readToken", function(inner) {
      return function(code) {
        if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(_types.types.relational, 1);
        } else {
          return inner.call(this, code);
        }
      };
    });
    instance.extend("jsx_readToken", function(inner) {
      return function() {
        if (!this.state.inType)
          return inner.call(this);
      };
    });
    function typeCastToParameter(node) {
      node.expression.typeAnnotation = node.typeAnnotation;
      return node.expression;
    }
    instance.extend("toAssignable", function(inner) {
      return function(node) {
        if (node.type === "TypeCastExpression") {
          return typeCastToParameter(node);
        } else {
          return inner.apply(this, arguments);
        }
      };
    });
    instance.extend("toAssignableList", function(inner) {
      return function(exprList, isBinding) {
        for (var i = 0; i < exprList.length; i++) {
          var expr = exprList[i];
          if (expr && expr.type === "TypeCastExpression") {
            exprList[i] = typeCastToParameter(expr);
          }
        }
        return inner.call(this, exprList, isBinding);
      };
    });
    instance.extend("toReferencedList", function() {
      return function(exprList) {
        for (var i = 0; i < exprList.length; i++) {
          var expr = exprList[i];
          if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
            this.raise(expr.start, "Unexpected type cast");
          }
        }
        return exprList;
      };
    });
    instance.extend("parseExprListItem", function(inner) {
      return function(allowEmpty, refShorthandDefaultPos) {
        var container = this.startNode();
        var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
        if (this.match(_types.types.colon)) {
          container._exprListItem = true;
          container.expression = node;
          container.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(container, "TypeCastExpression");
        } else {
          return node;
        }
      };
    });
    instance.extend("checkLVal", function(inner) {
      return function(node) {
        if (node.type !== "TypeCastExpression") {
          return inner.apply(this, arguments);
        }
      };
    });
    instance.extend("parseClassProperty", function(inner) {
      return function(node) {
        if (this.match(_types.types.colon)) {
          node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return inner.call(this, node);
      };
    });
    instance.extend("isClassProperty", function(inner) {
      return function() {
        return this.match(_types.types.colon) || inner.call(this);
      };
    });
    instance.extend("parseClassMethod", function() {
      return function(classBody, method, isGenerator, isAsync) {
        if (this.isRelational("<")) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.parseMethod(method, isGenerator, isAsync);
        classBody.body.push(this.finishNode(method, "ClassMethod"));
      };
    });
    instance.extend("parseClassSuper", function(inner) {
      return function(node, isStatement) {
        inner.call(this, node, isStatement);
        if (node.superClass && this.isRelational("<")) {
          node.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual("implements")) {
          this.next();
          var implemented = node.implements = [];
          do {
            var _node = this.startNode();
            _node.id = this.parseIdentifier();
            if (this.isRelational("<")) {
              _node.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              _node.typeParameters = null;
            }
            implemented.push(this.finishNode(_node, "ClassImplements"));
          } while (this.eat(_types.types.comma));
        }
      };
    });
    instance.extend("parseObjPropValue", function(inner) {
      return function(prop) {
        var typeParameters = void 0;
        if (this.isRelational("<")) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(_types.types.parenL))
            this.unexpected();
        }
        inner.apply(this, arguments);
        if (typeParameters) {
          (prop.value || prop).typeParameters = typeParameters;
        }
      };
    });
    instance.extend("parseAssignableListItemTypes", function() {
      return function(param) {
        if (this.eat(_types.types.question)) {
          param.optional = true;
        }
        if (this.match(_types.types.colon)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        }
        this.finishNode(param, param.type);
        return param;
      };
    });
    instance.extend("parseImportSpecifiers", function(inner) {
      return function(node) {
        node.importKind = "value";
        var kind = null;
        if (this.match(_types.types._typeof)) {
          kind = "typeof";
        } else if (this.isContextual("type")) {
          kind = "type";
        }
        if (kind) {
          var lh = this.lookahead();
          if (lh.type === _types.types.name && lh.value !== "from" || lh.type === _types.types.braceL || lh.type === _types.types.star) {
            this.next();
            node.importKind = kind;
          }
        }
        inner.call(this, node);
      };
    });
    instance.extend("parseFunctionParams", function(inner) {
      return function(node) {
        if (this.isRelational("<")) {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        inner.call(this, node);
      };
    });
    instance.extend("parseVarHead", function(inner) {
      return function(decl) {
        inner.call(this, decl);
        if (this.match(_types.types.colon)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.finishNode(decl.id, decl.id.type);
        }
      };
    });
    instance.extend("parseAsyncArrowFromCallExpression", function(inner) {
      return function(node, call) {
        if (this.match(_types.types.colon)) {
          node.returnType = this.flowParseTypeAnnotation();
        }
        return inner.call(this, node, call);
      };
    });
    instance.extend("shouldParseAsyncArrow", function(inner) {
      return function() {
        return this.match(_types.types.colon) || inner.call(this);
      };
    });
    instance.extend("parseParenAndDistinguishExpression", function(inner) {
      return function(startPos, startLoc, canBeArrow, isAsync) {
        startPos = startPos || this.state.start;
        startLoc = startLoc || this.state.startLoc;
        if (canBeArrow && this.lookahead().type === _types.types.parenR) {
          this.expect(_types.types.parenL);
          this.expect(_types.types.parenR);
          var node = this.startNodeAt(startPos, startLoc);
          if (this.match(_types.types.colon))
            node.returnType = this.flowParseTypeAnnotation();
          this.expect(_types.types.arrow);
          return this.parseArrowExpression(node, [], isAsync);
        } else {
          var _node2 = inner.call(this, startPos, startLoc, canBeArrow, isAsync, this.hasPlugin("trailingFunctionCommas"));
          if (this.match(_types.types.colon)) {
            var state = this.state.clone();
            try {
              return this.parseParenItem(_node2, startPos, startLoc, true);
            } catch (err) {
              if (err instanceof SyntaxError) {
                this.state = state;
                return _node2;
              } else {
                throw err;
              }
            }
          } else {
            return _node2;
          }
        }
      };
    });
  };
  var _types = $__require('155');
  var _parser = $__require('156');
  var _parser2 = _interopRequireDefault(_parser);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var pp = _parser2.default.prototype;
  pp.flowParseTypeInitialiser = function(tok, allowLeadingPipeOrAnd) {
    var oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(tok || _types.types.colon);
    if (allowLeadingPipeOrAnd) {
      if (this.match(_types.types.bitwiseAND) || this.match(_types.types.bitwiseOR)) {
        this.next();
      }
    }
    var type = this.flowParseType();
    this.state.inType = oldInType;
    return type;
  };
  pp.flowParseDeclareClass = function(node) {
    this.next();
    this.flowParseInterfaceish(node, true);
    return this.finishNode(node, "DeclareClass");
  };
  pp.flowParseDeclareFunction = function(node) {
    this.next();
    var id = node.id = this.parseIdentifier();
    var typeNode = this.startNode();
    var typeContainer = this.startNode();
    if (this.isRelational("<")) {
      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      typeNode.typeParameters = null;
    }
    this.expect(_types.types.parenL);
    var tmp = this.flowParseFunctionTypeParams();
    typeNode.params = tmp.params;
    typeNode.rest = tmp.rest;
    this.expect(_types.types.parenR);
    typeNode.returnType = this.flowParseTypeInitialiser();
    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
    this.finishNode(id, id.type);
    this.semicolon();
    return this.finishNode(node, "DeclareFunction");
  };
  pp.flowParseDeclare = function(node) {
    if (this.match(_types.types._class)) {
      return this.flowParseDeclareClass(node);
    } else if (this.match(_types.types._function)) {
      return this.flowParseDeclareFunction(node);
    } else if (this.match(_types.types._var)) {
      return this.flowParseDeclareVariable(node);
    } else if (this.isContextual("module")) {
      return this.flowParseDeclareModule(node);
    } else if (this.isContextual("type")) {
      return this.flowParseDeclareTypeAlias(node);
    } else if (this.isContextual("interface")) {
      return this.flowParseDeclareInterface(node);
    } else {
      this.unexpected();
    }
  };
  pp.flowParseDeclareVariable = function(node) {
    this.next();
    node.id = this.flowParseTypeAnnotatableIdentifier();
    this.semicolon();
    return this.finishNode(node, "DeclareVariable");
  };
  pp.flowParseDeclareModule = function(node) {
    this.next();
    if (this.match(_types.types.string)) {
      node.id = this.parseExprAtom();
    } else {
      node.id = this.parseIdentifier();
    }
    var bodyNode = node.body = this.startNode();
    var body = bodyNode.body = [];
    this.expect(_types.types.braceL);
    while (!this.match(_types.types.braceR)) {
      var node2 = this.startNode();
      this.next();
      body.push(this.flowParseDeclare(node2));
    }
    this.expect(_types.types.braceR);
    this.finishNode(bodyNode, "BlockStatement");
    return this.finishNode(node, "DeclareModule");
  };
  pp.flowParseDeclareTypeAlias = function(node) {
    this.next();
    this.flowParseTypeAlias(node);
    return this.finishNode(node, "DeclareTypeAlias");
  };
  pp.flowParseDeclareInterface = function(node) {
    this.next();
    this.flowParseInterfaceish(node);
    return this.finishNode(node, "DeclareInterface");
  };
  pp.flowParseInterfaceish = function(node, allowStatic) {
    node.id = this.parseIdentifier();
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }
    node.extends = [];
    node.mixins = [];
    if (this.eat(_types.types._extends)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (this.eat(_types.types.comma));
    }
    if (this.isContextual("mixins")) {
      this.next();
      do {
        node.mixins.push(this.flowParseInterfaceExtends());
      } while (this.eat(_types.types.comma));
    }
    node.body = this.flowParseObjectType(allowStatic);
  };
  pp.flowParseInterfaceExtends = function() {
    var node = this.startNode();
    node.id = this.parseIdentifier();
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    } else {
      node.typeParameters = null;
    }
    return this.finishNode(node, "InterfaceExtends");
  };
  pp.flowParseInterface = function(node) {
    this.flowParseInterfaceish(node, false);
    return this.finishNode(node, "InterfaceDeclaration");
  };
  pp.flowParseTypeAlias = function(node) {
    node.id = this.parseIdentifier();
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }
    node.right = this.flowParseTypeInitialiser(_types.types.eq, true);
    this.semicolon();
    return this.finishNode(node, "TypeAlias");
  };
  pp.flowParseTypeParameterDeclaration = function() {
    var node = this.startNode();
    node.params = [];
    this.expectRelational("<");
    while (!this.isRelational(">")) {
      node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
      if (!this.isRelational(">")) {
        this.expect(_types.types.comma);
      }
    }
    this.expectRelational(">");
    return this.finishNode(node, "TypeParameterDeclaration");
  };
  pp.flowParseExistentialTypeParam = function() {
    if (this.match(_types.types.star)) {
      var node = this.startNode();
      this.next();
      return this.finishNode(node, "ExistentialTypeParam");
    }
  };
  pp.flowParseTypeParameterInstantiation = function() {
    var node = this.startNode(),
        oldInType = this.state.inType;
    node.params = [];
    this.state.inType = true;
    this.expectRelational("<");
    while (!this.isRelational(">")) {
      node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
      if (!this.isRelational(">")) {
        this.expect(_types.types.comma);
      }
    }
    this.expectRelational(">");
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterInstantiation");
  };
  pp.flowParseObjectPropertyKey = function() {
    return this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
  };
  pp.flowParseObjectTypeIndexer = function(node, isStatic) {
    node.static = isStatic;
    this.expect(_types.types.bracketL);
    node.id = this.flowParseObjectPropertyKey();
    node.key = this.flowParseTypeInitialiser();
    this.expect(_types.types.bracketR);
    node.value = this.flowParseTypeInitialiser();
    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeIndexer");
  };
  pp.flowParseObjectTypeMethodish = function(node) {
    node.params = [];
    node.rest = null;
    node.typeParameters = null;
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }
    this.expect(_types.types.parenL);
    while (this.match(_types.types.name)) {
      node.params.push(this.flowParseFunctionTypeParam());
      if (!this.match(_types.types.parenR)) {
        this.expect(_types.types.comma);
      }
    }
    if (this.eat(_types.types.ellipsis)) {
      node.rest = this.flowParseFunctionTypeParam();
    }
    this.expect(_types.types.parenR);
    node.returnType = this.flowParseTypeInitialiser();
    return this.finishNode(node, "FunctionTypeAnnotation");
  };
  pp.flowParseObjectTypeMethod = function(startPos, startLoc, isStatic, key) {
    var node = this.startNodeAt(startPos, startLoc);
    node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
    node.static = isStatic;
    node.key = key;
    node.optional = false;
    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeProperty");
  };
  pp.flowParseObjectTypeCallProperty = function(node, isStatic) {
    var valueNode = this.startNode();
    node.static = isStatic;
    node.value = this.flowParseObjectTypeMethodish(valueNode);
    this.flowObjectTypeSemicolon();
    return this.finishNode(node, "ObjectTypeCallProperty");
  };
  pp.flowParseObjectType = function(allowStatic) {
    var nodeStart = this.startNode();
    var node = void 0;
    var propertyKey = void 0;
    var isStatic = void 0;
    nodeStart.callProperties = [];
    nodeStart.properties = [];
    nodeStart.indexers = [];
    this.expect(_types.types.braceL);
    while (!this.match(_types.types.braceR)) {
      var optional = false;
      var startPos = this.state.start,
          startLoc = this.state.startLoc;
      node = this.startNode();
      if (allowStatic && this.isContextual("static")) {
        this.next();
        isStatic = true;
      }
      if (this.match(_types.types.bracketL)) {
        nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
      } else if (this.match(_types.types.parenL) || this.isRelational("<")) {
        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
      } else {
        if (isStatic && this.match(_types.types.colon)) {
          propertyKey = this.parseIdentifier();
        } else {
          propertyKey = this.flowParseObjectPropertyKey();
        }
        if (this.isRelational("<") || this.match(_types.types.parenL)) {
          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
        } else {
          if (this.eat(_types.types.question)) {
            optional = true;
          }
          node.key = propertyKey;
          node.value = this.flowParseTypeInitialiser();
          node.optional = optional;
          node.static = isStatic;
          this.flowObjectTypeSemicolon();
          nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
        }
      }
    }
    this.expect(_types.types.braceR);
    return this.finishNode(nodeStart, "ObjectTypeAnnotation");
  };
  pp.flowObjectTypeSemicolon = function() {
    if (!this.eat(_types.types.semi) && !this.eat(_types.types.comma) && !this.match(_types.types.braceR)) {
      this.unexpected();
    }
  };
  pp.flowParseGenericType = function(startPos, startLoc, id) {
    var node = this.startNodeAt(startPos, startLoc);
    node.typeParameters = null;
    node.id = id;
    while (this.eat(_types.types.dot)) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.qualification = node.id;
      node2.id = this.parseIdentifier();
      node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
    }
    if (this.isRelational("<")) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    }
    return this.finishNode(node, "GenericTypeAnnotation");
  };
  pp.flowParseTypeofType = function() {
    var node = this.startNode();
    this.expect(_types.types._typeof);
    node.argument = this.flowParsePrimaryType();
    return this.finishNode(node, "TypeofTypeAnnotation");
  };
  pp.flowParseTupleType = function() {
    var node = this.startNode();
    node.types = [];
    this.expect(_types.types.bracketL);
    while (this.state.pos < this.input.length && !this.match(_types.types.bracketR)) {
      node.types.push(this.flowParseType());
      if (this.match(_types.types.bracketR))
        break;
      this.expect(_types.types.comma);
    }
    this.expect(_types.types.bracketR);
    return this.finishNode(node, "TupleTypeAnnotation");
  };
  pp.flowParseFunctionTypeParam = function() {
    var optional = false;
    var node = this.startNode();
    node.name = this.parseIdentifier();
    if (this.eat(_types.types.question)) {
      optional = true;
    }
    node.optional = optional;
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "FunctionTypeParam");
  };
  pp.flowParseFunctionTypeParams = function() {
    var ret = {
      params: [],
      rest: null
    };
    while (this.match(_types.types.name)) {
      ret.params.push(this.flowParseFunctionTypeParam());
      if (!this.match(_types.types.parenR)) {
        this.expect(_types.types.comma);
      }
    }
    if (this.eat(_types.types.ellipsis)) {
      ret.rest = this.flowParseFunctionTypeParam();
    }
    return ret;
  };
  pp.flowIdentToTypeAnnotation = function(startPos, startLoc, node, id) {
    switch (id.name) {
      case "any":
        return this.finishNode(node, "AnyTypeAnnotation");
      case "void":
        return this.finishNode(node, "VoidTypeAnnotation");
      case "bool":
      case "boolean":
        return this.finishNode(node, "BooleanTypeAnnotation");
      case "mixed":
        return this.finishNode(node, "MixedTypeAnnotation");
      case "number":
        return this.finishNode(node, "NumberTypeAnnotation");
      case "string":
        return this.finishNode(node, "StringTypeAnnotation");
      default:
        return this.flowParseGenericType(startPos, startLoc, id);
    }
  };
  pp.flowParsePrimaryType = function() {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var node = this.startNode();
    var tmp = void 0;
    var type = void 0;
    var isGroupedType = false;
    switch (this.state.type) {
      case _types.types.name:
        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
      case _types.types.braceL:
        return this.flowParseObjectType();
      case _types.types.bracketL:
        return this.flowParseTupleType();
      case _types.types.relational:
        if (this.state.value === "<") {
          node.typeParameters = this.flowParseTypeParameterDeclaration();
          this.expect(_types.types.parenL);
          tmp = this.flowParseFunctionTypeParams();
          node.params = tmp.params;
          node.rest = tmp.rest;
          this.expect(_types.types.parenR);
          this.expect(_types.types.arrow);
          node.returnType = this.flowParseType();
          return this.finishNode(node, "FunctionTypeAnnotation");
        }
      case _types.types.parenL:
        this.next();
        if (!this.match(_types.types.parenR) && !this.match(_types.types.ellipsis)) {
          if (this.match(_types.types.name)) {
            var token = this.lookahead().type;
            isGroupedType = token !== _types.types.question && token !== _types.types.colon;
          } else {
            isGroupedType = true;
          }
        }
        if (isGroupedType) {
          type = this.flowParseType();
          this.expect(_types.types.parenR);
          if (this.eat(_types.types.arrow)) {
            this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
          }
          return type;
        }
        tmp = this.flowParseFunctionTypeParams();
        node.params = tmp.params;
        node.rest = tmp.rest;
        this.expect(_types.types.parenR);
        this.expect(_types.types.arrow);
        node.returnType = this.flowParseType();
        node.typeParameters = null;
        return this.finishNode(node, "FunctionTypeAnnotation");
      case _types.types.string:
        node.value = this.state.value;
        this.addExtra(node, "rawValue", node.value);
        this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
        this.next();
        return this.finishNode(node, "StringLiteralTypeAnnotation");
      case _types.types._true:
      case _types.types._false:
        node.value = this.match(_types.types._true);
        this.next();
        return this.finishNode(node, "BooleanLiteralTypeAnnotation");
      case _types.types.num:
        node.value = this.state.value;
        this.addExtra(node, "rawValue", node.value);
        this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
        this.next();
        return this.finishNode(node, "NumericLiteralTypeAnnotation");
      case _types.types._null:
        node.value = this.match(_types.types._null);
        this.next();
        return this.finishNode(node, "NullLiteralTypeAnnotation");
      case _types.types._this:
        node.value = this.match(_types.types._this);
        this.next();
        return this.finishNode(node, "ThisTypeAnnotation");
      default:
        if (this.state.type.keyword === "typeof") {
          return this.flowParseTypeofType();
        }
    }
    this.unexpected();
  };
  pp.flowParsePostfixType = function() {
    var node = this.startNode();
    var type = node.elementType = this.flowParsePrimaryType();
    if (this.match(_types.types.bracketL)) {
      this.expect(_types.types.bracketL);
      this.expect(_types.types.bracketR);
      return this.finishNode(node, "ArrayTypeAnnotation");
    } else {
      return type;
    }
  };
  pp.flowParsePrefixType = function() {
    var node = this.startNode();
    if (this.eat(_types.types.question)) {
      node.typeAnnotation = this.flowParsePrefixType();
      return this.finishNode(node, "NullableTypeAnnotation");
    } else {
      return this.flowParsePostfixType();
    }
  };
  pp.flowParseIntersectionType = function() {
    var node = this.startNode();
    var type = this.flowParsePrefixType();
    node.types = [type];
    while (this.eat(_types.types.bitwiseAND)) {
      node.types.push(this.flowParsePrefixType());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
  };
  pp.flowParseUnionType = function() {
    var node = this.startNode();
    var type = this.flowParseIntersectionType();
    node.types = [type];
    while (this.eat(_types.types.bitwiseOR)) {
      node.types.push(this.flowParseIntersectionType());
    }
    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
  };
  pp.flowParseType = function() {
    var oldInType = this.state.inType;
    this.state.inType = true;
    var type = this.flowParseUnionType();
    this.state.inType = oldInType;
    return type;
  };
  pp.flowParseTypeAnnotation = function() {
    var node = this.startNode();
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "TypeAnnotation");
  };
  pp.flowParseTypeAnnotatableIdentifier = function(requireTypeAnnotation, canBeOptionalParam) {
    var variance = void 0;
    if (this.match(_types.types.plusMin)) {
      if (this.state.value === "+") {
        variance = "plus";
      } else if (this.state.value === "-") {
        variance = "minus";
      }
      this.eat(_types.types.plusMin);
    }
    var ident = this.parseIdentifier();
    var isOptionalParam = false;
    if (variance) {
      ident.variance = variance;
    }
    if (canBeOptionalParam && this.eat(_types.types.question)) {
      this.expect(_types.types.question);
      isOptionalParam = true;
    }
    if (requireTypeAnnotation || this.match(_types.types.colon)) {
      ident.typeAnnotation = this.flowParseTypeAnnotation();
      this.finishNode(ident, ident.type);
    }
    if (isOptionalParam) {
      ident.optional = true;
      this.finishNode(ident, ident.type);
    }
    return ident;
  };
  return module.exports;
});

$__System.registerDynamic("162", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.default = {
    quot: "\"",
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    "int": "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
  };
  return module.exports;
});

$__System.registerDynamic("163", ["164", "165", "166", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toObject = $__require('164'),
      $getPrototypeOf = $__require('165');
  $__require('166')('getPrototypeOf', function() {
    return function getPrototypeOf(it) {
      return $getPrototypeOf(toObject(it));
    };
  });
  return module.exports;
});

$__System.registerDynamic("167", ["163", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('163');
  module.exports = $__require('55').Object.getPrototypeOf;
  return module.exports;
});

$__System.registerDynamic("168", ["167", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('167'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("16", ["29", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.default = function(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  };
  return module.exports;
});

$__System.registerDynamic("169", ["16a", "16b", "8a", "16c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('16a'),
      anObject = $__require('16b');
  var check = function(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null)
      throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function(test, buggy, set) {
      try {
        set = $__require('8a')(Function.call, $__require('16c').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy)
          O.__proto__ = proto;
        else
          set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  return module.exports;
});

$__System.registerDynamic("16d", ["52", "169", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.S, 'Object', {setPrototypeOf: $__require('169').set});
  return module.exports;
});

$__System.registerDynamic("16e", ["16d", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('16d');
  module.exports = $__require('55').Object.setPrototypeOf;
  return module.exports;
});

$__System.registerDynamic("16f", ["16e", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('16e'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("170", ["52", "87", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.S, 'Object', {create: $__require('87')});
  return module.exports;
});

$__System.registerDynamic("171", ["170", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('170');
  var $Object = $__require('55').Object;
  module.exports = function create(P, D) {
    return $Object.create(P, D);
  };
  return module.exports;
});

$__System.registerDynamic("9f", ["171", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('171'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("17", ["16f", "9f", "29", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _setPrototypeOf = $__require('16f');
  var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
  var _create = $__require('9f');
  var _create2 = _interopRequireDefault(_create);
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.default = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }
    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
  };
  return module.exports;
});

$__System.registerDynamic("172", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.getOptions = getOptions;
  var defaultOptions = exports.defaultOptions = {
    sourceType: "script",
    sourceFilename: undefined,
    allowReturnOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    plugins: [],
    strictMode: null
  };
  function getOptions(opts) {
    var options = {};
    for (var key in defaultOptions) {
      options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
    }
    return options;
  }
  return module.exports;
});

$__System.registerDynamic("173", ["52", "84", "83", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52');
  $export($export.S + $export.F * !$__require('84'), 'Object', {defineProperty: $__require('83').f});
  return module.exports;
});

$__System.registerDynamic("174", ["173", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('173');
  var $Object = $__require('55').Object;
  module.exports = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };
  return module.exports;
});

$__System.registerDynamic("175", ["174", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('174'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("15e", ["175", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _defineProperty = $__require('175');
  var _defineProperty2 = _interopRequireDefault(_defineProperty);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.default = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  return module.exports;
});

$__System.registerDynamic("15d", ["15", "157"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SourceLocation = exports.Position = undefined;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  exports.getLineInfo = getLineInfo;
  var _whitespace = $__require('157');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Position = exports.Position = function Position(line, col) {
    (0, _classCallCheck3.default)(this, Position);
    this.line = line;
    this.column = col;
  };
  var SourceLocation = exports.SourceLocation = function SourceLocation(start, end) {
    (0, _classCallCheck3.default)(this, SourceLocation);
    this.start = start;
    this.end = end;
  };
  function getLineInfo(input, offset) {
    for (var line = 1,
        cur = 0; ; ) {
      _whitespace.lineBreakG.lastIndex = cur;
      var match = _whitespace.lineBreakG.exec(input);
      if (match && match.index < offset) {
        ++line;
        cur = match.index + match[0].length;
      } else {
        return new Position(line, offset - cur);
      }
    }
  }
  return module.exports;
});

$__System.registerDynamic("176", ["15", "155", "157"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.types = exports.TokContext = undefined;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _types = $__require('155');
  var _whitespace = $__require('157');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TokContext = exports.TokContext = function TokContext(token, isExpr, preserveSpace, override) {
    (0, _classCallCheck3.default)(this, TokContext);
    this.token = token;
    this.isExpr = !!isExpr;
    this.preserveSpace = !!preserveSpace;
    this.override = override;
  };
  var types = exports.types = {
    b_stat: new TokContext("{", false),
    b_expr: new TokContext("{", true),
    b_tmpl: new TokContext("${", true),
    p_stat: new TokContext("(", false),
    p_expr: new TokContext("(", true),
    q_tmpl: new TokContext("`", true, true, function(p) {
      return p.readTmplToken();
    }),
    f_expr: new TokContext("function", true)
  };
  _types.types.parenR.updateContext = _types.types.braceR.updateContext = function() {
    if (this.state.context.length === 1) {
      this.state.exprAllowed = true;
      return;
    }
    var out = this.state.context.pop();
    if (out === types.b_stat && this.curContext() === types.f_expr) {
      this.state.context.pop();
      this.state.exprAllowed = false;
    } else if (out === types.b_tmpl) {
      this.state.exprAllowed = true;
    } else {
      this.state.exprAllowed = !out.isExpr;
    }
  };
  _types.types.name.updateContext = function(prevType) {
    this.state.exprAllowed = false;
    if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
      if (_whitespace.lineBreak.test(this.input.slice(this.state.end))) {
        this.state.exprAllowed = true;
      }
    }
  };
  _types.types.braceL.updateContext = function(prevType) {
    this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
    this.state.exprAllowed = true;
  };
  _types.types.dollarBraceL.updateContext = function() {
    this.state.context.push(types.b_tmpl);
    this.state.exprAllowed = true;
  };
  _types.types.parenL.updateContext = function(prevType) {
    var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
    this.state.context.push(statementParens ? types.p_stat : types.p_expr);
    this.state.exprAllowed = true;
  };
  _types.types.incDec.updateContext = function() {};
  _types.types._function.updateContext = function() {
    if (this.curContext() !== types.b_stat) {
      this.state.context.push(types.f_expr);
    }
    this.state.exprAllowed = false;
  };
  _types.types.backQuote.updateContext = function() {
    if (this.curContext() === types.q_tmpl) {
      this.state.context.pop();
    } else {
      this.state.context.push(types.q_tmpl);
    }
    this.state.exprAllowed = false;
  };
  return module.exports;
});

$__System.registerDynamic("155", ["15"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.keywords = exports.types = exports.TokenType = undefined;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TokenType = exports.TokenType = function TokenType(label) {
    var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    (0, _classCallCheck3.default)(this, TokenType);
    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.rightAssociative = !!conf.rightAssociative;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop || null;
    this.updateContext = null;
  };
  function binop(name, prec) {
    return new TokenType(name, {
      beforeExpr: true,
      binop: prec
    });
  }
  var beforeExpr = {beforeExpr: true},
      startsExpr = {startsExpr: true};
  var types = exports.types = {
    num: new TokenType("num", startsExpr),
    regexp: new TokenType("regexp", startsExpr),
    string: new TokenType("string", startsExpr),
    name: new TokenType("name", startsExpr),
    eof: new TokenType("eof"),
    bracketL: new TokenType("[", {
      beforeExpr: true,
      startsExpr: true
    }),
    bracketR: new TokenType("]"),
    braceL: new TokenType("{", {
      beforeExpr: true,
      startsExpr: true
    }),
    braceR: new TokenType("}"),
    parenL: new TokenType("(", {
      beforeExpr: true,
      startsExpr: true
    }),
    parenR: new TokenType(")"),
    comma: new TokenType(",", beforeExpr),
    semi: new TokenType(";", beforeExpr),
    colon: new TokenType(":", beforeExpr),
    doubleColon: new TokenType("::", beforeExpr),
    dot: new TokenType("."),
    question: new TokenType("?", beforeExpr),
    arrow: new TokenType("=>", beforeExpr),
    template: new TokenType("template"),
    ellipsis: new TokenType("...", beforeExpr),
    backQuote: new TokenType("`", startsExpr),
    dollarBraceL: new TokenType("${", {
      beforeExpr: true,
      startsExpr: true
    }),
    at: new TokenType("@"),
    eq: new TokenType("=", {
      beforeExpr: true,
      isAssign: true
    }),
    assign: new TokenType("_=", {
      beforeExpr: true,
      isAssign: true
    }),
    incDec: new TokenType("++/--", {
      prefix: true,
      postfix: true,
      startsExpr: true
    }),
    prefix: new TokenType("prefix", {
      beforeExpr: true,
      prefix: true,
      startsExpr: true
    }),
    logicalOR: binop("||", 1),
    logicalAND: binop("&&", 2),
    bitwiseOR: binop("|", 3),
    bitwiseXOR: binop("^", 4),
    bitwiseAND: binop("&", 5),
    equality: binop("==/!=", 6),
    relational: binop("</>", 7),
    bitShift: binop("<</>>", 8),
    plusMin: new TokenType("+/-", {
      beforeExpr: true,
      binop: 9,
      prefix: true,
      startsExpr: true
    }),
    modulo: binop("%", 10),
    star: binop("*", 10),
    slash: binop("/", 10),
    exponent: new TokenType("**", {
      beforeExpr: true,
      binop: 11,
      rightAssociative: true
    })
  };
  var keywords = exports.keywords = {};
  function kw(name) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    options.keyword = name;
    keywords[name] = types["_" + name] = new TokenType(name, options);
  }
  kw("break");
  kw("case", beforeExpr);
  kw("catch");
  kw("continue");
  kw("debugger");
  kw("default", beforeExpr);
  kw("do", {
    isLoop: true,
    beforeExpr: true
  });
  kw("else", beforeExpr);
  kw("finally");
  kw("for", {isLoop: true});
  kw("function", startsExpr);
  kw("if");
  kw("return", beforeExpr);
  kw("switch");
  kw("throw", beforeExpr);
  kw("try");
  kw("var");
  kw("let");
  kw("const");
  kw("while", {isLoop: true});
  kw("with");
  kw("new", {
    beforeExpr: true,
    startsExpr: true
  });
  kw("this", startsExpr);
  kw("super", startsExpr);
  kw("class");
  kw("extends", beforeExpr);
  kw("export");
  kw("import");
  kw("yield", {
    beforeExpr: true,
    startsExpr: true
  });
  kw("null", startsExpr);
  kw("true", startsExpr);
  kw("false", startsExpr);
  kw("in", {
    beforeExpr: true,
    binop: 7
  });
  kw("instanceof", {
    beforeExpr: true,
    binop: 7
  });
  kw("typeof", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true
  });
  kw("void", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true
  });
  kw("delete", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true
  });
  return module.exports;
});

$__System.registerDynamic("177", ["15", "15e", "15d", "176", "155"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _createClass2 = $__require('15e');
  var _createClass3 = _interopRequireDefault(_createClass2);
  var _location = $__require('15d');
  var _context = $__require('176');
  var _types = $__require('155');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var State = function() {
    function State() {
      (0, _classCallCheck3.default)(this, State);
    }
    (0, _createClass3.default)(State, [{
      key: "init",
      value: function init(options, input) {
        this.strict = options.strictMode === false ? false : options.sourceType === "module";
        this.input = input;
        this.potentialArrowAt = -1;
        this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;
        this.labels = [];
        this.decorators = [];
        this.tokens = [];
        this.comments = [];
        this.trailingComments = [];
        this.leadingComments = [];
        this.commentStack = [];
        this.pos = this.lineStart = 0;
        this.curLine = 1;
        this.type = _types.types.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = [_context.types.b_stat];
        this.exprAllowed = true;
        this.containsEsc = this.containsOctal = false;
        this.octalPosition = null;
        return this;
      }
    }, {
      key: "curPosition",
      value: function curPosition() {
        return new _location.Position(this.curLine, this.pos - this.lineStart);
      }
    }, {
      key: "clone",
      value: function clone(skipArrays) {
        var state = new State();
        for (var key in this) {
          var val = this[key];
          if ((!skipArrays || key === "context") && Array.isArray(val)) {
            val = val.slice();
          }
          state[key] = val;
        }
        return state;
      }
    }]);
    return State;
  }();
  exports.default = State;
  return module.exports;
});

$__System.registerDynamic("178", ["15e", "15", "15a", "155", "176", "15d", "157", "177"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Token = undefined;
  var _createClass2 = $__require('15e');
  var _createClass3 = _interopRequireDefault(_createClass2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _identifier = $__require('15a');
  var _types = $__require('155');
  var _context = $__require('176');
  var _location = $__require('15d');
  var _whitespace = $__require('157');
  var _state = $__require('177');
  var _state2 = _interopRequireDefault(_state);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var Token = exports.Token = function Token(state) {
    (0, _classCallCheck3.default)(this, Token);
    this.type = state.type;
    this.value = state.value;
    this.start = state.start;
    this.end = state.end;
    this.loc = new _location.SourceLocation(state.startLoc, state.endLoc);
  };
  function codePointToString(code) {
    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    } else {
      return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
    }
  }
  var Tokenizer = function() {
    function Tokenizer(options, input) {
      (0, _classCallCheck3.default)(this, Tokenizer);
      this.state = new _state2.default();
      this.state.init(options, input);
    }
    (0, _createClass3.default)(Tokenizer, [{
      key: "next",
      value: function next() {
        if (!this.isLookahead) {
          this.state.tokens.push(new Token(this.state));
        }
        this.state.lastTokEnd = this.state.end;
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }
    }, {
      key: "eat",
      value: function eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "match",
      value: function match(type) {
        return this.state.type === type;
      }
    }, {
      key: "isKeyword",
      value: function isKeyword(word) {
        return (0, _identifier.isKeyword)(word);
      }
    }, {
      key: "lookahead",
      value: function lookahead() {
        var old = this.state;
        this.state = old.clone(true);
        this.isLookahead = true;
        this.next();
        this.isLookahead = false;
        var curr = this.state.clone(true);
        this.state = old;
        return curr;
      }
    }, {
      key: "setStrict",
      value: function setStrict(strict) {
        this.state.strict = strict;
        if (!this.match(_types.types.num) && !this.match(_types.types.string))
          return;
        this.state.pos = this.state.start;
        while (this.state.pos < this.state.lineStart) {
          this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
          --this.state.curLine;
        }
        this.nextToken();
      }
    }, {
      key: "curContext",
      value: function curContext() {
        return this.state.context[this.state.context.length - 1];
      }
    }, {
      key: "nextToken",
      value: function nextToken() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace)
          this.skipSpace();
        this.state.containsOctal = false;
        this.state.octalPosition = null;
        this.state.start = this.state.pos;
        this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.input.length)
          return this.finishToken(_types.types.eof);
        if (curContext.override) {
          return curContext.override(this);
        } else {
          return this.readToken(this.fullCharCodeAtPos());
        }
      }
    }, {
      key: "readToken",
      value: function readToken(code) {
        if ((0, _identifier.isIdentifierStart)(code) || code === 92) {
          return this.readWord();
        } else {
          return this.getTokenFromCode(code);
        }
      }
    }, {
      key: "fullCharCodeAtPos",
      value: function fullCharCodeAtPos() {
        var code = this.input.charCodeAt(this.state.pos);
        if (code <= 0xd7ff || code >= 0xe000)
          return code;
        var next = this.input.charCodeAt(this.state.pos + 1);
        return (code << 10) + next - 0x35fdc00;
      }
    }, {
      key: "pushComment",
      value: function pushComment(block, text, start, end, startLoc, endLoc) {
        var comment = {
          type: block ? "CommentBlock" : "CommentLine",
          value: text,
          start: start,
          end: end,
          loc: new _location.SourceLocation(startLoc, endLoc)
        };
        if (!this.isLookahead) {
          this.state.tokens.push(comment);
          this.state.comments.push(comment);
        }
        this.addComment(comment);
      }
    }, {
      key: "skipBlockComment",
      value: function skipBlockComment() {
        var startLoc = this.state.curPosition();
        var start = this.state.pos,
            end = this.input.indexOf("*/", this.state.pos += 2);
        if (end === -1)
          this.raise(this.state.pos - 2, "Unterminated comment");
        this.state.pos = end + 2;
        _whitespace.lineBreakG.lastIndex = start;
        var match = void 0;
        while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
          ++this.state.curLine;
          this.state.lineStart = match.index + match[0].length;
        }
        this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
      }
    }, {
      key: "skipLineComment",
      value: function skipLineComment(startSkip) {
        var start = this.state.pos;
        var startLoc = this.state.curPosition();
        var ch = this.input.charCodeAt(this.state.pos += startSkip);
        while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
          ++this.state.pos;
          ch = this.input.charCodeAt(this.state.pos);
        }
        this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
      }
    }, {
      key: "skipSpace",
      value: function skipSpace() {
        loop: while (this.state.pos < this.input.length) {
          var ch = this.input.charCodeAt(this.state.pos);
          switch (ch) {
            case 32:
            case 160:
              ++this.state.pos;
              break;
            case 13:
              if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                ++this.state.pos;
              }
            case 10:
            case 8232:
            case 8233:
              ++this.state.pos;
              ++this.state.curLine;
              this.state.lineStart = this.state.pos;
              break;
            case 47:
              switch (this.input.charCodeAt(this.state.pos + 1)) {
                case 42:
                  this.skipBlockComment();
                  break;
                case 47:
                  this.skipLineComment(2);
                  break;
                default:
                  break loop;
              }
              break;
            default:
              if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                ++this.state.pos;
              } else {
                break loop;
              }
          }
        }
      }
    }, {
      key: "finishToken",
      value: function finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        var prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        this.updateContext(prevType);
      }
    }, {
      key: "readToken_dot",
      value: function readToken_dot() {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 46 && next2 === 46) {
          this.state.pos += 3;
          return this.finishToken(_types.types.ellipsis);
        } else {
          ++this.state.pos;
          return this.finishToken(_types.types.dot);
        }
      }
    }, {
      key: "readToken_slash",
      value: function readToken_slash() {
        if (this.state.exprAllowed) {
          ++this.state.pos;
          return this.readRegexp();
        }
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.slash, 1);
        }
      }
    }, {
      key: "readToken_mult_modulo",
      value: function readToken_mult_modulo(code) {
        var type = code === 42 ? _types.types.star : _types.types.modulo;
        var width = 1;
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 42 && this.hasPlugin("exponentiationOperator")) {
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = _types.types.exponent;
        }
        if (next === 61) {
          width++;
          type = _types.types.assign;
        }
        return this.finishOp(type, width);
      }
    }, {
      key: "readToken_pipe_amp",
      value: function readToken_pipe_amp(code) {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code)
          return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
        if (next === 61)
          return this.finishOp(_types.types.assign, 2);
        return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
      }
    }, {
      key: "readToken_caret",
      value: function readToken_caret() {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.bitwiseXOR, 1);
        }
      }
    }, {
      key: "readToken_plus_min",
      value: function readToken_plus_min(code) {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(_types.types.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(_types.types.assign, 2);
        } else {
          return this.finishOp(_types.types.plusMin, 1);
        }
      }
    }, {
      key: "readToken_lt_gt",
      value: function readToken_lt_gt(code) {
        var next = this.input.charCodeAt(this.state.pos + 1);
        var size = 1;
        if (next === code) {
          size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.state.pos + size) === 61)
            return this.finishOp(_types.types.assign, size + 1);
          return this.finishOp(_types.types.bitShift, size);
        }
        if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
          if (this.inModule)
            this.unexpected();
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(_types.types.relational, size);
      }
    }, {
      key: "readToken_eq_excl",
      value: function readToken_eq_excl(code) {
        var next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61)
          return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        if (code === 61 && next === 62) {
          this.state.pos += 2;
          return this.finishToken(_types.types.arrow);
        }
        return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
      }
    }, {
      key: "getTokenFromCode",
      value: function getTokenFromCode(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++this.state.pos;
            return this.finishToken(_types.types.parenL);
          case 41:
            ++this.state.pos;
            return this.finishToken(_types.types.parenR);
          case 59:
            ++this.state.pos;
            return this.finishToken(_types.types.semi);
          case 44:
            ++this.state.pos;
            return this.finishToken(_types.types.comma);
          case 91:
            ++this.state.pos;
            return this.finishToken(_types.types.bracketL);
          case 93:
            ++this.state.pos;
            return this.finishToken(_types.types.bracketR);
          case 123:
            ++this.state.pos;
            return this.finishToken(_types.types.braceL);
          case 125:
            ++this.state.pos;
            return this.finishToken(_types.types.braceR);
          case 58:
            if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              return this.finishOp(_types.types.doubleColon, 2);
            } else {
              ++this.state.pos;
              return this.finishToken(_types.types.colon);
            }
          case 63:
            ++this.state.pos;
            return this.finishToken(_types.types.question);
          case 64:
            ++this.state.pos;
            return this.finishToken(_types.types.at);
          case 96:
            ++this.state.pos;
            return this.finishToken(_types.types.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88)
              return this.readRadixNumber(16);
            if (next === 111 || next === 79)
              return this.readRadixNumber(8);
            if (next === 98 || next === 66)
              return this.readRadixNumber(2);
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 126:
            return this.finishOp(_types.types.prefix, 1);
        }
        this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
      }
    }, {
      key: "finishOp",
      value: function finishOp(type, size) {
        var str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        return this.finishToken(type, str);
      }
    }, {
      key: "readRegexp",
      value: function readRegexp() {
        var escaped = void 0,
            inClass = void 0,
            start = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.input.length)
            this.raise(start, "Unterminated regular expression");
          var ch = this.input.charAt(this.state.pos);
          if (_whitespace.lineBreak.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (escaped) {
            escaped = false;
          } else {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          }
          ++this.state.pos;
        }
        var content = this.input.slice(start, this.state.pos);
        ++this.state.pos;
        var mods = this.readWord1();
        if (mods) {
          var validFlags = /^[gmsiyu]*$/;
          if (!validFlags.test(mods))
            this.raise(start, "Invalid regular expression flag");
        }
        return this.finishToken(_types.types.regexp, {
          pattern: content,
          flags: mods
        });
      }
    }, {
      key: "readInt",
      value: function readInt(radix, len) {
        var start = this.state.pos,
            total = 0;
        for (var i = 0,
            e = len == null ? Infinity : len; i < e; ++i) {
          var code = this.input.charCodeAt(this.state.pos),
              val = void 0;
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (code >= 48 && code <= 57) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix)
            break;
          ++this.state.pos;
          total = total * radix + val;
        }
        if (this.state.pos === start || len != null && this.state.pos - start !== len)
          return null;
        return total;
      }
    }, {
      key: "readRadixNumber",
      value: function readRadixNumber(radix) {
        this.state.pos += 2;
        var val = this.readInt(radix);
        if (val == null)
          this.raise(this.state.start + 2, "Expected number in radix " + radix);
        if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos()))
          this.raise(this.state.pos, "Identifier directly after number");
        return this.finishToken(_types.types.num, val);
      }
    }, {
      key: "readNumber",
      value: function readNumber(startsWithDot) {
        var start = this.state.pos,
            isFloat = false,
            octal = this.input.charCodeAt(this.state.pos) === 48;
        if (!startsWithDot && this.readInt(10) === null)
          this.raise(start, "Invalid number");
        var next = this.input.charCodeAt(this.state.pos);
        if (next === 46) {
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 69 || next === 101) {
          next = this.input.charCodeAt(++this.state.pos);
          if (next === 43 || next === 45)
            ++this.state.pos;
          if (this.readInt(10) === null)
            this.raise(start, "Invalid number");
          isFloat = true;
        }
        if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos()))
          this.raise(this.state.pos, "Identifier directly after number");
        var str = this.input.slice(start, this.state.pos),
            val = void 0;
        if (isFloat) {
          val = parseFloat(str);
        } else if (!octal || str.length === 1) {
          val = parseInt(str, 10);
        } else if (/[89]/.test(str) || this.state.strict) {
          this.raise(start, "Invalid number");
        } else {
          val = parseInt(str, 8);
        }
        return this.finishToken(_types.types.num, val);
      }
    }, {
      key: "readCodePoint",
      value: function readCodePoint() {
        var ch = this.input.charCodeAt(this.state.pos),
            code = void 0;
        if (ch === 123) {
          var codePos = ++this.state.pos;
          code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
          ++this.state.pos;
          if (code > 0x10FFFF)
            this.raise(codePos, "Code point out of bounds");
        } else {
          code = this.readHexChar(4);
        }
        return code;
      }
    }, {
      key: "readString",
      value: function readString(quote) {
        var out = "",
            chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.input.length)
            this.raise(this.state.start, "Unterminated string constant");
          var ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.state.pos;
          } else {
            if ((0, _whitespace.isNewLine)(ch))
              this.raise(this.state.start, "Unterminated string constant");
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(_types.types.string, out);
      }
    }, {
      key: "readTmplToken",
      value: function readTmplToken() {
        var out = "",
            chunkStart = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.input.length)
            this.raise(this.state.start, "Unterminated template");
          var ch = this.input.charCodeAt(this.state.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
            if (this.state.pos === this.state.start && this.match(_types.types.template)) {
              if (ch === 36) {
                this.state.pos += 2;
                return this.finishToken(_types.types.dollarBraceL);
              } else {
                ++this.state.pos;
                return this.finishToken(_types.types.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.state.pos);
            return this.finishToken(_types.types.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.state.pos;
          } else if ((0, _whitespace.isNewLine)(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            ++this.state.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10)
                  ++this.state.pos;
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
      }
    }, {
      key: "readEscapedChar",
      value: function readEscapedChar(inTemplate) {
        var ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString(this.readCodePoint());
          case 116:
            return "\t";
          case 98:
            return "\b";
          case 118:
            return "\u000b";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10)
              ++this.state.pos;
          case 10:
            this.state.lineStart = this.state.pos;
            ++this.state.curLine;
            return "";
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              if (octal > 0) {
                if (!this.state.containsOctal) {
                  this.state.containsOctal = true;
                  this.state.octalPosition = this.state.pos - 2;
                }
                if (this.state.strict || inTemplate) {
                  this.raise(this.state.pos - 2, "Octal literal in strict mode");
                }
              }
              this.state.pos += octalStr.length - 1;
              return String.fromCharCode(octal);
            }
            return String.fromCharCode(ch);
        }
      }
    }, {
      key: "readHexChar",
      value: function readHexChar(len) {
        var codePos = this.state.pos;
        var n = this.readInt(16, len);
        if (n === null)
          this.raise(codePos, "Bad character escape sequence");
        return n;
      }
    }, {
      key: "readWord1",
      value: function readWord1() {
        this.state.containsEsc = false;
        var word = "",
            first = true,
            chunkStart = this.state.pos;
        while (this.state.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if ((0, _identifier.isIdentifierChar)(ch)) {
            this.state.pos += ch <= 0xffff ? 1 : 2;
          } else if (ch === 92) {
            this.state.containsEsc = true;
            word += this.input.slice(chunkStart, this.state.pos);
            var escStart = this.state.pos;
            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.state.pos;
            var esc = this.readCodePoint();
            if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, true)) {
              this.raise(escStart, "Invalid Unicode escape");
            }
            word += codePointToString(esc);
            chunkStart = this.state.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.state.pos);
      }
    }, {
      key: "readWord",
      value: function readWord() {
        var word = this.readWord1();
        var type = _types.types.name;
        if (!this.state.containsEsc && this.isKeyword(word)) {
          type = _types.keywords[word];
        }
        return this.finishToken(type, word);
      }
    }, {
      key: "braceIsBlock",
      value: function braceIsBlock(prevType) {
        if (prevType === _types.types.colon) {
          var parent = this.curContext();
          if (parent === _context.types.b_stat || parent === _context.types.b_expr) {
            return !parent.isExpr;
          }
        }
        if (prevType === _types.types._return) {
          return _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
        }
        if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
          return true;
        }
        if (prevType === _types.types.braceL) {
          return this.curContext() === _context.types.b_stat;
        }
        return !this.state.exprAllowed;
      }
    }, {
      key: "updateContext",
      value: function updateContext(prevType) {
        var update = void 0,
            type = this.state.type;
        if (type.keyword && prevType === _types.types.dot) {
          this.state.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.state.exprAllowed = type.beforeExpr;
        }
      }
    }]);
    return Tokenizer;
  }();
  exports.default = Tokenizer;
  return module.exports;
});

$__System.registerDynamic("156", ["f", "168", "15", "15e", "16", "17", "15a", "172", "178"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.plugins = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _getPrototypeOf = $__require('168');
  var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _createClass2 = $__require('15e');
  var _createClass3 = _interopRequireDefault(_createClass2);
  var _possibleConstructorReturn2 = $__require('16');
  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
  var _inherits2 = $__require('17');
  var _inherits3 = _interopRequireDefault(_inherits2);
  var _identifier = $__require('15a');
  var _options = $__require('172');
  var _tokenizer = $__require('178');
  var _tokenizer2 = _interopRequireDefault(_tokenizer);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var plugins = exports.plugins = {};
  var Parser = function(_Tokenizer) {
    (0, _inherits3.default)(Parser, _Tokenizer);
    function Parser(options, input) {
      (0, _classCallCheck3.default)(this, Parser);
      options = (0, _options.getOptions)(options);
      var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Parser).call(this, options, input));
      _this.options = options;
      _this.inModule = _this.options.sourceType === "module";
      _this.isReservedWord = _identifier.reservedWords[6];
      _this.input = input;
      _this.plugins = _this.loadPlugins(_this.options.plugins);
      _this.filename = options.sourceFilename;
      if (_this.state.pos === 0 && _this.input[0] === "#" && _this.input[1] === "!") {
        _this.skipLineComment(2);
      }
      return _this;
    }
    (0, _createClass3.default)(Parser, [{
      key: "hasPlugin",
      value: function hasPlugin(name) {
        return !!(this.plugins["*"] || this.plugins[name]);
      }
    }, {
      key: "extend",
      value: function extend(name, f) {
        this[name] = f(this[name]);
      }
    }, {
      key: "loadPlugins",
      value: function loadPlugins(plugins) {
        var pluginMap = {};
        if (plugins.indexOf("flow") >= 0) {
          plugins = plugins.filter(function(plugin) {
            return plugin !== "flow";
          });
          plugins.push("flow");
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;
        try {
          for (var _iterator = (0, _getIterator3.default)(plugins),
              _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;
            if (!pluginMap[name]) {
              pluginMap[name] = true;
              var plugin = exports.plugins[name];
              if (plugin)
                plugin(this);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return pluginMap;
      }
    }, {
      key: "parse",
      value: function parse() {
        var file = this.startNode();
        var program = this.startNode();
        this.nextToken();
        return this.parseTopLevel(file, program);
      }
    }]);
    return Parser;
  }(_tokenizer2.default);
  exports.default = Parser;
  return module.exports;
});

$__System.registerDynamic("15a", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.isIdentifierStart = isIdentifierStart;
  exports.isIdentifierChar = isIdentifierChar;
  function makePredicate(words) {
    words = words.split(" ");
    return function(str) {
      return words.indexOf(str) >= 0;
    };
  }
  var reservedWords = exports.reservedWords = {
    6: makePredicate("enum await"),
    strict: makePredicate("implements interface let package private protected public static yield"),
    strictBind: makePredicate("eval arguments")
  };
  var isKeyword = exports.isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
  var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
  function isInAstralSet(code, set) {
    var pos = 0x10000;
    for (var i = 0; i < set.length; i += 2) {
      pos += set[i];
      if (pos > code)
        return false;
      pos += set[i + 1];
      if (pos >= code)
        return true;
    }
  }
  function isIdentifierStart(code) {
    if (code < 65)
      return code === 36;
    if (code < 91)
      return true;
    if (code < 97)
      return code === 95;
    if (code < 123)
      return true;
    if (code <= 0xffff)
      return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48)
      return code === 36;
    if (code < 58)
      return true;
    if (code < 65)
      return false;
    if (code < 91)
      return true;
    if (code < 97)
      return code === 95;
    if (code < 123)
      return true;
    if (code <= 0xffff)
      return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  return module.exports;
});

$__System.registerDynamic("157", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.isNewLine = isNewLine;
  var lineBreak = exports.lineBreak = /\r\n?|\n|\u2028|\u2029/;
  var lineBreakG = exports.lineBreakG = new RegExp(lineBreak.source, "g");
  function isNewLine(code) {
    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
  }
  var nonASCIIwhitespace = exports.nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
  return module.exports;
});

$__System.registerDynamic("179", ["162", "155", "176", "156", "15a", "157"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.default = function(instance) {
    instance.extend("parseExprAtom", function(inner) {
      return function(refShortHandDefaultPos) {
        if (this.match(_types.types.jsxText)) {
          var node = this.parseLiteral(this.state.value, "JSXText");
          node.extra = null;
          return node;
        } else if (this.match(_types.types.jsxTagStart)) {
          return this.jsxParseElement();
        } else {
          return inner.call(this, refShortHandDefaultPos);
        }
      };
    });
    instance.extend("readToken", function(inner) {
      return function(code) {
        var context = this.curContext();
        if (context === _context.types.j_expr) {
          return this.jsxReadToken();
        }
        if (context === _context.types.j_oTag || context === _context.types.j_cTag) {
          if ((0, _identifier.isIdentifierStart)(code)) {
            return this.jsxReadWord();
          }
          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(_types.types.jsxTagEnd);
          }
          if ((code === 34 || code === 39) && context === _context.types.j_oTag) {
            return this.jsxReadString(code);
          }
        }
        if (code === 60 && this.state.exprAllowed) {
          ++this.state.pos;
          return this.finishToken(_types.types.jsxTagStart);
        }
        return inner.call(this, code);
      };
    });
    instance.extend("updateContext", function(inner) {
      return function(prevType) {
        if (this.match(_types.types.braceL)) {
          var curContext = this.curContext();
          if (curContext === _context.types.j_oTag) {
            this.state.context.push(_context.types.b_expr);
          } else if (curContext === _context.types.j_expr) {
            this.state.context.push(_context.types.b_tmpl);
          } else {
            inner.call(this, prevType);
          }
          this.state.exprAllowed = true;
        } else if (this.match(_types.types.slash) && prevType === _types.types.jsxTagStart) {
          this.state.context.length -= 2;
          this.state.context.push(_context.types.j_cTag);
          this.state.exprAllowed = false;
        } else {
          return inner.call(this, prevType);
        }
      };
    });
  };
  var _xhtml = $__require('162');
  var _xhtml2 = _interopRequireDefault(_xhtml);
  var _types = $__require('155');
  var _context = $__require('176');
  var _parser = $__require('156');
  var _parser2 = _interopRequireDefault(_parser);
  var _identifier = $__require('15a');
  var _whitespace = $__require('157');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var HEX_NUMBER = /^[\da-fA-F]+$/;
  var DECIMAL_NUMBER = /^\d+$/;
  _context.types.j_oTag = new _context.TokContext("<tag", false);
  _context.types.j_cTag = new _context.TokContext("</tag", false);
  _context.types.j_expr = new _context.TokContext("<tag>...</tag>", true, true);
  _types.types.jsxName = new _types.TokenType("jsxName");
  _types.types.jsxText = new _types.TokenType("jsxText", {beforeExpr: true});
  _types.types.jsxTagStart = new _types.TokenType("jsxTagStart");
  _types.types.jsxTagEnd = new _types.TokenType("jsxTagEnd");
  _types.types.jsxTagStart.updateContext = function() {
    this.state.context.push(_context.types.j_expr);
    this.state.context.push(_context.types.j_oTag);
    this.state.exprAllowed = false;
  };
  _types.types.jsxTagEnd.updateContext = function(prevType) {
    var out = this.state.context.pop();
    if (out === _context.types.j_oTag && prevType === _types.types.slash || out === _context.types.j_cTag) {
      this.state.context.pop();
      this.state.exprAllowed = this.curContext() === _context.types.j_expr;
    } else {
      this.state.exprAllowed = true;
    }
  };
  var pp = _parser2.default.prototype;
  pp.jsxReadToken = function() {
    var out = "";
    var chunkStart = this.state.pos;
    for (; ; ) {
      if (this.state.pos >= this.input.length) {
        this.raise(this.state.start, "Unterminated JSX contents");
      }
      var ch = this.input.charCodeAt(this.state.pos);
      switch (ch) {
        case 60:
        case 123:
          if (this.state.pos === this.state.start) {
            if (ch === 60 && this.state.exprAllowed) {
              ++this.state.pos;
              return this.finishToken(_types.types.jsxTagStart);
            }
            return this.getTokenFromCode(ch);
          }
          out += this.input.slice(chunkStart, this.state.pos);
          return this.finishToken(_types.types.jsxText, out);
        case 38:
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
          break;
        default:
          if ((0, _whitespace.isNewLine)(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(true);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
      }
    }
  };
  pp.jsxReadNewLine = function(normalizeCRLF) {
    var ch = this.input.charCodeAt(this.state.pos);
    var out = void 0;
    ++this.state.pos;
    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
      ++this.state.pos;
      out = normalizeCRLF ? "\n" : "\r\n";
    } else {
      out = String.fromCharCode(ch);
    }
    ++this.state.curLine;
    this.state.lineStart = this.state.pos;
    return out;
  };
  pp.jsxReadString = function(quote) {
    var out = "";
    var chunkStart = ++this.state.pos;
    for (; ; ) {
      if (this.state.pos >= this.input.length) {
        this.raise(this.state.start, "Unterminated string constant");
      }
      var ch = this.input.charCodeAt(this.state.pos);
      if (ch === quote)
        break;
      if (ch === 38) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadEntity();
        chunkStart = this.state.pos;
      } else if ((0, _whitespace.isNewLine)(ch)) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadNewLine(false);
        chunkStart = this.state.pos;
      } else {
        ++this.state.pos;
      }
    }
    out += this.input.slice(chunkStart, this.state.pos++);
    return this.finishToken(_types.types.string, out);
  };
  pp.jsxReadEntity = function() {
    var str = "";
    var count = 0;
    var entity = void 0;
    var ch = this.input[this.state.pos];
    var startPos = ++this.state.pos;
    while (this.state.pos < this.input.length && count++ < 10) {
      ch = this.input[this.state.pos++];
      if (ch === ";") {
        if (str[0] === "#") {
          if (str[1] === "x") {
            str = str.substr(2);
            if (HEX_NUMBER.test(str))
              entity = String.fromCharCode(parseInt(str, 16));
          } else {
            str = str.substr(1);
            if (DECIMAL_NUMBER.test(str))
              entity = String.fromCharCode(parseInt(str, 10));
          }
        } else {
          entity = _xhtml2.default[str];
        }
        break;
      }
      str += ch;
    }
    if (!entity) {
      this.state.pos = startPos;
      return "&";
    }
    return entity;
  };
  pp.jsxReadWord = function() {
    var ch = void 0;
    var start = this.state.pos;
    do {
      ch = this.input.charCodeAt(++this.state.pos);
    } while ((0, _identifier.isIdentifierChar)(ch) || ch === 45);
    return this.finishToken(_types.types.jsxName, this.input.slice(start, this.state.pos));
  };
  function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
      return object.name;
    }
    if (object.type === "JSXNamespacedName") {
      return object.namespace.name + ":" + object.name.name;
    }
    if (object.type === "JSXMemberExpression") {
      return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
  }
  pp.jsxParseIdentifier = function() {
    var node = this.startNode();
    if (this.match(_types.types.jsxName)) {
      node.name = this.state.value;
    } else if (this.state.type.keyword) {
      node.name = this.state.type.keyword;
    } else {
      this.unexpected();
    }
    this.next();
    return this.finishNode(node, "JSXIdentifier");
  };
  pp.jsxParseNamespacedName = function() {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var name = this.jsxParseIdentifier();
    if (!this.eat(_types.types.colon))
      return name;
    var node = this.startNodeAt(startPos, startLoc);
    node.namespace = name;
    node.name = this.jsxParseIdentifier();
    return this.finishNode(node, "JSXNamespacedName");
  };
  pp.jsxParseElementName = function() {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    var node = this.jsxParseNamespacedName();
    while (this.eat(_types.types.dot)) {
      var newNode = this.startNodeAt(startPos, startLoc);
      newNode.object = node;
      newNode.property = this.jsxParseIdentifier();
      node = this.finishNode(newNode, "JSXMemberExpression");
    }
    return node;
  };
  pp.jsxParseAttributeValue = function() {
    var node = void 0;
    switch (this.state.type) {
      case _types.types.braceL:
        node = this.jsxParseExpressionContainer();
        if (node.expression.type === "JSXEmptyExpression") {
          this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
        } else {
          return node;
        }
      case _types.types.jsxTagStart:
      case _types.types.string:
        node = this.parseExprAtom();
        node.extra = null;
        return node;
      default:
        this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
    }
  };
  pp.jsxParseEmptyExpression = function() {
    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
    return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
  };
  pp.jsxParseExpressionContainer = function() {
    var node = this.startNode();
    this.next();
    if (this.match(_types.types.braceR)) {
      node.expression = this.jsxParseEmptyExpression();
    } else {
      node.expression = this.parseExpression();
    }
    this.expect(_types.types.braceR);
    return this.finishNode(node, "JSXExpressionContainer");
  };
  pp.jsxParseAttribute = function() {
    var node = this.startNode();
    if (this.eat(_types.types.braceL)) {
      this.expect(_types.types.ellipsis);
      node.argument = this.parseMaybeAssign();
      this.expect(_types.types.braceR);
      return this.finishNode(node, "JSXSpreadAttribute");
    }
    node.name = this.jsxParseNamespacedName();
    node.value = this.eat(_types.types.eq) ? this.jsxParseAttributeValue() : null;
    return this.finishNode(node, "JSXAttribute");
  };
  pp.jsxParseOpeningElementAt = function(startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.attributes = [];
    node.name = this.jsxParseElementName();
    while (!this.match(_types.types.slash) && !this.match(_types.types.jsxTagEnd)) {
      node.attributes.push(this.jsxParseAttribute());
    }
    node.selfClosing = this.eat(_types.types.slash);
    this.expect(_types.types.jsxTagEnd);
    return this.finishNode(node, "JSXOpeningElement");
  };
  pp.jsxParseClosingElementAt = function(startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    node.name = this.jsxParseElementName();
    this.expect(_types.types.jsxTagEnd);
    return this.finishNode(node, "JSXClosingElement");
  };
  pp.jsxParseElementAt = function(startPos, startLoc) {
    var node = this.startNodeAt(startPos, startLoc);
    var children = [];
    var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
    var closingElement = null;
    if (!openingElement.selfClosing) {
      contents: for (; ; ) {
        switch (this.state.type) {
          case _types.types.jsxTagStart:
            startPos = this.state.start;
            startLoc = this.state.startLoc;
            this.next();
            if (this.eat(_types.types.slash)) {
              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
              break contents;
            }
            children.push(this.jsxParseElementAt(startPos, startLoc));
            break;
          case _types.types.jsxText:
            children.push(this.parseExprAtom());
            break;
          case _types.types.braceL:
            children.push(this.jsxParseExpressionContainer());
            break;
          default:
            this.unexpected();
        }
      }
      if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
        this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
      }
    }
    node.openingElement = openingElement;
    node.closingElement = closingElement;
    node.children = children;
    if (this.match(_types.types.relational) && this.state.value === "<") {
      this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
    }
    return this.finishNode(node, "JSXElement");
  };
  pp.jsxParseElement = function() {
    var startPos = this.state.start,
        startLoc = this.state.startLoc;
    this.next();
    return this.jsxParseElementAt(startPos, startLoc);
  };
  return module.exports;
});

$__System.registerDynamic("a2", ["156", "154", "158", "159", "15b", "15c", "15f", "160", "155", "178", "176", "161", "179"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.tokTypes = undefined;
  exports.parse = parse;
  var _parser = $__require('156');
  var _parser2 = _interopRequireDefault(_parser);
  $__require('154');
  $__require('158');
  $__require('159');
  $__require('15b');
  $__require('15c');
  $__require('15f');
  $__require('160');
  var _types = $__require('155');
  $__require('178');
  $__require('176');
  var _flow = $__require('161');
  var _flow2 = _interopRequireDefault(_flow);
  var _jsx = $__require('179');
  var _jsx2 = _interopRequireDefault(_jsx);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  _parser.plugins.flow = _flow2.default;
  _parser.plugins.jsx = _jsx2.default;
  function parse(input, options) {
    return new _parser2.default(options, input).parse();
  }
  exports.tokTypes = _types.types;
  return module.exports;
});

$__System.registerDynamic("17a", ["f", "a0", "18", "145", "a2", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.replaceWithMultiple = replaceWithMultiple;
  exports.replaceWithSourceString = replaceWithSourceString;
  exports.replaceWith = replaceWith;
  exports._replaceWith = _replaceWith;
  exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
  exports.replaceInline = replaceInline;
  var _babelCodeFrame = $__require('a0');
  var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);
  var _index = $__require('18');
  var _index2 = _interopRequireDefault(_index);
  var _index3 = $__require('145');
  var _index4 = _interopRequireDefault(_index3);
  var _babylon = $__require('a2');
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var hoistVariablesVisitor = {
    Function: function Function(path) {
      path.skip();
    },
    VariableDeclaration: function VariableDeclaration(path) {
      if (path.node.kind !== "var")
        return;
      var bindings = path.getBindingIdentifiers();
      for (var key in bindings) {
        path.scope.push({id: bindings[key]});
      }
      var exprs = [];
      for (var _iterator = path.node.declarations,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var declar = _ref;
        if (declar.init) {
          exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
        }
      }
      path.replaceWithMultiple(exprs);
    }
  };
  function replaceWithMultiple(nodes) {
    this.resync();
    nodes = this._verifyNodeList(nodes);
    t.inheritLeadingComments(nodes[0], this.node);
    t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
    this.node = this.container[this.key] = null;
    this.insertAfter(nodes);
    if (this.node) {
      this.requeue();
    } else {
      this.remove();
    }
  }
  function replaceWithSourceString(replacement) {
    this.resync();
    try {
      replacement = "(" + replacement + ")";
      replacement = (0, _babylon.parse)(replacement);
    } catch (err) {
      var loc = err.loc;
      if (loc) {
        err.message += " - make sure this is an expression.";
        err.message += "\n" + (0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);
      }
      throw err;
    }
    replacement = replacement.program.body[0].expression;
    _index2.default.removeProperties(replacement);
    return this.replaceWith(replacement);
  }
  function replaceWith(replacement) {
    this.resync();
    if (this.removed) {
      throw new Error("You can't replace this node, we've already removed it");
    }
    if (replacement instanceof _index4.default) {
      replacement = replacement.node;
    }
    if (!replacement) {
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    }
    if (this.node === replacement) {
      return;
    }
    if (this.isProgram() && !t.isProgram(replacement)) {
      throw new Error("You can only replace a Program root node with another Program node");
    }
    if (Array.isArray(replacement)) {
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    }
    if (typeof replacement === "string") {
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    }
    if (this.isNodeType("Statement") && t.isExpression(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
        replacement = t.expressionStatement(replacement);
      }
    }
    if (this.isNodeType("Expression") && t.isStatement(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
        return this.replaceExpressionWithStatements([replacement]);
      }
    }
    var oldNode = this.node;
    if (oldNode) {
      t.inheritsComments(replacement, oldNode);
      t.removeComments(oldNode);
    }
    this._replaceWith(replacement);
    this.type = replacement.type;
    this.setScope();
    this.requeue();
  }
  function _replaceWith(node) {
    if (!this.container) {
      throw new ReferenceError("Container is falsy");
    }
    if (this.inList) {
      t.validate(this.parent, this.key, [node]);
    } else {
      t.validate(this.parent, this.key, node);
    }
    this.debug(function() {
      return "Replace with " + (node && node.type);
    });
    this.node = this.container[this.key] = node;
  }
  function replaceExpressionWithStatements(nodes) {
    this.resync();
    var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);
    if (t.isSequenceExpression(toSequenceExpression)) {
      var exprs = toSequenceExpression.expressions;
      if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
        this._maybePopFromStatements(exprs);
      }
      if (exprs.length === 1) {
        this.replaceWith(exprs[0]);
      } else {
        this.replaceWith(toSequenceExpression);
      }
    } else if (toSequenceExpression) {
      this.replaceWith(toSequenceExpression);
    } else {
      var container = t.functionExpression(null, [], t.blockStatement(nodes));
      container.shadow = true;
      this.replaceWith(t.callExpression(container, []));
      this.traverse(hoistVariablesVisitor);
      var completionRecords = this.get("callee").getCompletionRecords();
      for (var _iterator2 = completionRecords,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var path = _ref2;
        if (!path.isExpressionStatement())
          continue;
        var loop = path.findParent(function(path) {
          return path.isLoop();
        });
        if (loop) {
          var callee = this.get("callee");
          var uid = callee.scope.generateDeclaredUidIdentifier("ret");
          callee.get("body").pushContainer("body", t.returnStatement(uid));
          path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
        } else {
          path.replaceWith(t.returnStatement(path.node.expression));
        }
      }
      return this.node;
    }
  }
  function replaceInline(nodes) {
    this.resync();
    if (Array.isArray(nodes)) {
      if (Array.isArray(this.container)) {
        nodes = this._verifyNodeList(nodes);
        this._containerInsertAfter(nodes);
        return this.remove();
      } else {
        return this.replaceWithMultiple(nodes);
      }
    } else {
      return this.replaceWith(nodes);
    }
  }
  return module.exports;
});

$__System.registerDynamic("17b", ["29", "f", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.evaluateTruthy = evaluateTruthy;
  exports.evaluate = evaluate;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var VALID_CALLEES = ["String", "Number", "Math"];
  var INVALID_METHODS = ["random"];
  function evaluateTruthy() {
    var res = this.evaluate();
    if (res.confident)
      return !!res.value;
  }
  function evaluate() {
    var confident = true;
    var deoptPath = void 0;
    function deopt(path) {
      if (!confident)
        return;
      deoptPath = path;
      confident = false;
    }
    var value = evaluate(this);
    if (!confident)
      value = undefined;
    return {
      confident: confident,
      deopt: deoptPath,
      value: value
    };
    function evaluate(path) {
      if (!confident)
        return;
      var node = path.node;
      if (path.isSequenceExpression()) {
        var exprs = path.get("expressions");
        return evaluate(exprs[exprs.length - 1]);
      }
      if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
        return node.value;
      }
      if (path.isNullLiteral()) {
        return null;
      }
      if (path.isTemplateLiteral()) {
        var str = "";
        var i = 0;
        var _exprs = path.get("expressions");
        for (var _iterator = node.quasis,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var elem = _ref;
          if (!confident)
            break;
          str += elem.value.cooked;
          var expr = _exprs[i++];
          if (expr)
            str += String(evaluate(expr));
        }
        if (!confident)
          return;
        return str;
      }
      if (path.isConditionalExpression()) {
        var testResult = evaluate(path.get("test"));
        if (!confident)
          return;
        if (testResult) {
          return evaluate(path.get("consequent"));
        } else {
          return evaluate(path.get("alternate"));
        }
      }
      if (path.isExpressionWrapper()) {
        return evaluate(path.get("expression"));
      }
      if (path.isMemberExpression() && !path.parentPath.isCallExpression({callee: node})) {
        var property = path.get("property");
        var object = path.get("object");
        if (object.isLiteral() && property.isIdentifier()) {
          var _value = object.node.value;
          var type = typeof _value === "undefined" ? "undefined" : (0, _typeof3.default)(_value);
          if (type === "number" || type === "string") {
            return _value[property.node.name];
          }
        }
      }
      if (path.isReferencedIdentifier()) {
        var binding = path.scope.getBinding(node.name);
        if (binding && binding.hasValue) {
          return binding.value;
        } else {
          if (node.name === "undefined") {
            return undefined;
          } else if (node.name === "Infinity") {
            return Infinity;
          } else if (node.name === "NaN") {
            return NaN;
          }
          var resolved = path.resolve();
          if (resolved === path) {
            return deopt(path);
          } else {
            return evaluate(resolved);
          }
        }
      }
      if (path.isUnaryExpression({prefix: true})) {
        if (node.operator === "void") {
          return undefined;
        }
        var argument = path.get("argument");
        if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
          return "function";
        }
        var arg = evaluate(argument);
        if (!confident)
          return;
        switch (node.operator) {
          case "!":
            return !arg;
          case "+":
            return +arg;
          case "-":
            return -arg;
          case "~":
            return ~arg;
          case "typeof":
            return (typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg));
        }
      }
      if (path.isArrayExpression()) {
        var arr = [];
        var elems = path.get("elements");
        for (var _iterator2 = elems,
            _isArray2 = Array.isArray(_iterator2),
            _i2 = 0,
            _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
          var _ref2;
          if (_isArray2) {
            if (_i2 >= _iterator2.length)
              break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done)
              break;
            _ref2 = _i2.value;
          }
          var _elem = _ref2;
          _elem = _elem.evaluate();
          if (_elem.confident) {
            arr.push(_elem.value);
          } else {
            return deopt(_elem);
          }
        }
        return arr;
      }
      if (path.isObjectExpression()) {}
      if (path.isLogicalExpression()) {
        var wasConfident = confident;
        var left = evaluate(path.get("left"));
        var leftConfident = confident;
        confident = wasConfident;
        var right = evaluate(path.get("right"));
        var rightConfident = confident;
        confident = leftConfident && rightConfident;
        switch (node.operator) {
          case "||":
            if (left && leftConfident) {
              confident = true;
              return left;
            }
            if (!confident)
              return;
            return left || right;
          case "&&":
            if (!left && leftConfident || !right && rightConfident) {
              confident = true;
            }
            if (!confident)
              return;
            return left && right;
        }
      }
      if (path.isBinaryExpression()) {
        var _left = evaluate(path.get("left"));
        if (!confident)
          return;
        var _right = evaluate(path.get("right"));
        if (!confident)
          return;
        switch (node.operator) {
          case "-":
            return _left - _right;
          case "+":
            return _left + _right;
          case "/":
            return _left / _right;
          case "*":
            return _left * _right;
          case "%":
            return _left % _right;
          case "**":
            return (Math.pow(_left, _right));
          case "<":
            return _left < _right;
          case ">":
            return _left > _right;
          case "<=":
            return _left <= _right;
          case ">=":
            return _left >= _right;
          case "==":
            return _left == _right;
          case "!=":
            return _left != _right;
          case "===":
            return _left === _right;
          case "!==":
            return _left !== _right;
          case "|":
            return _left | _right;
          case "&":
            return _left & _right;
          case "^":
            return _left ^ _right;
          case "<<":
            return _left << _right;
          case ">>":
            return _left >> _right;
          case ">>>":
            return _left >>> _right;
        }
      }
      if (path.isCallExpression()) {
        var callee = path.get("callee");
        var context = void 0;
        var func = void 0;
        if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
          func = global[node.callee.name];
        }
        if (callee.isMemberExpression()) {
          var _object = callee.get("object");
          var _property = callee.get("property");
          if (_object.isIdentifier() && _property.isIdentifier() && VALID_CALLEES.indexOf(_object.node.name) >= 0 && INVALID_METHODS.indexOf(_property.node.name) < 0) {
            context = global[_object.node.name];
            func = context[_property.node.name];
          }
          if (_object.isLiteral() && _property.isIdentifier()) {
            var _type = (0, _typeof3.default)(_object.node.value);
            if (_type === "string" || _type === "number") {
              context = _object.node.value;
              func = context[_property.node.name];
            }
          }
        }
        if (func) {
          var args = path.get("arguments").map(evaluate);
          if (!confident)
            return;
          return func.apply(context, args);
        }
      }
      deopt(path);
    }
  }
  return module.exports;
});

$__System.registerDynamic("17c", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.toComputedKey = toComputedKey;
  exports.ensureBlock = ensureBlock;
  exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function toComputedKey() {
    var node = this.node;
    var key = void 0;
    if (this.isMemberExpression()) {
      key = node.property;
    } else if (this.isProperty() || this.isMethod()) {
      key = node.key;
    } else {
      throw new ReferenceError("todo");
    }
    if (!node.computed) {
      if (t.isIdentifier(key))
        key = t.stringLiteral(key.name);
    }
    return key;
  }
  function ensureBlock() {
    return t.ensureBlock(this.node);
  }
  function arrowFunctionToShadowed() {
    if (!this.isArrowFunctionExpression())
      return;
    this.ensureBlock();
    var node = this.node;
    node.expression = false;
    node.type = "FunctionExpression";
    node.shadow = node.shadow || true;
  }
  return module.exports;
});

$__System.registerDynamic("17d", ["29", "f", "60", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.is = undefined;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.matchesPattern = matchesPattern;
  exports.has = has;
  exports.isStatic = isStatic;
  exports.isnt = isnt;
  exports.equals = equals;
  exports.isNodeType = isNodeType;
  exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
  exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
  exports.isCompletionRecord = isCompletionRecord;
  exports.isStatementOrBlock = isStatementOrBlock;
  exports.referencesImport = referencesImport;
  exports.getSource = getSource;
  exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
  exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
  exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
  exports.resolve = resolve;
  exports._resolve = _resolve;
  var _includes = $__require('60');
  var _includes2 = _interopRequireDefault(_includes);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function matchesPattern(pattern, allowPartial) {
    if (!this.isMemberExpression())
      return false;
    var parts = pattern.split(".");
    var search = [this.node];
    var i = 0;
    function matches(name) {
      var part = parts[i];
      return part === "*" || name === part;
    }
    while (search.length) {
      var node = search.shift();
      if (allowPartial && i === parts.length) {
        return true;
      }
      if (t.isIdentifier(node)) {
        if (!matches(node.name))
          return false;
      } else if (t.isLiteral(node)) {
        if (!matches(node.value))
          return false;
      } else if (t.isMemberExpression(node)) {
        if (node.computed && !t.isLiteral(node.property)) {
          return false;
        } else {
          search.unshift(node.property);
          search.unshift(node.object);
          continue;
        }
      } else if (t.isThisExpression(node)) {
        if (!matches("this"))
          return false;
      } else {
        return false;
      }
      if (++i > parts.length) {
        return false;
      }
    }
    return i === parts.length;
  }
  function has(key) {
    var val = this.node && this.node[key];
    if (val && Array.isArray(val)) {
      return !!val.length;
    } else {
      return !!val;
    }
  }
  function isStatic() {
    return this.scope.isStatic(this.node);
  }
  var is = exports.is = has;
  function isnt(key) {
    return !this.has(key);
  }
  function equals(key, value) {
    return this.node[key] === value;
  }
  function isNodeType(type) {
    return t.isType(this.type, type);
  }
  function canHaveVariableDeclarationOrExpression() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }
  function canSwapBetweenExpressionAndStatement(replacement) {
    if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
      return false;
    }
    if (this.isExpression()) {
      return t.isBlockStatement(replacement);
    } else if (this.isBlockStatement()) {
      return t.isExpression(replacement);
    }
    return false;
  }
  function isCompletionRecord(allowInsideFunction) {
    var path = this;
    var first = true;
    do {
      var container = path.container;
      if (path.isFunction() && !first) {
        return !!allowInsideFunction;
      }
      first = false;
      if (Array.isArray(container) && path.key !== container.length - 1) {
        return false;
      }
    } while ((path = path.parentPath) && !path.isProgram());
    return true;
  }
  function isStatementOrBlock() {
    if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
      return false;
    } else {
      return ((0, _includes2.default)(t.STATEMENT_OR_BLOCK_KEYS, this.key));
    }
  }
  function referencesImport(moduleSource, importName) {
    if (!this.isReferencedIdentifier())
      return false;
    var binding = this.scope.getBinding(this.node.name);
    if (!binding || binding.kind !== "module")
      return false;
    var path = binding.path;
    var parent = path.parentPath;
    if (!parent.isImportDeclaration())
      return false;
    if (parent.node.source.value === moduleSource) {
      if (!importName)
        return true;
    } else {
      return false;
    }
    if (path.isImportDefaultSpecifier() && importName === "default") {
      return true;
    }
    if (path.isImportNamespaceSpecifier() && importName === "*") {
      return true;
    }
    if (path.isImportSpecifier() && path.node.imported.name === importName) {
      return true;
    }
    return false;
  }
  function getSource() {
    var node = this.node;
    if (node.end) {
      return this.hub.file.code.slice(node.start, node.end);
    } else {
      return "";
    }
  }
  function willIMaybeExecuteBefore(target) {
    return this._guessExecutionStatusRelativeTo(target) !== "after";
  }
  function _guessExecutionStatusRelativeTo(target) {
    var targetFuncParent = target.scope.getFunctionParent();
    var selfFuncParent = this.scope.getFunctionParent();
    if (targetFuncParent.node !== selfFuncParent.node) {
      var status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
      if (status) {
        return status;
      } else {
        target = targetFuncParent.path;
      }
    }
    var targetPaths = target.getAncestry();
    if (targetPaths.indexOf(this) >= 0)
      return "after";
    var selfPaths = this.getAncestry();
    var commonPath = void 0;
    var targetIndex = void 0;
    var selfIndex = void 0;
    for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
      var selfPath = selfPaths[selfIndex];
      targetIndex = targetPaths.indexOf(selfPath);
      if (targetIndex >= 0) {
        commonPath = selfPath;
        break;
      }
    }
    if (!commonPath) {
      return "before";
    }
    var targetRelationship = targetPaths[targetIndex - 1];
    var selfRelationship = selfPaths[selfIndex - 1];
    if (!targetRelationship || !selfRelationship) {
      return "before";
    }
    if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
      return targetRelationship.key > selfRelationship.key ? "before" : "after";
    }
    var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
    var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
    return targetKeyPosition > selfKeyPosition ? "before" : "after";
  }
  function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
    var targetFuncPath = targetFuncParent.path;
    if (!targetFuncPath.isFunctionDeclaration())
      return;
    var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);
    if (!binding.references)
      return "before";
    var referencePaths = binding.referencePaths;
    for (var _iterator = referencePaths,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var path = _ref;
      if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
        return;
      }
    }
    var allStatus = void 0;
    for (var _iterator2 = referencePaths,
        _isArray2 = Array.isArray(_iterator2),
        _i2 = 0,
        _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
      var _ref2;
      if (_isArray2) {
        if (_i2 >= _iterator2.length)
          break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done)
          break;
        _ref2 = _i2.value;
      }
      var _path = _ref2;
      var childOfFunction = !!_path.find(function(path) {
        return path.node === targetFuncPath.node;
      });
      if (childOfFunction)
        continue;
      var status = this._guessExecutionStatusRelativeTo(_path);
      if (allStatus) {
        if (allStatus !== status)
          return;
      } else {
        allStatus = status;
      }
    }
    return allStatus;
  }
  function resolve(dangerous, resolved) {
    return this._resolve(dangerous, resolved) || this;
  }
  function _resolve(dangerous, resolved) {
    var _this = this;
    if (resolved && resolved.indexOf(this) >= 0)
      return;
    resolved = resolved || [];
    resolved.push(this);
    if (this.isVariableDeclarator()) {
      if (this.get("id").isIdentifier()) {
        return this.get("init").resolve(dangerous, resolved);
      } else {}
    } else if (this.isReferencedIdentifier()) {
      var binding = this.scope.getBinding(this.node.name);
      if (!binding)
        return;
      if (!binding.constant)
        return;
      if (binding.kind === "module")
        return;
      if (binding.path !== this) {
        var _ret = function() {
          var ret = binding.path.resolve(dangerous, resolved);
          if (_this.find(function(parent) {
            return parent.node === ret.node;
          }))
            return ({v: void 0});
          return ({v: ret});
        }();
        if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object")
          return _ret.v;
      }
    } else if (this.isTypeCastExpression()) {
      return this.get("expression").resolve(dangerous, resolved);
    } else if (dangerous && this.isMemberExpression()) {
      var targetKey = this.toComputedKey();
      if (!t.isLiteral(targetKey))
        return;
      var targetName = targetKey.value;
      var target = this.get("object").resolve(dangerous, resolved);
      if (target.isObjectExpression()) {
        var props = target.get("properties");
        for (var _iterator3 = props,
            _isArray3 = Array.isArray(_iterator3),
            _i3 = 0,
            _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
          var _ref3;
          if (_isArray3) {
            if (_i3 >= _iterator3.length)
              break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done)
              break;
            _ref3 = _i3.value;
          }
          var prop = _ref3;
          if (!prop.isProperty())
            continue;
          var key = prop.get("key");
          var match = prop.isnt("computed") && key.isIdentifier({name: targetName});
          match = match || key.isLiteral({value: targetName});
          if (match)
            return prop.get("value").resolve(dangerous, resolved);
        }
      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
        var elems = target.get("elements");
        var elem = elems[targetName];
        if (elem)
          return elem.resolve(dangerous, resolved);
      }
    }
  }
  return module.exports;
});

$__System.registerDynamic("17e", ["f", "18", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.call = call;
  exports._call = _call;
  exports.isBlacklisted = isBlacklisted;
  exports.visit = visit;
  exports.skip = skip;
  exports.skipKey = skipKey;
  exports.stop = stop;
  exports.setScope = setScope;
  exports.setContext = setContext;
  exports.resync = resync;
  exports._resyncParent = _resyncParent;
  exports._resyncKey = _resyncKey;
  exports._resyncList = _resyncList;
  exports._resyncRemoved = _resyncRemoved;
  exports.popContext = popContext;
  exports.pushContext = pushContext;
  exports.setup = setup;
  exports.setKey = setKey;
  exports.requeue = requeue;
  exports._getQueueContexts = _getQueueContexts;
  var _index = $__require('18');
  var _index2 = _interopRequireDefault(_index);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function call(key) {
    var opts = this.opts;
    this.debug(function() {
      return key;
    });
    if (this.node) {
      if (this._call(opts[key]))
        return true;
    }
    if (this.node) {
      return this._call(opts[this.node.type] && opts[this.node.type][key]);
    }
    return false;
  }
  function _call(fns) {
    if (!fns)
      return false;
    for (var _iterator = fns,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var fn = _ref;
      if (!fn)
        continue;
      var node = this.node;
      if (!node)
        return true;
      var ret = fn.call(this.state, this, this.state);
      if (ret)
        throw new Error("Unexpected return value from visitor method " + fn);
      if (this.node !== node)
        return true;
      if (this.shouldStop || this.shouldSkip || this.removed)
        return true;
    }
    return false;
  }
  function isBlacklisted() {
    var blacklist = this.opts.blacklist;
    return blacklist && blacklist.indexOf(this.node.type) > -1;
  }
  function visit() {
    if (!this.node) {
      return false;
    }
    if (this.isBlacklisted()) {
      return false;
    }
    if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
      return false;
    }
    if (this.call("enter") || this.shouldSkip) {
      this.debug(function() {
        return "Skip...";
      });
      return this.shouldStop;
    }
    this.debug(function() {
      return "Recursing into...";
    });
    _index2.default.node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
    this.call("exit");
    return this.shouldStop;
  }
  function skip() {
    this.shouldSkip = true;
  }
  function skipKey(key) {
    this.skipKeys[key] = true;
  }
  function stop() {
    this.shouldStop = true;
    this.shouldSkip = true;
  }
  function setScope() {
    if (this.opts && this.opts.noScope)
      return;
    var target = this.context && this.context.scope;
    if (!target) {
      var path = this.parentPath;
      while (path && !target) {
        if (path.opts && path.opts.noScope)
          return;
        target = path.scope;
        path = path.parentPath;
      }
    }
    this.scope = this.getScope(target);
    if (this.scope)
      this.scope.init();
  }
  function setContext(context) {
    this.shouldSkip = false;
    this.shouldStop = false;
    this.removed = false;
    this.skipKeys = {};
    if (context) {
      this.context = context;
      this.state = context.state;
      this.opts = context.opts;
    }
    this.setScope();
    return this;
  }
  function resync() {
    if (this.removed)
      return;
    this._resyncParent();
    this._resyncList();
    this._resyncKey();
  }
  function _resyncParent() {
    if (this.parentPath) {
      this.parent = this.parentPath.node;
    }
  }
  function _resyncKey() {
    if (!this.container)
      return;
    if (this.node === this.container[this.key])
      return;
    if (Array.isArray(this.container)) {
      for (var i = 0; i < this.container.length; i++) {
        if (this.container[i] === this.node) {
          return this.setKey(i);
        }
      }
    } else {
      for (var key in this.container) {
        if (this.container[key] === this.node) {
          return this.setKey(key);
        }
      }
    }
    this.key = null;
  }
  function _resyncList() {
    if (!this.parent || !this.inList)
      return;
    var newContainer = this.parent[this.listKey];
    if (this.container === newContainer)
      return;
    this.container = newContainer || null;
  }
  function _resyncRemoved() {
    if (this.key == null || !this.container || this.container[this.key] !== this.node) {
      this._markRemoved();
    }
  }
  function popContext() {
    this.contexts.pop();
    this.setContext(this.contexts[this.contexts.length - 1]);
  }
  function pushContext(context) {
    this.contexts.push(context);
    this.setContext(context);
  }
  function setup(parentPath, container, listKey, key) {
    this.inList = !!listKey;
    this.listKey = listKey;
    this.parentKey = listKey || key;
    this.container = container;
    this.parentPath = parentPath || this.parentPath;
    this.setKey(key);
  }
  function setKey(key) {
    this.key = key;
    this.node = this.container[this.key];
    this.type = this.node && this.node.type;
  }
  function requeue() {
    var pathToQueue = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];
    if (pathToQueue.removed)
      return;
    var contexts = this.contexts;
    for (var _iterator2 = contexts,
        _isArray2 = Array.isArray(_iterator2),
        _i2 = 0,
        _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
      var _ref2;
      if (_isArray2) {
        if (_i2 >= _iterator2.length)
          break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done)
          break;
        _ref2 = _i2.value;
      }
      var context = _ref2;
      context.maybeQueue(pathToQueue);
    }
  }
  function _getQueueContexts() {
    var path = this;
    var contexts = this.contexts;
    while (!contexts.length) {
      path = path.parentPath;
      contexts = path.contexts;
    }
    return contexts;
  }
  return module.exports;
});

$__System.registerDynamic("17f", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var hooks = exports.hooks = [function(self, parent) {
    if (self.key === "body" && parent.isArrowFunctionExpression()) {
      self.replaceWith(self.scope.buildUndefinedNode());
      return true;
    }
  }, function(self, parent) {
    var removeParent = false;
    removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());
    removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();
    removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();
    removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;
    removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();
    if (removeParent) {
      parent.remove();
      return true;
    }
  }, function(self, parent) {
    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
      parent.replaceWith(parent.node.expressions[0]);
      return true;
    }
  }, function(self, parent) {
    if (parent.isBinary()) {
      if (self.key === "left") {
        parent.replaceWith(parent.node.right);
      } else {
        parent.replaceWith(parent.node.left);
      }
      return true;
    }
  }];
  return module.exports;
});

$__System.registerDynamic("180", ["f", "17f", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.remove = remove;
  exports._callRemovalHooks = _callRemovalHooks;
  exports._remove = _remove;
  exports._markRemoved = _markRemoved;
  exports._assertUnremoved = _assertUnremoved;
  var _removalHooks = $__require('17f');
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function remove() {
    this._assertUnremoved();
    this.resync();
    if (this._callRemovalHooks()) {
      this._markRemoved();
      return;
    }
    this.shareCommentsWithSiblings();
    this._remove();
    this._markRemoved();
  }
  function _callRemovalHooks() {
    for (var _iterator = _removalHooks.hooks,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var fn = _ref;
      if (fn(this, this.parentPath))
        return true;
    }
  }
  function _remove() {
    if (Array.isArray(this.container)) {
      this.container.splice(this.key, 1);
      this.updateSiblingKeys(this.key, -1);
    } else {
      this._replaceWith(null);
    }
  }
  function _markRemoved() {
    this.shouldSkip = true;
    this.removed = true;
    this.node = null;
  }
  function _assertUnremoved() {
    if (this.removed) {
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
  }
  return module.exports;
});

$__System.registerDynamic("15", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  return module.exports;
});

$__System.registerDynamic("181", ["15", "f", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var referenceVisitor = {ReferencedIdentifier: function ReferencedIdentifier(path, state) {
      if (path.isJSXIdentifier() && _babelTypes.react.isCompatTag(path.node.name)) {
        return;
      }
      var binding = path.scope.getBinding(path.node.name);
      if (!binding)
        return;
      if (binding !== state.scope.getBinding(path.node.name))
        return;
      if (binding.constant) {
        state.bindings[path.node.name] = binding;
      } else {
        for (var _iterator = binding.constantViolations,
            _isArray = Array.isArray(_iterator),
            _i = 0,
            _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
          var _ref;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref = _i.value;
          }
          var violationPath = _ref;
          state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
        }
      }
    }};
  var PathHoister = function() {
    function PathHoister(path, scope) {
      (0, _classCallCheck3.default)(this, PathHoister);
      this.breakOnScopePaths = [];
      this.bindings = {};
      this.scopes = [];
      this.scope = scope;
      this.path = path;
    }
    PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
      for (var key in this.bindings) {
        var binding = this.bindings[key];
        if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
          return false;
        }
      }
      return true;
    };
    PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
      var scope = this.path.scope;
      do {
        if (this.isCompatibleScope(scope)) {
          this.scopes.push(scope);
        } else {
          break;
        }
        if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
          break;
        }
      } while (scope = scope.parent);
    };
    PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
      var scopes = this.scopes;
      var scope = scopes.pop();
      if (!scope)
        return;
      if (scope.path.isFunction()) {
        if (this.hasOwnParamBindings(scope)) {
          if (this.scope === scope)
            return;
          return scope.path.get("body").get("body")[0];
        } else {
          return this.getNextScopeStatementParent();
        }
      } else if (scope.path.isProgram()) {
        return this.getNextScopeStatementParent();
      }
    };
    PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
      var scope = this.scopes.pop();
      if (scope)
        return scope.path.getStatementParent();
    };
    PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
      for (var name in this.bindings) {
        if (!scope.hasOwnBinding(name))
          continue;
        var binding = this.bindings[name];
        if (binding.kind === "param")
          return true;
      }
      return false;
    };
    PathHoister.prototype.run = function run() {
      var node = this.path.node;
      if (node._hoisted)
        return;
      node._hoisted = true;
      this.path.traverse(referenceVisitor, this);
      this.getCompatibleScopes();
      var attachTo = this.getAttachmentPath();
      if (!attachTo)
        return;
      if (attachTo.getFunctionParent() === this.path.getFunctionParent())
        return;
      var uid = attachTo.scope.generateUidIdentifier("ref");
      attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);
      var parent = this.path.parentPath;
      if (parent.isJSXElement() && this.path.container === parent.node.children) {
        uid = t.JSXExpressionContainer(uid);
      }
      this.path.replaceWith(uid);
    };
    return PathHoister;
  }();
  exports.default = PathHoister;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("182", ["29", "f", "143", "181", "145", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.insertBefore = insertBefore;
  exports._containerInsert = _containerInsert;
  exports._containerInsertBefore = _containerInsertBefore;
  exports._containerInsertAfter = _containerInsertAfter;
  exports._maybePopFromStatements = _maybePopFromStatements;
  exports.insertAfter = insertAfter;
  exports.updateSiblingKeys = updateSiblingKeys;
  exports._verifyNodeList = _verifyNodeList;
  exports.unshiftContainer = unshiftContainer;
  exports.pushContainer = pushContainer;
  exports.hoist = hoist;
  var _cache = $__require('143');
  var _hoister = $__require('181');
  var _hoister2 = _interopRequireDefault(_hoister);
  var _index = $__require('145');
  var _index2 = _interopRequireDefault(_index);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function insertBefore(nodes) {
    this._assertUnremoved();
    nodes = this._verifyNodeList(nodes);
    if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
      return this.parentPath.insertBefore(nodes);
    } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
      if (this.node)
        nodes.push(this.node);
      this.replaceExpressionWithStatements(nodes);
    } else {
      this._maybePopFromStatements(nodes);
      if (Array.isArray(this.container)) {
        return this._containerInsertBefore(nodes);
      } else if (this.isStatementOrBlock()) {
        if (this.node)
          nodes.push(this.node);
        this._replaceWith(t.blockStatement(nodes));
      } else {
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }
    }
    return [this];
  }
  function _containerInsert(from, nodes) {
    this.updateSiblingKeys(from, nodes.length);
    var paths = [];
    for (var i = 0; i < nodes.length; i++) {
      var to = from + i;
      var node = nodes[i];
      this.container.splice(to, 0, node);
      if (this.context) {
        var path = this.context.create(this.parent, this.container, to, this.listKey);
        if (this.context.queue)
          path.pushContext(this.context);
        paths.push(path);
      } else {
        paths.push(_index2.default.get({
          parentPath: this.parentPath,
          parent: this.parent,
          container: this.container,
          listKey: this.listKey,
          key: to
        }));
      }
    }
    var contexts = this._getQueueContexts();
    for (var _iterator = paths,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var _path = _ref;
      _path.setScope();
      _path.debug(function() {
        return "Inserted.";
      });
      for (var _iterator2 = contexts,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var context = _ref2;
        context.maybeQueue(_path, true);
      }
    }
    return paths;
  }
  function _containerInsertBefore(nodes) {
    return this._containerInsert(this.key, nodes);
  }
  function _containerInsertAfter(nodes) {
    return this._containerInsert(this.key + 1, nodes);
  }
  function _maybePopFromStatements(nodes) {
    var last = nodes[nodes.length - 1];
    var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);
    if (isIdentifier && !this.isCompletionRecord()) {
      nodes.pop();
    }
  }
  function insertAfter(nodes) {
    this._assertUnremoved();
    nodes = this._verifyNodeList(nodes);
    if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
      return this.parentPath.insertAfter(nodes);
    } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
      if (this.node) {
        var temp = this.scope.generateDeclaredUidIdentifier();
        nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
        nodes.push(t.expressionStatement(temp));
      }
      this.replaceExpressionWithStatements(nodes);
    } else {
      this._maybePopFromStatements(nodes);
      if (Array.isArray(this.container)) {
        return this._containerInsertAfter(nodes);
      } else if (this.isStatementOrBlock()) {
        if (this.node)
          nodes.unshift(this.node);
        this._replaceWith(t.blockStatement(nodes));
      } else {
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }
    }
    return [this];
  }
  function updateSiblingKeys(fromIndex, incrementBy) {
    if (!this.parent)
      return;
    var paths = _cache.path.get(this.parent);
    for (var i = 0; i < paths.length; i++) {
      var path = paths[i];
      if (path.key >= fromIndex) {
        path.key += incrementBy;
      }
    }
  }
  function _verifyNodeList(nodes) {
    if (!nodes) {
      return [];
    }
    if (nodes.constructor !== Array) {
      nodes = [nodes];
    }
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var msg = void 0;
      if (!node) {
        msg = "has falsy node";
      } else if ((typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node)) !== "object") {
        msg = "contains a non-object node";
      } else if (!node.type) {
        msg = "without a type";
      } else if (node instanceof _index2.default) {
        msg = "has a NodePath when it expected a raw object";
      }
      if (msg) {
        var type = Array.isArray(node) ? "array" : typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node);
        throw new Error("Node list " + msg + " with the index of " + i + " and type of " + type);
      }
    }
    return nodes;
  }
  function unshiftContainer(listKey, nodes) {
    this._assertUnremoved();
    nodes = this._verifyNodeList(nodes);
    var path = _index2.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[listKey],
      listKey: listKey,
      key: 0
    });
    return path.insertBefore(nodes);
  }
  function pushContainer(listKey, nodes) {
    this._assertUnremoved();
    nodes = this._verifyNodeList(nodes);
    var container = this.node[listKey];
    var path = _index2.default.get({
      parentPath: this,
      parent: this.node,
      container: container,
      listKey: listKey,
      key: container.length
    });
    return path.replaceWithMultiple(nodes);
  }
  function hoist() {
    var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];
    var hoister = new _hoister2.default(this, scope);
    return hoister.run();
  }
  return module.exports;
});

$__System.registerDynamic("183", ["f", "145", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.getStatementParent = getStatementParent;
  exports.getOpposite = getOpposite;
  exports.getCompletionRecords = getCompletionRecords;
  exports.getSibling = getSibling;
  exports.get = get;
  exports._getKey = _getKey;
  exports._getPattern = _getPattern;
  exports.getBindingIdentifiers = getBindingIdentifiers;
  exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
  var _index = $__require('145');
  var _index2 = _interopRequireDefault(_index);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function getStatementParent() {
    var path = this;
    do {
      if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
        break;
      } else {
        path = path.parentPath;
      }
    } while (path);
    if (path && (path.isProgram() || path.isFile())) {
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    }
    return path;
  }
  function getOpposite() {
    if (this.key === "left") {
      return this.getSibling("right");
    } else if (this.key === "right") {
      return this.getSibling("left");
    }
  }
  function getCompletionRecords() {
    var paths = [];
    var add = function add(path) {
      if (path)
        paths = paths.concat(path.getCompletionRecords());
    };
    if (this.isIfStatement()) {
      add(this.get("consequent"));
      add(this.get("alternate"));
    } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
      add(this.get("body"));
    } else if (this.isProgram() || this.isBlockStatement()) {
      add(this.get("body").pop());
    } else if (this.isFunction()) {
      return this.get("body").getCompletionRecords();
    } else if (this.isTryStatement()) {
      add(this.get("block"));
      add(this.get("handler"));
      add(this.get("finalizer"));
    } else {
      paths.push(this);
    }
    return paths;
  }
  function getSibling(key) {
    return (_index2.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key: key
    }));
  }
  function get(key, context) {
    if (context === true)
      context = this.context;
    var parts = key.split(".");
    if (parts.length === 1) {
      return this._getKey(key, context);
    } else {
      return this._getPattern(parts, context);
    }
  }
  function _getKey(key, context) {
    var _this = this;
    var node = this.node;
    var container = node[key];
    if (Array.isArray(container)) {
      return container.map(function(_, i) {
        return (_index2.default.get({
          listKey: key,
          parentPath: _this,
          parent: node,
          container: container,
          key: i
        }).setContext(context));
      });
    } else {
      return (_index2.default.get({
        parentPath: this,
        parent: node,
        container: node,
        key: key
      }).setContext(context));
    }
  }
  function _getPattern(parts, context) {
    var path = this;
    for (var _iterator = parts,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var part = _ref;
      if (part === ".") {
        path = path.parentPath;
      } else {
        if (Array.isArray(path)) {
          path = path[part];
        } else {
          path = path.get(part, context);
        }
      }
    }
    return path;
  }
  function getBindingIdentifiers(duplicates) {
    return t.getBindingIdentifiers(this.node, duplicates);
  }
  function getOuterBindingIdentifiers(duplicates) {
    return t.getOuterBindingIdentifiers(this.node, duplicates);
  }
  return module.exports;
});

$__System.registerDynamic("184", ["3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
  exports.addComment = addComment;
  exports.addComments = addComments;
  function shareCommentsWithSiblings() {
    var node = this.node;
    if (!node)
      return;
    var trailing = node.trailingComments;
    var leading = node.leadingComments;
    if (!trailing && !leading)
      return;
    var prev = this.getSibling(this.key - 1);
    var next = this.getSibling(this.key + 1);
    if (!prev.node)
      prev = next;
    if (!next.node)
      next = prev;
    prev.addComments("trailing", leading);
    next.addComments("leading", trailing);
  }
  function addComment(type, content, line) {
    this.addComments(type, [{
      type: line ? "CommentLine" : "CommentBlock",
      value: content
    }]);
  }
  function addComments(type, comments) {
    if (!comments)
      return;
    var node = this.node;
    if (!node)
      return;
    var key = type + "Comments";
    if (node[key]) {
      node[key] = node[key].concat(comments);
    } else {
      node[key] = comments;
    }
  }
  return module.exports;
});

$__System.registerDynamic("145", ["f", "15", "185", "47", "137", "18", "9c", "142", "9", "143", "144", "148", "17a", "17b", "17c", "17d", "17e", "180", "182", "183", "184", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _virtualTypes = $__require('185');
  var virtualTypes = _interopRequireWildcard(_virtualTypes);
  var _debug2 = $__require('47');
  var _debug3 = _interopRequireDefault(_debug2);
  var _invariant = $__require('137');
  var _invariant2 = _interopRequireDefault(_invariant);
  var _index = $__require('18');
  var _index2 = _interopRequireDefault(_index);
  var _assign = $__require('9c');
  var _assign2 = _interopRequireDefault(_assign);
  var _scope = $__require('142');
  var _scope2 = _interopRequireDefault(_scope);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _cache = $__require('143');
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var _debug = (0, _debug3.default)("babel");
  var NodePath = function() {
    function NodePath(hub, parent) {
      (0, _classCallCheck3.default)(this, NodePath);
      this.parent = parent;
      this.hub = hub;
      this.contexts = [];
      this.data = {};
      this.shouldSkip = false;
      this.shouldStop = false;
      this.removed = false;
      this.state = null;
      this.opts = null;
      this.skipKeys = null;
      this.parentPath = null;
      this.context = null;
      this.container = null;
      this.listKey = null;
      this.inList = false;
      this.parentKey = null;
      this.key = null;
      this.node = null;
      this.scope = null;
      this.type = null;
      this.typeAnnotation = null;
    }
    NodePath.get = function get(_ref) {
      var hub = _ref.hub;
      var parentPath = _ref.parentPath;
      var parent = _ref.parent;
      var container = _ref.container;
      var listKey = _ref.listKey;
      var key = _ref.key;
      if (!hub && parentPath) {
        hub = parentPath.hub;
      }
      (0, _invariant2.default)(parent, "To get a node path the parent needs to exist");
      var targetNode = container[key];
      var paths = _cache.path.get(parent) || [];
      if (!_cache.path.has(parent)) {
        _cache.path.set(parent, paths);
      }
      var path = void 0;
      for (var i = 0; i < paths.length; i++) {
        var pathCheck = paths[i];
        if (pathCheck.node === targetNode) {
          path = pathCheck;
          break;
        }
      }
      if (!path) {
        path = new NodePath(hub, parent);
        paths.push(path);
      }
      path.setup(parentPath, container, listKey, key);
      return path;
    };
    NodePath.prototype.getScope = function getScope(scope) {
      var ourScope = scope;
      if (this.isScope()) {
        ourScope = new _scope2.default(this, scope);
      }
      return ourScope;
    };
    NodePath.prototype.setData = function setData(key, val) {
      return this.data[key] = val;
    };
    NodePath.prototype.getData = function getData(key, def) {
      var val = this.data[key];
      if (!val && def)
        val = this.data[key] = def;
      return val;
    };
    NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg) {
      var Error = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];
      return this.hub.file.buildCodeFrameError(this.node, msg, Error);
    };
    NodePath.prototype.traverse = function traverse(visitor, state) {
      (0, _index2.default)(this.node, visitor, this.scope, state, this);
    };
    NodePath.prototype.mark = function mark(type, message) {
      this.hub.file.metadata.marked.push({
        type: type,
        message: message,
        loc: this.node.loc
      });
    };
    NodePath.prototype.set = function set(key, node) {
      t.validate(this.node, key, node);
      this.node[key] = node;
    };
    NodePath.prototype.getPathLocation = function getPathLocation() {
      var parts = [];
      var path = this;
      do {
        var key = path.key;
        if (path.inList)
          key = path.listKey + "[" + key + "]";
        parts.unshift(key);
      } while (path = path.parentPath);
      return parts.join(".");
    };
    NodePath.prototype.debug = function debug(buildMessage) {
      if (!_debug.enabled)
        return;
      _debug(this.getPathLocation() + " " + this.type + ": " + buildMessage());
    };
    return NodePath;
  }();
  exports.default = NodePath;
  (0, _assign2.default)(NodePath.prototype, $__require('144'));
  (0, _assign2.default)(NodePath.prototype, $__require('148'));
  (0, _assign2.default)(NodePath.prototype, $__require('17a'));
  (0, _assign2.default)(NodePath.prototype, $__require('17b'));
  (0, _assign2.default)(NodePath.prototype, $__require('17c'));
  (0, _assign2.default)(NodePath.prototype, $__require('17d'));
  (0, _assign2.default)(NodePath.prototype, $__require('17e'));
  (0, _assign2.default)(NodePath.prototype, $__require('180'));
  (0, _assign2.default)(NodePath.prototype, $__require('182'));
  (0, _assign2.default)(NodePath.prototype, $__require('183'));
  (0, _assign2.default)(NodePath.prototype, $__require('184'));
  var _loop2 = function _loop2() {
    if (_isArray) {
      if (_i >= _iterator.length)
        return "break";
      _ref2 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done)
        return "break";
      _ref2 = _i.value;
    }
    var type = _ref2;
    var typeKey = "is" + type;
    NodePath.prototype[typeKey] = function(opts) {
      return t[typeKey](this.node, opts);
    };
    NodePath.prototype["assert" + type] = function(opts) {
      if (!this[typeKey](opts)) {
        throw new TypeError("Expected node path of type " + type);
      }
    };
  };
  for (var _iterator = t.TYPES,
      _isArray = Array.isArray(_iterator),
      _i = 0,
      _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
    var _ref2;
    var _ret2 = _loop2();
    if (_ret2 === "break")
      break;
  }
  var _loop = function _loop(type) {
    if (type[0] === "_")
      return ("continue");
    if (t.TYPES.indexOf(type) < 0)
      t.TYPES.push(type);
    var virtualType = virtualTypes[type];
    NodePath.prototype["is" + type] = function(opts) {
      return virtualType.checkPath(this, opts);
    };
  };
  for (var type in virtualTypes) {
    var _ret = _loop(type);
    if (_ret === "continue")
      continue;
  }
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("186", ["f", "15", "145", "9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _classCallCheck2 = $__require('15');
  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
  var _path2 = $__require('145');
  var _path3 = _interopRequireDefault(_path2);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var testing = "production" === "test";
  var TraversalContext = function() {
    function TraversalContext(scope, opts, state, parentPath) {
      (0, _classCallCheck3.default)(this, TraversalContext);
      this.queue = null;
      this.parentPath = parentPath;
      this.scope = scope;
      this.state = state;
      this.opts = opts;
    }
    TraversalContext.prototype.shouldVisit = function shouldVisit(node) {
      var opts = this.opts;
      if (opts.enter || opts.exit)
        return true;
      if (opts[node.type])
        return true;
      var keys = t.VISITOR_KEYS[node.type];
      if (!keys || !keys.length)
        return false;
      for (var _iterator = keys,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var key = _ref;
        if (node[key])
          return true;
      }
      return false;
    };
    TraversalContext.prototype.create = function create(node, obj, key, listKey) {
      return (_path3.default.get({
        parentPath: this.parentPath,
        parent: node,
        container: obj,
        key: key,
        listKey: listKey
      }));
    };
    TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority) {
      if (this.trap) {
        throw new Error("Infinite cycle detected");
      }
      if (this.queue) {
        if (notPriority) {
          this.queue.push(path);
        } else {
          this.priorityQueue.push(path);
        }
      }
    };
    TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
      if (container.length === 0)
        return false;
      var queue = [];
      for (var key = 0; key < container.length; key++) {
        var node = container[key];
        if (node && this.shouldVisit(node)) {
          queue.push(this.create(parent, container, key, listKey));
        }
      }
      return this.visitQueue(queue);
    };
    TraversalContext.prototype.visitSingle = function visitSingle(node, key) {
      if (this.shouldVisit(node[key])) {
        return this.visitQueue([this.create(node, node, key)]);
      } else {
        return false;
      }
    };
    TraversalContext.prototype.visitQueue = function visitQueue(queue) {
      this.queue = queue;
      this.priorityQueue = [];
      var visited = [];
      var stop = false;
      for (var _iterator2 = queue,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var path = _ref2;
        path.resync();
        if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
          path.pushContext(this);
        }
        if (path.key === null)
          continue;
        if (testing && queue.length >= 1000) {
          this.trap = true;
        }
        if (visited.indexOf(path.node) >= 0)
          continue;
        visited.push(path.node);
        if (path.visit()) {
          stop = true;
          break;
        }
        if (this.priorityQueue.length) {
          stop = this.visitQueue(this.priorityQueue);
          this.priorityQueue = [];
          this.queue = queue;
          if (stop)
            break;
        }
      }
      for (var _iterator3 = queue,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var _path = _ref3;
        _path.popContext();
      }
      this.queue = null;
      return stop;
    };
    TraversalContext.prototype.visit = function visit(node, key) {
      var nodes = node[key];
      if (!nodes)
        return false;
      if (Array.isArray(nodes)) {
        return this.visitMultiple(nodes, node, key);
      } else {
        return this.visitSingle(node, key);
      }
    };
    return TraversalContext;
  }();
  exports.default = TraversalContext;
  module.exports = exports["default"];
  return module.exports;
});

$__System.registerDynamic("187", ["99", "9a", "188", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('99');
  $__require('9a');
  module.exports = $__require('188').f('iterator');
  return module.exports;
});

$__System.registerDynamic("189", ["187", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('187'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("18a", ["18b", "18c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var getKeys = $__require('18b'),
      toIObject = $__require('18c');
  module.exports = function(object, el) {
    var O = toIObject(object),
        keys = getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index)
      if (O[key = keys[index++]] === el)
        return key;
  };
  return module.exports;
});

$__System.registerDynamic("18d", ["18b", "18e", "18f", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var getKeys = $__require('18b'),
      gOPS = $__require('18e'),
      pIE = $__require('18f');
  module.exports = function(it) {
    var result = getKeys(it),
        getSymbols = gOPS.f;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = pIE.f,
          i = 0,
          key;
      while (symbols.length > i)
        if (isEnum.call(it, key = symbols[i++]))
          result.push(key);
    }
    return result;
  };
  return module.exports;
});

$__System.registerDynamic("190", ["18c", "191", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toIObject = $__require('18c'),
      gOPN = $__require('191').f,
      toString = {}.toString;
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };
  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
  return module.exports;
});

$__System.registerDynamic("16c", ["18f", "192", "18c", "193", "194", "195", "84", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var pIE = $__require('18f'),
      createDesc = $__require('192'),
      toIObject = $__require('18c'),
      toPrimitive = $__require('193'),
      has = $__require('194'),
      IE8_DOM_DEFINE = $__require('195'),
      gOPD = Object.getOwnPropertyDescriptor;
  exports.f = $__require('84') ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE)
      try {
        return gOPD(O, P);
      } catch (e) {}
    if (has(O, P))
      return createDesc(!pIE.f.call(O, P), O[P]);
  };
  return module.exports;
});

$__System.registerDynamic("191", ["196", "197", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $keys = $__require('196'),
      hiddenKeys = $__require('197').concat('length', 'prototype');
  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
  return module.exports;
});

$__System.registerDynamic("127", ["82", "194", "84", "52", "198", "90", "199", "19a", "19b", "19c", "85", "188", "19d", "18a", "18d", "19e", "16b", "18c", "193", "192", "87", "190", "16c", "83", "18b", "191", "18f", "18e", "19f", "88", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      has = $__require('194'),
      DESCRIPTORS = $__require('84'),
      $export = $__require('52'),
      redefine = $__require('198'),
      META = $__require('90').KEY,
      $fails = $__require('199'),
      shared = $__require('19a'),
      setToStringTag = $__require('19b'),
      uid = $__require('19c'),
      wks = $__require('85'),
      wksExt = $__require('188'),
      wksDefine = $__require('19d'),
      keyOf = $__require('18a'),
      enumKeys = $__require('18d'),
      isArray = $__require('19e'),
      anObject = $__require('16b'),
      toIObject = $__require('18c'),
      toPrimitive = $__require('193'),
      createDesc = $__require('192'),
      _create = $__require('87'),
      gOPNExt = $__require('190'),
      $GOPD = $__require('16c'),
      $DP = $__require('83'),
      $keys = $__require('18b'),
      gOPD = $GOPD.f,
      dP = $DP.f,
      gOPN = gOPNExt.f,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      PROTOTYPE = 'prototype',
      HIDDEN = wks('_hidden'),
      TO_PRIMITIVE = wks('toPrimitive'),
      isEnum = {}.propertyIsEnumerable,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      ObjectProto = Object[PROTOTYPE],
      USE_NATIVE = typeof $Symbol == 'function',
      QObject = global.QObject;
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
  var setSymbolDesc = DESCRIPTORS && $fails(function() {
    return _create(dP({}, 'a', {get: function() {
        return dP(this, 'a', {value: 7}).a;
      }})).a != 7;
  }) ? function(it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc)
      delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto)
      dP(ObjectProto, key, protoDesc);
  } : dP;
  var wrap = function(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };
  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it) {
    return typeof it == 'symbol';
  } : function(it) {
    return it instanceof $Symbol;
  };
  var $defineProperty = function defineProperty(it, key, D) {
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN))
          dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key])
          it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      }
      return setSymbolDesc(it, key, D);
    }
    return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i)
      $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
      D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)
        result.push(key);
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var names = gOPN(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i)
      if (has(AllSymbols, key = names[i++]))
        result.push(AllSymbols[key]);
    return result;
  };
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol)
        throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
        configurable: true,
        set: function(value) {
          if (has(this, HIDDEN) && has(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        }
      });
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });
    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    $__require('191').f = gOPNExt.f = $getOwnPropertyNames;
    $__require('18f').f = $propertyIsEnumerable;
    $__require('18e').f = $getOwnPropertySymbols;
    if (DESCRIPTORS && !$__require('19f')) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
    wksExt.f = function(name) {
      return wrap(wks(name));
    };
  }
  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
  for (var symbols = ('hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').split(','),
      i = 0; symbols.length > i; )
    wks(symbols[i++]);
  for (var symbols = $keys(wks.store),
      i = 0; symbols.length > i; )
    wksDefine(symbols[i++]);
  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    'for': function(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    keyFor: function keyFor(key) {
      if (isSymbol(key))
        return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function() {
      setter = true;
    },
    useSimple: function() {
      setter = false;
    }
  });
  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    getOwnPropertyNames: $getOwnPropertyNames,
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
    var S = $Symbol();
    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {stringify: function stringify(it) {
      if (it === undefined || isSymbol(it))
        return;
      var args = [it],
          i = 1,
          replacer,
          $replacer;
      while (arguments.length > i)
        args.push(arguments[i++]);
      replacer = args[1];
      if (typeof replacer == 'function')
        $replacer = replacer;
      if ($replacer || !isArray(replacer))
        replacer = function(key, value) {
          if ($replacer)
            value = $replacer.call(this, key, value);
          if (!isSymbol(value))
            return value;
        };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }});
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || $__require('88')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  setToStringTag($Symbol, 'Symbol');
  setToStringTag(Math, 'Math', true);
  setToStringTag(global.JSON, 'JSON', true);
  return module.exports;
});

$__System.registerDynamic("1a0", ["19d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('19d')('asyncIterator');
  return module.exports;
});

$__System.registerDynamic("188", ["85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.f = $__require('85');
  return module.exports;
});

$__System.registerDynamic("19d", ["82", "55", "19f", "188", "83", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      core = $__require('55'),
      LIBRARY = $__require('19f'),
      wksExt = $__require('188'),
      defineProperty = $__require('83').f;
  module.exports = function(name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol))
      defineProperty($Symbol, name, {value: wksExt.f(name)});
  };
  return module.exports;
});

$__System.registerDynamic("1a1", ["19d", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('19d')('observable');
  return module.exports;
});

$__System.registerDynamic("1a2", ["127", "98", "1a0", "1a1", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('127');
  $__require('98');
  $__require('1a0');
  $__require('1a1');
  module.exports = $__require('55').Symbol;
  return module.exports;
});

$__System.registerDynamic("9e", ["1a2", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('1a2'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("29", ["189", "9e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _iterator = $__require('189');
  var _iterator2 = _interopRequireDefault(_iterator);
  var _symbol = $__require('9e');
  var _symbol2 = _interopRequireDefault(_symbol);
  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj;
  };
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function(obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };
  return module.exports;
});

$__System.registerDynamic("166", ["52", "55", "199", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $export = $__require('52'),
      core = $__require('55'),
      fails = $__require('199');
  module.exports = function(KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function() {
      fn(1);
    }), 'Object', exp);
  };
  return module.exports;
});

$__System.registerDynamic("1a3", ["164", "18b", "166", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toObject = $__require('164'),
      $keys = $__require('18b');
  $__require('166')('keys', function() {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
  return module.exports;
});

$__System.registerDynamic("1a4", ["1a3", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('1a3');
  module.exports = $__require('55').Object.keys;
  return module.exports;
});

$__System.registerDynamic("d", ["1a4", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('1a4'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("1a5", ["1a6", "8c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toInteger = $__require('1a6'),
      defined = $__require('8c');
  module.exports = function(TO_STRING) {
    return function(that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l)
        return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  return module.exports;
});

$__System.registerDynamic("99", ["1a5", "8e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $at = $__require('1a5')(true);
  $__require('8e')(String, 'String', function(iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function() {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length)
      return {
        value: undefined,
        done: true
      };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
  return module.exports;
});

$__System.registerDynamic("1a7", ["16b", "1a8", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var anObject = $__require('16b'),
      get = $__require('1a8');
  module.exports = $__require('55').getIterator = function(it) {
    var iterFn = get(it);
    if (typeof iterFn != 'function')
      throw TypeError(it + ' is not iterable!');
    return anObject(iterFn.call(it));
  };
  return module.exports;
});

$__System.registerDynamic("1a9", ["9a", "99", "1a7", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('9a');
  $__require('99');
  module.exports = $__require('1a7');
  return module.exports;
});

$__System.registerDynamic("f", ["1a9", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('1a9'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("185", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.Flow = exports.Pure = exports.Generated = exports.User = exports.Var = exports.BlockScoped = exports.Referenced = exports.Scope = exports.Expression = exports.Statement = exports.BindingIdentifier = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = undefined;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var ReferencedIdentifier = exports.ReferencedIdentifier = {
    types: ["Identifier", "JSXIdentifier"],
    checkPath: function checkPath(_ref, opts) {
      var node = _ref.node;
      var parent = _ref.parent;
      if (!t.isIdentifier(node, opts)) {
        if (t.isJSXIdentifier(node, opts)) {
          if (_babelTypes.react.isCompatTag(node.name))
            return false;
        } else {
          return false;
        }
      }
      return t.isReferenced(node, parent);
    }
  };
  var ReferencedMemberExpression = exports.ReferencedMemberExpression = {
    types: ["MemberExpression"],
    checkPath: function checkPath(_ref2) {
      var node = _ref2.node;
      var parent = _ref2.parent;
      return t.isMemberExpression(node) && t.isReferenced(node, parent);
    }
  };
  var BindingIdentifier = exports.BindingIdentifier = {
    types: ["Identifier"],
    checkPath: function checkPath(_ref3) {
      var node = _ref3.node;
      var parent = _ref3.parent;
      return t.isIdentifier(node) && t.isBinding(node, parent);
    }
  };
  var Statement = exports.Statement = {
    types: ["Statement"],
    checkPath: function checkPath(_ref4) {
      var node = _ref4.node;
      var parent = _ref4.parent;
      if (t.isStatement(node)) {
        if (t.isVariableDeclaration(node)) {
          if (t.isForXStatement(parent, {left: node}))
            return false;
          if (t.isForStatement(parent, {init: node}))
            return false;
        }
        return true;
      } else {
        return false;
      }
    }
  };
  var Expression = exports.Expression = {
    types: ["Expression"],
    checkPath: function checkPath(path) {
      if (path.isIdentifier()) {
        return path.isReferencedIdentifier();
      } else {
        return t.isExpression(path.node);
      }
    }
  };
  var Scope = exports.Scope = {
    types: ["Scopable"],
    checkPath: function checkPath(path) {
      return t.isScope(path.node, path.parent);
    }
  };
  var Referenced = exports.Referenced = {checkPath: function checkPath(path) {
      return t.isReferenced(path.node, path.parent);
    }};
  var BlockScoped = exports.BlockScoped = {checkPath: function checkPath(path) {
      return t.isBlockScoped(path.node);
    }};
  var Var = exports.Var = {
    types: ["VariableDeclaration"],
    checkPath: function checkPath(path) {
      return t.isVar(path.node);
    }
  };
  var User = exports.User = {checkPath: function checkPath(path) {
      return path.node && !!path.node.loc;
    }};
  var Generated = exports.Generated = {checkPath: function checkPath(path) {
      return !path.isUser();
    }};
  var Pure = exports.Pure = {checkPath: function checkPath(path, opts) {
      return path.scope.isPure(path.node, opts);
    }};
  var Flow = exports.Flow = {
    types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
    checkPath: function checkPath(_ref5) {
      var node = _ref5.node;
      if (t.isFlow(node)) {
        return true;
      } else if (t.isImportDeclaration(node)) {
        return node.importKind === "type" || node.importKind === "typeof";
      } else if (t.isExportDeclaration(node)) {
        return node.exportKind === "type";
      } else {
        return false;
      }
    }
  };
  return module.exports;
});

$__System.registerDynamic("71", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function arrayCopy(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  module.exports = arrayCopy;
  return module.exports;
});

$__System.registerDynamic("76", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  module.exports = arrayEach;
  return module.exports;
});

$__System.registerDynamic("6e", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseCopy(source, props, object) {
    object || (object = {});
    var index = -1,
        length = props.length;
    while (++index < length) {
      var key = props[index];
      object[key] = source[key];
    }
    return object;
  }
  module.exports = baseCopy;
  return module.exports;
});

$__System.registerDynamic("13d", ["6e", "78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseCopy = $__require('6e'),
      keys = $__require('78');
  function baseAssign(object, source) {
    return source == null ? object : baseCopy(source, keys(source), object);
  }
  module.exports = baseAssign;
  return module.exports;
});

$__System.registerDynamic("10a", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  function toObject(value) {
    return isObject(value) ? value : Object(value);
  }
  module.exports = toObject;
  return module.exports;
});

$__System.registerDynamic("1aa", ["10a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var toObject = $__require('10a');
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var iterable = toObject(object),
          props = keysFunc(object),
          length = props.length,
          index = fromRight ? length : -1;
      while ((fromRight ? index-- : ++index < length)) {
        var key = props[index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  module.exports = createBaseFor;
  return module.exports;
});

$__System.registerDynamic("103", ["1aa"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var createBaseFor = $__require('1aa');
  var baseFor = createBaseFor();
  module.exports = baseFor;
  return module.exports;
});

$__System.registerDynamic("10b", ["103", "78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseFor = $__require('103'),
      keys = $__require('78');
  function baseForOwn(object, iteratee) {
    return baseFor(object, iteratee, keys);
  }
  module.exports = baseForOwn;
  return module.exports;
});

$__System.registerDynamic("1ab", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  module.exports = initCloneArray;
  return module.exports;
});

$__System.registerDynamic("1ac", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var ArrayBuffer = global.ArrayBuffer,
      Uint8Array = global.Uint8Array;
  function bufferClone(buffer) {
    var result = new ArrayBuffer(buffer.byteLength),
        view = new Uint8Array(result);
    view.set(new Uint8Array(buffer));
    return result;
  }
  module.exports = bufferClone;
  return module.exports;
});

$__System.registerDynamic("1ad", ["1ac"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var bufferClone = $__require('1ac');
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';
  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reFlags = /\w*$/;
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return bufferClone(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        var buffer = object.buffer;
        return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        var result = new Ctor(object.source, reFlags.exec(object));
        result.lastIndex = object.lastIndex;
    }
    return result;
  }
  module.exports = initCloneByTag;
  return module.exports;
});

$__System.registerDynamic("1ae", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function initCloneObject(object) {
    var Ctor = object.constructor;
    if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
      Ctor = Object;
    }
    return new Ctor;
  }
  module.exports = initCloneObject;
  return module.exports;
});

$__System.registerDynamic("ea", ["71", "76", "13d", "10b", "1ab", "1ad", "1ae", "34", "77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var arrayCopy = $__require('71'),
      arrayEach = $__require('76'),
      baseAssign = $__require('13d'),
      baseForOwn = $__require('10b'),
      initCloneArray = $__require('1ab'),
      initCloneByTag = $__require('1ad'),
      initCloneObject = $__require('1ae'),
      isArray = $__require('34'),
      isObject = $__require('77');
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return arrayCopy(value, result);
      }
    } else {
      var tag = objToString.call(value),
          isFunc = tag == funcTag;
      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return baseAssign(result, value);
        }
      } else {
        return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : (object ? value : {});
      }
    }
    stackA || (stackA = []);
    stackB || (stackB = []);
    var length = stackA.length;
    while (length--) {
      if (stackA[length] == value) {
        return stackB[length];
      }
    }
    stackA.push(value);
    stackB.push(result);
    (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
      result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
    });
    return result;
  }
  module.exports = baseClone;
  return module.exports;
});

$__System.registerDynamic("11d", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function identity(value) {
    return value;
  }
  module.exports = identity;
  return module.exports;
});

$__System.registerDynamic("eb", ["11d"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var identity = $__require('11d');
  function bindCallback(func, thisArg, argCount) {
    if (typeof func != 'function') {
      return identity;
    }
    if (thisArg === undefined) {
      return func;
    }
    switch (argCount) {
      case 1:
        return function(value) {
          return func.call(thisArg, value);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
      case 4:
        return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      case 5:
        return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
    }
    return function() {
      return func.apply(thisArg, arguments);
    };
  }
  module.exports = bindCallback;
  return module.exports;
});

$__System.registerDynamic("80", ["ea", "eb", "4e"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseClone = $__require('ea'),
      bindCallback = $__require('eb'),
      isIterateeCall = $__require('4e');
  function clone(value, isDeep, customizer, thisArg) {
    if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
      isDeep = false;
    } else if (typeof isDeep == 'function') {
      thisArg = customizer;
      customizer = isDeep;
      isDeep = false;
    }
    return typeof customizer == 'function' ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3)) : baseClone(value, isDeep);
  }
  module.exports = clone;
  return module.exports;
});

$__System.registerDynamic("1af", ["29", "d", "f", "185", "6", "9", "80", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  var _typeof2 = $__require('29');
  var _typeof3 = _interopRequireDefault(_typeof2);
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  exports.explode = explode;
  exports.verify = verify;
  exports.merge = merge;
  var _virtualTypes = $__require('185');
  var virtualTypes = _interopRequireWildcard(_virtualTypes);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _clone = $__require('80');
  var _clone2 = _interopRequireDefault(_clone);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function explode(visitor) {
    if (visitor._exploded)
      return visitor;
    visitor._exploded = true;
    for (var nodeType in visitor) {
      if (shouldIgnoreKey(nodeType))
        continue;
      var parts = nodeType.split("|");
      if (parts.length === 1)
        continue;
      var fns = visitor[nodeType];
      delete visitor[nodeType];
      for (var _iterator = parts,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var part = _ref;
        visitor[part] = fns;
      }
    }
    verify(visitor);
    delete visitor.__esModule;
    ensureEntranceObjects(visitor);
    ensureCallbackArrays(visitor);
    for (var _iterator2 = (0, _keys2.default)(visitor),
        _isArray2 = Array.isArray(_iterator2),
        _i2 = 0,
        _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
      var _ref2;
      if (_isArray2) {
        if (_i2 >= _iterator2.length)
          break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done)
          break;
        _ref2 = _i2.value;
      }
      var _nodeType3 = _ref2;
      if (shouldIgnoreKey(_nodeType3))
        continue;
      var wrapper = virtualTypes[_nodeType3];
      if (!wrapper)
        continue;
      var _fns2 = visitor[_nodeType3];
      for (var type in _fns2) {
        _fns2[type] = wrapCheck(wrapper, _fns2[type]);
      }
      delete visitor[_nodeType3];
      if (wrapper.types) {
        for (var _iterator4 = wrapper.types,
            _isArray4 = Array.isArray(_iterator4),
            _i4 = 0,
            _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
          var _ref4;
          if (_isArray4) {
            if (_i4 >= _iterator4.length)
              break;
            _ref4 = _iterator4[_i4++];
          } else {
            _i4 = _iterator4.next();
            if (_i4.done)
              break;
            _ref4 = _i4.value;
          }
          var _type = _ref4;
          if (visitor[_type]) {
            mergePair(visitor[_type], _fns2);
          } else {
            visitor[_type] = _fns2;
          }
        }
      } else {
        mergePair(visitor, _fns2);
      }
    }
    for (var _nodeType in visitor) {
      if (shouldIgnoreKey(_nodeType))
        continue;
      var _fns = visitor[_nodeType];
      var aliases = t.FLIPPED_ALIAS_KEYS[_nodeType];
      var deprecratedKey = t.DEPRECATED_KEYS[_nodeType];
      if (deprecratedKey) {
        console.trace("Visitor defined for " + _nodeType + " but it has been renamed to " + deprecratedKey);
        aliases = [deprecratedKey];
      }
      if (!aliases)
        continue;
      delete visitor[_nodeType];
      for (var _iterator3 = aliases,
          _isArray3 = Array.isArray(_iterator3),
          _i3 = 0,
          _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
        var _ref3;
        if (_isArray3) {
          if (_i3 >= _iterator3.length)
            break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done)
            break;
          _ref3 = _i3.value;
        }
        var alias = _ref3;
        var existing = visitor[alias];
        if (existing) {
          mergePair(existing, _fns);
        } else {
          visitor[alias] = (0, _clone2.default)(_fns);
        }
      }
    }
    for (var _nodeType2 in visitor) {
      if (shouldIgnoreKey(_nodeType2))
        continue;
      ensureCallbackArrays(visitor[_nodeType2]);
    }
    return visitor;
  }
  function verify(visitor) {
    if (visitor._verified)
      return;
    if (typeof visitor === "function") {
      throw new Error(messages.get("traverseVerifyRootFunction"));
    }
    for (var nodeType in visitor) {
      if (nodeType === "enter" || nodeType === "exit") {
        validateVisitorMethods(nodeType, visitor[nodeType]);
      }
      if (shouldIgnoreKey(nodeType))
        continue;
      if (t.TYPES.indexOf(nodeType) < 0) {
        throw new Error(messages.get("traverseVerifyNodeType", nodeType));
      }
      var visitors = visitor[nodeType];
      if ((typeof visitors === "undefined" ? "undefined" : (0, _typeof3.default)(visitors)) === "object") {
        for (var visitorKey in visitors) {
          if (visitorKey === "enter" || visitorKey === "exit") {
            validateVisitorMethods(nodeType + "." + visitorKey, visitors[visitorKey]);
          } else {
            throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
          }
        }
      }
    }
    visitor._verified = true;
  }
  function validateVisitorMethods(path, val) {
    var fns = [].concat(val);
    for (var _iterator5 = fns,
        _isArray5 = Array.isArray(_iterator5),
        _i5 = 0,
        _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
      var _ref5;
      if (_isArray5) {
        if (_i5 >= _iterator5.length)
          break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done)
          break;
        _ref5 = _i5.value;
      }
      var fn = _ref5;
      if (typeof fn !== "function") {
        throw new TypeError("Non-function found defined in " + path + " with type " + (typeof fn === "undefined" ? "undefined" : (0, _typeof3.default)(fn)));
      }
    }
  }
  function merge(visitors) {
    var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var rootVisitor = {};
    for (var i = 0; i < visitors.length; i++) {
      var visitor = visitors[i];
      var state = states[i];
      explode(visitor);
      for (var type in visitor) {
        var visitorType = visitor[type];
        if (state)
          visitorType = wrapWithState(visitorType, state);
        var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
        mergePair(nodeVisitor, visitorType);
      }
    }
    return rootVisitor;
  }
  function wrapWithState(oldVisitor, state) {
    var newVisitor = {};
    for (var key in oldVisitor) {
      var fns = oldVisitor[key];
      if (!Array.isArray(fns))
        continue;
      fns = fns.map(function(fn) {
        var newFn = function newFn(path) {
          return fn.call(state, path, state);
        };
        newFn.toString = function() {
          return fn.toString();
        };
        return newFn;
      });
      newVisitor[key] = fns;
    }
    return newVisitor;
  }
  function ensureEntranceObjects(obj) {
    for (var key in obj) {
      if (shouldIgnoreKey(key))
        continue;
      var fns = obj[key];
      if (typeof fns === "function") {
        obj[key] = {enter: fns};
      }
    }
  }
  function ensureCallbackArrays(obj) {
    if (obj.enter && !Array.isArray(obj.enter))
      obj.enter = [obj.enter];
    if (obj.exit && !Array.isArray(obj.exit))
      obj.exit = [obj.exit];
  }
  function wrapCheck(wrapper, fn) {
    var newFn = function newFn(path) {
      if (wrapper.checkPath(path)) {
        return fn.apply(this, arguments);
      }
    };
    newFn.toString = function() {
      return fn.toString();
    };
    return newFn;
  }
  function shouldIgnoreKey(key) {
    if (key[0] === "_")
      return true;
    if (key === "enter" || key === "exit" || key === "shouldSkip")
      return true;
    if (key === "blacklist" || key === "noScope" || key === "skipKeys")
      return true;
    return false;
  }
  function mergePair(dest, src) {
    for (var key in src) {
      dest[key] = [].concat(dest[key] || [], src[key]);
    }
  }
  return module.exports;
});

$__System.registerDynamic("1b0", ["55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('55'),
      $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
  module.exports = function stringify(it) {
    return $JSON.stringify.apply($JSON, arguments);
  };
  return module.exports;
});

$__System.registerDynamic("40", ["1b0", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('1b0'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("6", ["40", "@node/util"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.MESSAGES = undefined;
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  exports.get = get;
  exports.parseArgs = parseArgs;
  var _util = $__require('@node/util');
  var util = _interopRequireWildcard(_util);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var MESSAGES = exports.MESSAGES = {
    tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
    classesIllegalBareSuper: "Illegal use of bare super",
    classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
    scopeDuplicateDeclaration: "Duplicate declaration $1",
    settersNoRest: "Setters aren't allowed to have a rest",
    noAssignmentsInForHead: "No assignments allowed in for-in/of head",
    expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
    invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
    readOnly: "$1 is read-only",
    unknownForHead: "Unknown node type $1 in ForStatement",
    didYouMean: "Did you mean $1?",
    codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
    missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
    unsupportedOutputType: "Unsupported output type $1",
    illegalMethodName: "Illegal method name $1",
    lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",
    modulesIllegalExportName: "Illegal export $1",
    modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",
    undeclaredVariable: "Reference to undeclared variable $1",
    undeclaredVariableType: "Referencing a type alias outside of a type annotation",
    undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",
    traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.",
    traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
    traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
    traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",
    pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
    pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
    pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
    pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
  };
  function get(key) {
    for (var _len = arguments.length,
        args = Array(_len > 1 ? _len - 1 : 0),
        _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var msg = MESSAGES[key];
    if (!msg)
      throw new ReferenceError("Unknown message " + (0, _stringify2.default)(key));
    args = parseArgs(args);
    return msg.replace(/\$(\d+)/g, function(str, i) {
      return args[i - 1];
    });
  }
  function parseArgs(args) {
    return args.map(function(val) {
      if (val != null && val.inspect) {
        return val.inspect();
      } else {
        try {
          return ((0, _stringify2.default)(val) || val + "");
        } catch (e) {
          return util.inspect(val);
        }
      }
    });
  }
  return module.exports;
});

$__System.registerDynamic("1b1", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);
    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }
  module.exports = indexOfNaN;
  return module.exports;
});

$__System.registerDynamic("de", ["1b1"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var indexOfNaN = $__require('1b1');
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  module.exports = baseIndexOf;
  return module.exports;
});

$__System.registerDynamic("4e", ["49", "ee", "77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArrayLike = $__require('49'),
      isIndex = $__require('ee'),
      isObject = $__require('77');
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number' ? (isArrayLike(object) && isIndex(index, object.length)) : (type == 'string' && index in object)) {
      var other = object[index];
      return value === value ? (value === other) : (other !== other);
    }
    return false;
  }
  module.exports = isIterateeCall;
  return module.exports;
});

$__System.registerDynamic("63", ["5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObjectLike = $__require('5a');
  var stringTag = '[object String]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isString(value) {
    return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
  }
  module.exports = isString;
  return module.exports;
});

$__System.registerDynamic("1b2", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseValues(object, props) {
    var index = -1,
        length = props.length,
        result = Array(length);
    while (++index < length) {
      result[index] = object[props[index]];
    }
    return result;
  }
  module.exports = baseValues;
  return module.exports;
});

$__System.registerDynamic("11c", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  module.exports = baseProperty;
  return module.exports;
});

$__System.registerDynamic("109", ["11c"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseProperty = $__require('11c');
  var getLength = baseProperty('length');
  module.exports = getLength;
  return module.exports;
});

$__System.registerDynamic("49", ["109", "f0"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var getLength = $__require('109'),
      isLength = $__require('f0');
  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }
  module.exports = isArrayLike;
  return module.exports;
});

$__System.registerDynamic("72", ["49", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArrayLike = $__require('49'),
      isObjectLike = $__require('5a');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  function isArguments(value) {
    return isObjectLike(value) && isArrayLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  }
  module.exports = isArguments;
  return module.exports;
});

$__System.registerDynamic("a4", ["77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('77');
  var funcTag = '[object Function]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  function isFunction(value) {
    return isObject(value) && objToString.call(value) == funcTag;
  }
  module.exports = isFunction;
  return module.exports;
});

$__System.registerDynamic("1b3", ["a4", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isFunction = $__require('a4'),
      isObjectLike = $__require('5a');
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var objectProto = Object.prototype;
  var fnToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  function isNative(value) {
    if (value == null) {
      return false;
    }
    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }
    return isObjectLike(value) && reIsHostCtor.test(value);
  }
  module.exports = isNative;
  return module.exports;
});

$__System.registerDynamic("121", ["1b3"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isNative = $__require('1b3');
  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }
  module.exports = getNative;
  return module.exports;
});

$__System.registerDynamic("5a", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }
  module.exports = isObjectLike;
  return module.exports;
});

$__System.registerDynamic("34", ["121", "f0", "5a"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var getNative = $__require('121'),
      isLength = $__require('f0'),
      isObjectLike = $__require('5a');
  var arrayTag = '[object Array]';
  var objectProto = Object.prototype;
  var objToString = objectProto.toString;
  var nativeIsArray = getNative(Array, 'isArray');
  var isArray = nativeIsArray || function(value) {
    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
  };
  module.exports = isArray;
  return module.exports;
});

$__System.registerDynamic("ee", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var reIsUint = /^\d+$/;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }
  module.exports = isIndex;
  return module.exports;
});

$__System.registerDynamic("f0", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  module.exports = isLength;
  return module.exports;
});

$__System.registerDynamic("77", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }
  module.exports = isObject;
  return module.exports;
});

$__System.registerDynamic("6f", ["72", "34", "ee", "f0", "77"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArguments = $__require('72'),
      isArray = $__require('34'),
      isIndex = $__require('ee'),
      isLength = $__require('f0'),
      isObject = $__require('77');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function keysIn(object) {
    if (object == null) {
      return [];
    }
    if (!isObject(object)) {
      object = Object(object);
    }
    var length = object.length;
    length = (length && isLength(length) && (isArray(object) || isArguments(object)) && length) || 0;
    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;
    while (++index < length) {
      result[index] = (index + '');
    }
    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  module.exports = keysIn;
  return module.exports;
});

$__System.registerDynamic("1b4", ["72", "34", "ee", "f0", "6f"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isArguments = $__require('72'),
      isArray = $__require('34'),
      isIndex = $__require('ee'),
      isLength = $__require('f0'),
      keysIn = $__require('6f');
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function shimKeys(object) {
    var props = keysIn(object),
        propsLength = props.length,
        length = propsLength && object.length;
    var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
    var index = -1,
        result = [];
    while (++index < propsLength) {
      var key = props[index];
      if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }
    return result;
  }
  module.exports = shimKeys;
  return module.exports;
});

$__System.registerDynamic("78", ["121", "49", "77", "1b4"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var getNative = $__require('121'),
      isArrayLike = $__require('49'),
      isObject = $__require('77'),
      shimKeys = $__require('1b4');
  var nativeKeys = getNative(Object, 'keys');
  var keys = !nativeKeys ? shimKeys : function(object) {
    var Ctor = object == null ? undefined : object.constructor;
    if ((typeof Ctor == 'function' && Ctor.prototype === object) || (typeof object != 'function' && isArrayLike(object))) {
      return shimKeys(object);
    }
    return isObject(object) ? nativeKeys(object) : [];
  };
  module.exports = keys;
  return module.exports;
});

$__System.registerDynamic("f4", ["1b2", "78"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseValues = $__require('1b2'),
      keys = $__require('78');
  function values(object) {
    return baseValues(object, keys(object));
  }
  module.exports = values;
  return module.exports;
});

$__System.registerDynamic("60", ["de", "109", "34", "4e", "f0", "63", "f4"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var baseIndexOf = $__require('de'),
      getLength = $__require('109'),
      isArray = $__require('34'),
      isIterateeCall = $__require('4e'),
      isLength = $__require('f0'),
      isString = $__require('63'),
      values = $__require('f4');
  var nativeMax = Math.max;
  function includes(collection, target, fromIndex, guard) {
    var length = collection ? getLength(collection) : 0;
    if (!isLength(length)) {
      collection = values(collection);
      length = collection.length;
    }
    if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
      fromIndex = 0;
    } else {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
    }
    return (typeof collection == 'string' || !isArray(collection) && isString(collection)) ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1) : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
  }
  module.exports = includes;
  return module.exports;
});

$__System.registerDynamic("98", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  return module.exports;
});

$__System.registerDynamic("1b5", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function() {};
  return module.exports;
});

$__System.registerDynamic("8f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(done, value) {
    return {
      value: value,
      done: !!done
    };
  };
  return module.exports;
});

$__System.registerDynamic("19f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = true;
  return module.exports;
});

$__System.registerDynamic("1b6", ["83", "16b", "18b", "84", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var dP = $__require('83'),
      anObject = $__require('16b'),
      getKeys = $__require('18b');
  module.exports = $__require('84') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties),
        length = keys.length,
        i = 0,
        P;
    while (length > i)
      dP.f(O, P = keys[i++], Properties[P]);
    return O;
  };
  return module.exports;
});

$__System.registerDynamic("1b7", ["82", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('82').document && document.documentElement;
  return module.exports;
});

$__System.registerDynamic("87", ["16b", "1b6", "197", "1b8", "1b9", "1b7", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var anObject = $__require('16b'),
      dPs = $__require('1b6'),
      enumBugKeys = $__require('197'),
      IE_PROTO = $__require('1b8')('IE_PROTO'),
      Empty = function() {},
      PROTOTYPE = 'prototype';
  var createDict = function() {
    var iframe = $__require('1b9')('iframe'),
        i = enumBugKeys.length,
        gt = '>',
        iframeDocument;
    iframe.style.display = 'none';
    $__require('1b7').appendChild(iframe);
    iframe.src = 'javascript:';
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write('<script>document.F=Object</script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--)
      delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
  };
  module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty;
      Empty[PROTOTYPE] = null;
      result[IE_PROTO] = O;
    } else
      result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };
  return module.exports;
});

$__System.registerDynamic("1ba", ["87", "192", "19b", "88", "85", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var create = $__require('87'),
      descriptor = $__require('192'),
      setToStringTag = $__require('19b'),
      IteratorPrototype = {};
  $__require('88')(IteratorPrototype, $__require('85')('iterator'), function() {
    return this;
  });
  module.exports = function(Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };
  return module.exports;
});

$__System.registerDynamic("165", ["194", "164", "1b8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var has = $__require('194'),
      toObject = $__require('164'),
      IE_PROTO = $__require('1b8')('IE_PROTO'),
      ObjectProto = Object.prototype;
  module.exports = Object.getPrototypeOf || function(O) {
    O = toObject(O);
    if (has(O, IE_PROTO))
      return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }
    return O instanceof Object ? ObjectProto : null;
  };
  return module.exports;
});

$__System.registerDynamic("8e", ["19f", "52", "198", "88", "194", "1bb", "1ba", "19b", "165", "85", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var LIBRARY = $__require('19f'),
      $export = $__require('52'),
      redefine = $__require('198'),
      hide = $__require('88'),
      has = $__require('194'),
      Iterators = $__require('1bb'),
      $iterCreate = $__require('1ba'),
      setToStringTag = $__require('19b'),
      getPrototypeOf = $__require('165'),
      ITERATOR = $__require('85')('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';
  var returnThis = function() {
    return this;
  };
  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind) {
      if (!BUGGY && kind in proto)
        return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }
      return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
        $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
        methods,
        key,
        IteratorPrototype;
    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
      if (IteratorPrototype !== Object.prototype) {
        setToStringTag(IteratorPrototype, TAG, true);
        if (!LIBRARY && !has(IteratorPrototype, ITERATOR))
          hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() {
        return $native.call(this);
      };
    }
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED)
        for (key in methods) {
          if (!(key in proto))
            redefine(proto, key, methods[key]);
        }
      else
        $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
  return module.exports;
});

$__System.registerDynamic("1bc", ["1b5", "8f", "1bb", "18c", "8e", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var addToUnscopables = $__require('1b5'),
      step = $__require('8f'),
      Iterators = $__require('1bb'),
      toIObject = $__require('18c');
  module.exports = $__require('8e')(Array, 'Array', function(iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function() {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys')
      return step(0, index);
    if (kind == 'values')
      return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
  return module.exports;
});

$__System.registerDynamic("9a", ["1bc", "82", "88", "1bb", "85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('1bc');
  var global = $__require('82'),
      hide = $__require('88'),
      Iterators = $__require('1bb'),
      TO_STRING_TAG = $__require('85')('toStringTag');
  for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'],
      i = 0; i < 5; i++) {
    var NAME = collections[i],
        Collection = global[NAME],
        proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG])
      hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }
  return module.exports;
});

$__System.registerDynamic("198", ["88", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('88');
  return module.exports;
});

$__System.registerDynamic("18c", ["1bd", "8c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var IObject = $__require('1bd'),
      defined = $__require('8c');
  module.exports = function(it) {
    return IObject(defined(it));
  };
  return module.exports;
});

$__System.registerDynamic("1be", ["1a6", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toInteger = $__require('1a6'),
      max = Math.max,
      min = Math.min;
  module.exports = function(index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
  return module.exports;
});

$__System.registerDynamic("1bf", ["18c", "1c0", "1be", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toIObject = $__require('18c'),
      toLength = $__require('1c0'),
      toIndex = $__require('1be');
  module.exports = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O = toIObject($this),
          length = toLength(O.length),
          index = toIndex(fromIndex, length),
          value;
      if (IS_INCLUDES && el != el)
        while (length > index) {
          value = O[index++];
          if (value != value)
            return true;
        }
      else
        for (; length > index; index++)
          if (IS_INCLUDES || index in O) {
            if (O[index] === el)
              return IS_INCLUDES || index || 0;
          }
      return !IS_INCLUDES && -1;
    };
  };
  return module.exports;
});

$__System.registerDynamic("1b8", ["19a", "19c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var shared = $__require('19a')('keys'),
      uid = $__require('19c');
  module.exports = function(key) {
    return shared[key] || (shared[key] = uid(key));
  };
  return module.exports;
});

$__System.registerDynamic("196", ["194", "18c", "1bf", "1b8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var has = $__require('194'),
      toIObject = $__require('18c'),
      arrayIndexOf = $__require('1bf')(false),
      IE_PROTO = $__require('1b8')('IE_PROTO');
  module.exports = function(object, names) {
    var O = toIObject(object),
        i = 0,
        result = [],
        key;
    for (key in O)
      if (key != IE_PROTO)
        has(O, key) && result.push(key);
    while (names.length > i)
      if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    return result;
  };
  return module.exports;
});

$__System.registerDynamic("197", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').split(',');
  return module.exports;
});

$__System.registerDynamic("18b", ["196", "197", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var $keys = $__require('196'),
      enumBugKeys = $__require('197');
  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
  return module.exports;
});

$__System.registerDynamic("18e", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.f = Object.getOwnPropertySymbols;
  return module.exports;
});

$__System.registerDynamic("18f", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.f = {}.propertyIsEnumerable;
  return module.exports;
});

$__System.registerDynamic("53", ["18b", "18e", "18f", "164", "1bd", "199", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var getKeys = $__require('18b'),
      gOPS = $__require('18e'),
      pIE = $__require('18f'),
      toObject = $__require('164'),
      IObject = $__require('1bd'),
      $assign = Object.assign;
  module.exports = !$assign || $__require('199')(function() {
    var A = {},
        B = {},
        S = Symbol(),
        K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    var T = toObject(target),
        aLen = arguments.length,
        index = 1,
        getSymbols = gOPS.f,
        isEnum = pIE.f;
    while (aLen > index) {
      var S = IObject(arguments[index++]),
          keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
          length = keys.length,
          j = 0,
          key;
      while (length > j)
        if (isEnum.call(S, key = keys[j++]))
          T[key] = S[key];
    }
    return T;
  } : $assign;
  return module.exports;
});

$__System.registerDynamic("1c1", ["89", "90", "16b", "16a", "8b", "8d", "1c2", "194", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var redefineAll = $__require('89'),
      getWeak = $__require('90').getWeak,
      anObject = $__require('16b'),
      isObject = $__require('16a'),
      anInstance = $__require('8b'),
      forOf = $__require('8d'),
      createArrayMethod = $__require('1c2'),
      $has = $__require('194'),
      arrayFind = createArrayMethod(5),
      arrayFindIndex = createArrayMethod(6),
      id = 0;
  var uncaughtFrozenStore = function(that) {
    return that._l || (that._l = new UncaughtFrozenStore);
  };
  var UncaughtFrozenStore = function() {
    this.a = [];
  };
  var findUncaughtFrozen = function(store, key) {
    return arrayFind(store.a, function(it) {
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function(key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry)
        return entry[1];
    },
    has: function(key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry)
        entry[1] = value;
      else
        this.a.push([key, value]);
    },
    'delete': function(key) {
      var index = arrayFindIndex(this.a, function(it) {
        return it[0] === key;
      });
      if (~index)
        this.a.splice(index, 1);
      return !!~index;
    }
  };
  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function(that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = id++;
        that._l = undefined;
        if (iterable != undefined)
          forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        'delete': function(key) {
          if (!isObject(key))
            return false;
          var data = getWeak(key);
          if (data === true)
            return uncaughtFrozenStore(this)['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        has: function has(key) {
          if (!isObject(key))
            return false;
          var data = getWeak(key);
          if (data === true)
            return uncaughtFrozenStore(this).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function(that, key, value) {
      var data = getWeak(anObject(key), true);
      if (data === true)
        uncaughtFrozenStore(that).set(key, value);
      else
        data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };
  return module.exports;
});

$__System.registerDynamic("52", ["82", "55", "8a", "88", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      core = $__require('55'),
      ctx = $__require('8a'),
      hide = $__require('88'),
      PROTOTYPE = 'prototype';
  var $export = function(type, name, source) {
    var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        IS_WRAP = type & $export.W,
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        expProto = exports[PROTOTYPE],
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
        key,
        own,
        out;
    if (IS_GLOBAL)
      source = name;
    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && key in exports)
        continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? (function(C) {
        var F = function(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C;
              case 1:
                return new C(a);
              case 2:
                return new C(a, b);
            }
            return new C(a, b, c);
          }
          return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        if (type & $export.R && expProto && !expProto[key])
          hide(expProto, key, out);
      }
    }
  };
  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  module.exports = $export;
  return module.exports;
});

$__System.registerDynamic("90", ["19c", "16a", "194", "83", "199", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var META = $__require('19c')('meta'),
      isObject = $__require('16a'),
      has = $__require('194'),
      setDesc = $__require('83').f,
      id = 0;
  var isExtensible = Object.isExtensible || function() {
    return true;
  };
  var FREEZE = !$__require('199')(function() {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function(it) {
    setDesc(it, META, {value: {
        i: 'O' + ++id,
        w: {}
      }});
  };
  var fastKey = function(it, create) {
    if (!isObject(it))
      return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
      if (!isExtensible(it))
        return 'F';
      if (!create)
        return 'E';
      setMeta(it);
    }
    return it[META].i;
  };
  var getWeak = function(it, create) {
    if (!has(it, META)) {
      if (!isExtensible(it))
        return true;
      if (!create)
        return false;
      setMeta(it);
    }
    return it[META].w;
  };
  var onFreeze = function(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META))
      setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
  return module.exports;
});

$__System.registerDynamic("192", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  return module.exports;
});

$__System.registerDynamic("88", ["83", "192", "84", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var dP = $__require('83'),
      createDesc = $__require('192');
  module.exports = $__require('84') ? function(object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function(object, key, value) {
    object[key] = value;
    return object;
  };
  return module.exports;
});

$__System.registerDynamic("89", ["88", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var hide = $__require('88');
  module.exports = function(target, src, safe) {
    for (var key in src) {
      if (safe && target[key])
        target[key] = src[key];
      else
        hide(target, key, src[key]);
    }
    return target;
  };
  return module.exports;
});

$__System.registerDynamic("1c3", ["16b", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var anObject = $__require('16b');
  module.exports = function(iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined)
        anObject(ret.call(iterator));
      throw e;
    }
  };
  return module.exports;
});

$__System.registerDynamic("1c4", ["1bb", "85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var Iterators = $__require('1bb'),
      ITERATOR = $__require('85')('iterator'),
      ArrayProto = Array.prototype;
  module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
  return module.exports;
});

$__System.registerDynamic("95", ["1c5", "85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var cof = $__require('1c5'),
      TAG = $__require('85')('toStringTag'),
      ARG = cof(function() {
        return arguments;
      }()) == 'Arguments';
  var tryGet = function(it, key) {
    try {
      return it[key];
    } catch (e) {}
  };
  module.exports = function(it) {
    var O,
        T,
        B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof(T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
  return module.exports;
});

$__System.registerDynamic("1bb", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {};
  return module.exports;
});

$__System.registerDynamic("1a8", ["95", "85", "1bb", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var classof = $__require('95'),
      ITERATOR = $__require('85')('iterator'),
      Iterators = $__require('1bb');
  module.exports = $__require('55').getIteratorMethod = function(it) {
    if (it != undefined)
      return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
  return module.exports;
});

$__System.registerDynamic("8d", ["8a", "1c3", "1c4", "16b", "1c0", "1a8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ctx = $__require('8a'),
      call = $__require('1c3'),
      isArrayIter = $__require('1c4'),
      anObject = $__require('16b'),
      toLength = $__require('1c0'),
      getIterFn = $__require('1a8');
  module.exports = function(iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function() {
      return iterable;
    } : getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator;
    if (typeof iterFn != 'function')
      throw TypeError(iterable + ' is not iterable!');
    if (isArrayIter(iterFn))
      for (length = toLength(iterable.length); length > index; index++) {
        entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      }
    else
      for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
        call(iterator, f, step.value, entries);
      }
  };
  return module.exports;
});

$__System.registerDynamic("8b", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
      throw TypeError(name + ': incorrect invocation!');
    }
    return it;
  };
  return module.exports;
});

$__System.registerDynamic("194", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
  };
  return module.exports;
});

$__System.registerDynamic("19b", ["83", "194", "85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var def = $__require('83').f,
      has = $__require('194'),
      TAG = $__require('85')('toStringTag');
  module.exports = function(it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG))
      def(it, TAG, {
        configurable: true,
        value: tag
      });
  };
  return module.exports;
});

$__System.registerDynamic("16b", ["16a", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('16a');
  module.exports = function(it) {
    if (!isObject(it))
      throw TypeError(it + ' is not an object!');
    return it;
  };
  return module.exports;
});

$__System.registerDynamic("1b9", ["16a", "82", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('16a'),
      document = $__require('82').document,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function(it) {
    return is ? document.createElement(it) : {};
  };
  return module.exports;
});

$__System.registerDynamic("195", ["84", "199", "1b9", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = !$__require('84') && !$__require('199')(function() {
    return Object.defineProperty($__require('1b9')('div'), 'a', {get: function() {
        return 7;
      }}).a != 7;
  });
  return module.exports;
});

$__System.registerDynamic("193", ["16a", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('16a');
  module.exports = function(it, S) {
    if (!isObject(it))
      return it;
    var fn,
        val;
    if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
      return val;
    if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))
      return val;
    if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
      return val;
    throw TypeError("Can't convert object to primitive value");
  };
  return module.exports;
});

$__System.registerDynamic("83", ["16b", "195", "193", "84", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var anObject = $__require('16b'),
      IE8_DOM_DEFINE = $__require('195'),
      toPrimitive = $__require('193'),
      dP = Object.defineProperty;
  exports.f = $__require('84') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE)
      try {
        return dP(O, P, Attributes);
      } catch (e) {}
    if ('get' in Attributes || 'set' in Attributes)
      throw TypeError('Accessors not supported!');
    if ('value' in Attributes)
      O[P] = Attributes.value;
    return O;
  };
  return module.exports;
});

$__System.registerDynamic("1c6", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(it) {
    if (typeof it != 'function')
      throw TypeError(it + ' is not a function!');
    return it;
  };
  return module.exports;
});

$__System.registerDynamic("8a", ["1c6", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var aFunction = $__require('1c6');
  module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined)
      return fn;
    switch (length) {
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
  return module.exports;
});

$__System.registerDynamic("1bd", ["1c5", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var cof = $__require('1c5');
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
  return module.exports;
});

$__System.registerDynamic("8c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(it) {
    if (it == undefined)
      throw TypeError("Can't call method on  " + it);
    return it;
  };
  return module.exports;
});

$__System.registerDynamic("164", ["8c", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var defined = $__require('8c');
  module.exports = function(it) {
    return Object(defined(it));
  };
  return module.exports;
});

$__System.registerDynamic("1a6", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
  return module.exports;
});

$__System.registerDynamic("1c0", ["1a6", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toInteger = $__require('1a6'),
      min = Math.min;
  module.exports = function(it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
  return module.exports;
});

$__System.registerDynamic("16a", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
  return module.exports;
});

$__System.registerDynamic("1c5", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var toString = {}.toString;
  module.exports = function(it) {
    return toString.call(it).slice(8, -1);
  };
  return module.exports;
});

$__System.registerDynamic("19e", ["1c5", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var cof = $__require('1c5');
  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
  return module.exports;
});

$__System.registerDynamic("19a", ["82", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key) {
    return store[key] || (store[key] = {});
  };
  return module.exports;
});

$__System.registerDynamic("19c", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var id = 0,
      px = Math.random();
  module.exports = function(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
  return module.exports;
});

$__System.registerDynamic("82", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number')
    __g = global;
  return module.exports;
});

$__System.registerDynamic("85", ["19a", "19c", "82", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var store = $__require('19a')('wks'),
      uid = $__require('19c'),
      Symbol = $__require('82').Symbol,
      USE_SYMBOL = typeof Symbol == 'function';
  var $exports = module.exports = function(name) {
    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };
  $exports.store = store;
  return module.exports;
});

$__System.registerDynamic("1c7", ["16a", "19e", "85", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var isObject = $__require('16a'),
      isArray = $__require('19e'),
      SPECIES = $__require('85')('species');
  module.exports = function(original) {
    var C;
    if (isArray(original)) {
      C = original.constructor;
      if (typeof C == 'function' && (C === Array || isArray(C.prototype)))
        C = undefined;
      if (isObject(C)) {
        C = C[SPECIES];
        if (C === null)
          C = undefined;
      }
    }
    return C === undefined ? Array : C;
  };
  return module.exports;
});

$__System.registerDynamic("1c8", ["1c7", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var speciesConstructor = $__require('1c7');
  module.exports = function(original, length) {
    return new (speciesConstructor(original))(length);
  };
  return module.exports;
});

$__System.registerDynamic("1c2", ["8a", "1bd", "164", "1c0", "1c8", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var ctx = $__require('8a'),
      IObject = $__require('1bd'),
      toObject = $__require('164'),
      toLength = $__require('1c0'),
      asc = $__require('1c8');
  module.exports = function(TYPE, $create) {
    var IS_MAP = TYPE == 1,
        IS_FILTER = TYPE == 2,
        IS_SOME = TYPE == 3,
        IS_EVERY = TYPE == 4,
        IS_FIND_INDEX = TYPE == 6,
        NO_HOLES = TYPE == 5 || IS_FIND_INDEX,
        create = $create || asc;
    return function($this, callbackfn, that) {
      var O = toObject($this),
          self = IObject(O),
          f = ctx(callbackfn, that, 3),
          length = toLength(self.length),
          index = 0,
          result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined,
          val,
          res;
      for (; length > index; index++)
        if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
          if (TYPE) {
            if (IS_MAP)
              result[index] = res;
            else if (res)
              switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return val;
                case 6:
                  return index;
                case 2:
                  result.push(val);
              }
            else if (IS_EVERY)
              return false;
          }
        }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };
  return module.exports;
});

$__System.registerDynamic("199", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  return module.exports;
});

$__System.registerDynamic("84", ["199", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = !$__require('199')(function() {
    return Object.defineProperty({}, 'a', {get: function() {
        return 7;
      }}).a != 7;
  });
  return module.exports;
});

$__System.registerDynamic("92", ["82", "52", "90", "199", "88", "89", "8d", "8b", "16a", "19b", "83", "1c2", "84", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var global = $__require('82'),
      $export = $__require('52'),
      meta = $__require('90'),
      fails = $__require('199'),
      hide = $__require('88'),
      redefineAll = $__require('89'),
      forOf = $__require('8d'),
      anInstance = $__require('8b'),
      isObject = $__require('16a'),
      setToStringTag = $__require('19b'),
      dP = $__require('83').f,
      each = $__require('1c2')(0),
      DESCRIPTORS = $__require('84');
  module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
      new C().entries().next();
    }))) {
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      C = wrapper(function(target, iterable) {
        anInstance(target, C, NAME, '_c');
        target._c = new Base;
        if (iterable != undefined)
          forOf(iterable, IS_MAP, target[ADDER], target);
      });
      each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function(KEY) {
        var IS_ADDER = KEY == 'add' || KEY == 'set';
        if (KEY in proto && !(IS_WEAK && KEY == 'clear'))
          hide(C.prototype, KEY, function(a, b) {
            anInstance(this, C, KEY);
            if (!IS_ADDER && IS_WEAK && !isObject(a))
              return KEY == 'get' ? undefined : false;
            var result = this._c[KEY](a === 0 ? 0 : a, b);
            return IS_ADDER ? this : result;
          });
      });
      if ('size' in proto)
        dP(C.prototype, 'size', {get: function() {
            return this._c.size;
          }});
    }
    setToStringTag(C, NAME);
    O[NAME] = C;
    $export($export.G + $export.W + $export.F, O);
    if (!IS_WEAK)
      common.setStrong(C, NAME, IS_MAP);
    return C;
  };
  return module.exports;
});

$__System.registerDynamic("1c9", ["1c2", "198", "90", "53", "1c1", "16a", "194", "92", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var each = $__require('1c2')(0),
      redefine = $__require('198'),
      meta = $__require('90'),
      assign = $__require('53'),
      weak = $__require('1c1'),
      isObject = $__require('16a'),
      has = $__require('194'),
      getWeak = meta.getWeak,
      isExtensible = Object.isExtensible,
      uncaughtFrozenStore = weak.ufstore,
      tmp = {},
      InternalMap;
  var wrapper = function(get) {
    return function WeakMap() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };
  var methods = {
    get: function get(key) {
      if (isObject(key)) {
        var data = getWeak(key);
        if (data === true)
          return uncaughtFrozenStore(this).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    set: function set(key, value) {
      return weak.def(this, key, value);
    }
  };
  var $WeakMap = module.exports = $__require('92')('WeakMap', wrapper, methods, weak, true, true);
  if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
    InternalMap = weak.getConstructor(wrapper);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function(key) {
      var proto = $WeakMap.prototype,
          method = proto[key];
      redefine(proto, key, function(a, b) {
        if (isObject(a) && !isExtensible(a)) {
          if (!this._f)
            this._f = new InternalMap;
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
        }
        return method.call(this, a, b);
      });
    });
  }
  return module.exports;
});

$__System.registerDynamic("55", ["3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var core = module.exports = {version: '2.3.0'};
  if (typeof __e == 'number')
    __e = core;
  return module.exports;
});

$__System.registerDynamic("1ca", ["98", "9a", "1c9", "55", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  $__require('98');
  $__require('9a');
  $__require('1c9');
  module.exports = $__require('55').WeakMap;
  return module.exports;
});

$__System.registerDynamic("1cb", ["1ca", "3"], true, function($__require, exports, module) {
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    "default": $__require('1ca'),
    __esModule: true
  };
  return module.exports;
});

$__System.registerDynamic("143", ["1cb", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.scope = exports.path = undefined;
  var _weakMap = $__require('1cb');
  var _weakMap2 = _interopRequireDefault(_weakMap);
  exports.clear = clear;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var path = exports.path = new _weakMap2.default();
  var scope = exports.scope = new _weakMap2.default();
  function clear() {
    exports.path = path = new _weakMap2.default();
    exports.scope = scope = new _weakMap2.default();
  }
  return module.exports;
});

$__System.registerDynamic("18", ["133", "f", "145", "142", "134", "186", "1af", "6", "60", "9", "143", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.visitors = exports.Hub = exports.Scope = exports.NodePath = undefined;
  var _getOwnPropertySymbols = $__require('133');
  var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _path = $__require('145');
  Object.defineProperty(exports, "NodePath", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_path).default;
    }
  });
  var _scope = $__require('142');
  Object.defineProperty(exports, "Scope", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_scope).default;
    }
  });
  var _hub = $__require('134');
  Object.defineProperty(exports, "Hub", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_hub).default;
    }
  });
  exports.default = traverse;
  var _context = $__require('186');
  var _context2 = _interopRequireDefault(_context);
  var _visitors = $__require('1af');
  var visitors = _interopRequireWildcard(_visitors);
  var _babelMessages = $__require('6');
  var messages = _interopRequireWildcard(_babelMessages);
  var _includes = $__require('60');
  var _includes2 = _interopRequireDefault(_includes);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _cache = $__require('143');
  var cache = _interopRequireWildcard(_cache);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  exports.visitors = visitors;
  function traverse(parent, opts, scope, state, parentPath) {
    if (!parent)
      return;
    if (!opts)
      opts = {};
    if (!opts.noScope && !scope) {
      if (parent.type !== "Program" && parent.type !== "File") {
        throw new Error(messages.get("traverseNeedsParent", parent.type));
      }
    }
    visitors.explode(opts);
    traverse.node(parent, opts, scope, state, parentPath);
  }
  traverse.visitors = visitors;
  traverse.verify = visitors.verify;
  traverse.explode = visitors.explode;
  traverse.NodePath = $__require('145');
  traverse.Scope = $__require('142');
  traverse.Hub = $__require('134');
  traverse.cheap = function(node, enter) {
    if (!node)
      return;
    var keys = t.VISITOR_KEYS[node.type];
    if (!keys)
      return;
    enter(node);
    for (var _iterator = keys,
        _isArray = Array.isArray(_iterator),
        _i = 0,
        _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var key = _ref;
      var subNode = node[key];
      if (Array.isArray(subNode)) {
        for (var _iterator2 = subNode,
            _isArray2 = Array.isArray(_iterator2),
            _i2 = 0,
            _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
          var _ref2;
          if (_isArray2) {
            if (_i2 >= _iterator2.length)
              break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done)
              break;
            _ref2 = _i2.value;
          }
          var _node = _ref2;
          traverse.cheap(_node, enter);
        }
      } else {
        traverse.cheap(subNode, enter);
      }
    }
  };
  traverse.node = function(node, opts, scope, state, parentPath, skipKeys) {
    var keys = t.VISITOR_KEYS[node.type];
    if (!keys)
      return;
    var context = new _context2.default(scope, opts, state, parentPath);
    for (var _iterator3 = keys,
        _isArray3 = Array.isArray(_iterator3),
        _i3 = 0,
        _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
      var _ref3;
      if (_isArray3) {
        if (_i3 >= _iterator3.length)
          break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done)
          break;
        _ref3 = _i3.value;
      }
      var key = _ref3;
      if (skipKeys && skipKeys[key])
        continue;
      if (context.visit(node, key))
        return;
    }
  };
  var CLEAR_KEYS = t.COMMENT_KEYS.concat(["tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);
  traverse.clearNode = function(node) {
    for (var _iterator4 = CLEAR_KEYS,
        _isArray4 = Array.isArray(_iterator4),
        _i4 = 0,
        _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
      var _ref4;
      if (_isArray4) {
        if (_i4 >= _iterator4.length)
          break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done)
          break;
        _ref4 = _i4.value;
      }
      var _key = _ref4;
      if (node[_key] != null)
        node[_key] = undefined;
    }
    for (var key in node) {
      if (key[0] === "_" && node[key] != null)
        node[key] = undefined;
    }
    cache.path.delete(node);
    var syms = (0, _getOwnPropertySymbols2.default)(node);
    for (var _iterator5 = syms,
        _isArray5 = Array.isArray(_iterator5),
        _i5 = 0,
        _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
      var _ref5;
      if (_isArray5) {
        if (_i5 >= _iterator5.length)
          break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done)
          break;
        _ref5 = _i5.value;
      }
      var sym = _ref5;
      node[sym] = null;
    }
  };
  traverse.removeProperties = function(tree) {
    traverse.cheap(tree, traverse.clearNode);
    return tree;
  };
  function hasBlacklistedType(path, state) {
    if (path.node.type === state.type) {
      state.has = true;
      path.stop();
    }
  }
  traverse.hasType = function(tree, scope, type, blacklistTypes) {
    if ((0, _includes2.default)(blacklistTypes, tree.type))
      return false;
    if (tree.type === type)
      return true;
    var state = {
      has: false,
      type: type
    };
    traverse(tree, {
      blacklist: blacklistTypes,
      enter: hasBlacklistedType
    }, scope, state);
    return state.has;
  };
  traverse.clearCache = function() {
    cache.clear();
  };
  traverse.copyCache = function(source, destination) {
    if (cache.path.has(source)) {
      cache.path.set(destination, cache.path.get(source));
    }
  };
  return module.exports;
});

$__System.registerDynamic("9", ["f", "d", "40", "fd", "fb", "fc", "104", "105", "106", "107", "80", "8", "125", "130", "12a", "131", "18"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.createTypeAnnotationBasedOnTypeof = exports.removeTypeDuplicates = exports.createUnionTypeAnnotation = exports.valueToNode = exports.toBlock = exports.toExpression = exports.toStatement = exports.toBindingIdentifierName = exports.toIdentifier = exports.toKeyAlias = exports.toSequenceExpression = exports.toComputedKey = exports.isImmutable = exports.isScope = exports.isSpecifierDefault = exports.isVar = exports.isBlockScoped = exports.isLet = exports.isValidIdentifier = exports.isReferenced = exports.isBinding = exports.getOuterBindingIdentifiers = exports.getBindingIdentifiers = exports.TYPES = exports.react = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;
  var _getIterator2 = $__require('f');
  var _getIterator3 = _interopRequireDefault(_getIterator2);
  var _keys = $__require('d');
  var _keys2 = _interopRequireDefault(_keys);
  var _stringify = $__require('40');
  var _stringify2 = _interopRequireDefault(_stringify);
  var _constants = $__require('fd');
  Object.defineProperty(exports, "STATEMENT_OR_BLOCK_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.STATEMENT_OR_BLOCK_KEYS;
    }
  });
  Object.defineProperty(exports, "FLATTENABLE_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.FLATTENABLE_KEYS;
    }
  });
  Object.defineProperty(exports, "FOR_INIT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.FOR_INIT_KEYS;
    }
  });
  Object.defineProperty(exports, "COMMENT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.COMMENT_KEYS;
    }
  });
  Object.defineProperty(exports, "LOGICAL_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.LOGICAL_OPERATORS;
    }
  });
  Object.defineProperty(exports, "UPDATE_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.UPDATE_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_NUMBER_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_NUMBER_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "EQUALITY_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.EQUALITY_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "COMPARISON_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.COMPARISON_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "NUMBER_BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.NUMBER_BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BINARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BINARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "BOOLEAN_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.BOOLEAN_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "NUMBER_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.NUMBER_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "STRING_UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.STRING_UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "UNARY_OPERATORS", {
    enumerable: true,
    get: function get() {
      return _constants.UNARY_OPERATORS;
    }
  });
  Object.defineProperty(exports, "INHERIT_KEYS", {
    enumerable: true,
    get: function get() {
      return _constants.INHERIT_KEYS;
    }
  });
  Object.defineProperty(exports, "BLOCK_SCOPED_SYMBOL", {
    enumerable: true,
    get: function get() {
      return _constants.BLOCK_SCOPED_SYMBOL;
    }
  });
  Object.defineProperty(exports, "NOT_LOCAL_BINDING", {
    enumerable: true,
    get: function get() {
      return _constants.NOT_LOCAL_BINDING;
    }
  });
  exports.is = is;
  exports.isType = isType;
  exports.validate = validate;
  exports.shallowEqual = shallowEqual;
  exports.appendToMemberExpression = appendToMemberExpression;
  exports.prependToMemberExpression = prependToMemberExpression;
  exports.ensureBlock = ensureBlock;
  exports.clone = clone;
  exports.cloneWithoutLoc = cloneWithoutLoc;
  exports.cloneDeep = cloneDeep;
  exports.buildMatchMemberExpression = buildMatchMemberExpression;
  exports.removeComments = removeComments;
  exports.inheritsComments = inheritsComments;
  exports.inheritTrailingComments = inheritTrailingComments;
  exports.inheritLeadingComments = inheritLeadingComments;
  exports.inheritInnerComments = inheritInnerComments;
  exports.inherits = inherits;
  exports.assertNode = assertNode;
  exports.isNode = isNode;
  var _retrievers = $__require('fb');
  Object.defineProperty(exports, "getBindingIdentifiers", {
    enumerable: true,
    get: function get() {
      return _retrievers.getBindingIdentifiers;
    }
  });
  Object.defineProperty(exports, "getOuterBindingIdentifiers", {
    enumerable: true,
    get: function get() {
      return _retrievers.getOuterBindingIdentifiers;
    }
  });
  var _validators = $__require('fc');
  Object.defineProperty(exports, "isBinding", {
    enumerable: true,
    get: function get() {
      return _validators.isBinding;
    }
  });
  Object.defineProperty(exports, "isReferenced", {
    enumerable: true,
    get: function get() {
      return _validators.isReferenced;
    }
  });
  Object.defineProperty(exports, "isValidIdentifier", {
    enumerable: true,
    get: function get() {
      return _validators.isValidIdentifier;
    }
  });
  Object.defineProperty(exports, "isLet", {
    enumerable: true,
    get: function get() {
      return _validators.isLet;
    }
  });
  Object.defineProperty(exports, "isBlockScoped", {
    enumerable: true,
    get: function get() {
      return _validators.isBlockScoped;
    }
  });
  Object.defineProperty(exports, "isVar", {
    enumerable: true,
    get: function get() {
      return _validators.isVar;
    }
  });
  Object.defineProperty(exports, "isSpecifierDefault", {
    enumerable: true,
    get: function get() {
      return _validators.isSpecifierDefault;
    }
  });
  Object.defineProperty(exports, "isScope", {
    enumerable: true,
    get: function get() {
      return _validators.isScope;
    }
  });
  Object.defineProperty(exports, "isImmutable", {
    enumerable: true,
    get: function get() {
      return _validators.isImmutable;
    }
  });
  var _converters = $__require('104');
  Object.defineProperty(exports, "toComputedKey", {
    enumerable: true,
    get: function get() {
      return _converters.toComputedKey;
    }
  });
  Object.defineProperty(exports, "toSequenceExpression", {
    enumerable: true,
    get: function get() {
      return _converters.toSequenceExpression;
    }
  });
  Object.defineProperty(exports, "toKeyAlias", {
    enumerable: true,
    get: function get() {
      return _converters.toKeyAlias;
    }
  });
  Object.defineProperty(exports, "toIdentifier", {
    enumerable: true,
    get: function get() {
      return _converters.toIdentifier;
    }
  });
  Object.defineProperty(exports, "toBindingIdentifierName", {
    enumerable: true,
    get: function get() {
      return _converters.toBindingIdentifierName;
    }
  });
  Object.defineProperty(exports, "toStatement", {
    enumerable: true,
    get: function get() {
      return _converters.toStatement;
    }
  });
  Object.defineProperty(exports, "toExpression", {
    enumerable: true,
    get: function get() {
      return _converters.toExpression;
    }
  });
  Object.defineProperty(exports, "toBlock", {
    enumerable: true,
    get: function get() {
      return _converters.toBlock;
    }
  });
  Object.defineProperty(exports, "valueToNode", {
    enumerable: true,
    get: function get() {
      return _converters.valueToNode;
    }
  });
  var _flow = $__require('105');
  Object.defineProperty(exports, "createUnionTypeAnnotation", {
    enumerable: true,
    get: function get() {
      return _flow.createUnionTypeAnnotation;
    }
  });
  Object.defineProperty(exports, "removeTypeDuplicates", {
    enumerable: true,
    get: function get() {
      return _flow.removeTypeDuplicates;
    }
  });
  Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
    enumerable: true,
    get: function get() {
      return _flow.createTypeAnnotationBasedOnTypeof;
    }
  });
  var _toFastProperties = $__require('106');
  var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
  var _compact = $__require('107');
  var _compact2 = _interopRequireDefault(_compact);
  var _clone = $__require('80');
  var _clone2 = _interopRequireDefault(_clone);
  var _each = $__require('8');
  var _each2 = _interopRequireDefault(_each);
  var _uniq = $__require('125');
  var _uniq2 = _interopRequireDefault(_uniq);
  $__require('130');
  var _definitions = $__require('12a');
  var _react2 = $__require('131');
  var _react = _interopRequireWildcard(_react2);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var t = exports;
  function registerType(type) {
    var is = t["is" + type];
    if (!is) {
      is = t["is" + type] = function(node, opts) {
        return t.is(type, node, opts);
      };
    }
    t["assert" + type] = function(node, opts) {
      opts = opts || {};
      if (!is(node, opts)) {
        throw new Error("Expected type " + (0, _stringify2.default)(type) + " with option " + (0, _stringify2.default)(opts));
      }
    };
  }
  exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
  exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
  exports.NODE_FIELDS = _definitions.NODE_FIELDS;
  exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
  exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
  exports.react = _react;
  for (var type in t.VISITOR_KEYS) {
    registerType(type);
  }
  t.FLIPPED_ALIAS_KEYS = {};
  (0, _each2.default)(t.ALIAS_KEYS, function(aliases, type) {
    (0, _each2.default)(aliases, function(alias) {
      var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
      types.push(type);
    });
  });
  (0, _each2.default)(t.FLIPPED_ALIAS_KEYS, function(types, type) {
    t[type.toUpperCase() + "_TYPES"] = types;
    registerType(type);
  });
  var TYPES = exports.TYPES = (0, _keys2.default)(t.VISITOR_KEYS).concat((0, _keys2.default)(t.FLIPPED_ALIAS_KEYS)).concat((0, _keys2.default)(t.DEPRECATED_KEYS));
  function is(type, node, opts) {
    if (!node)
      return false;
    var matches = isType(node.type, type);
    if (!matches)
      return false;
    if (typeof opts === "undefined") {
      return true;
    } else {
      return t.shallowEqual(node, opts);
    }
  }
  function isType(nodeType, targetType) {
    if (nodeType === targetType)
      return true;
    if (t.ALIAS_KEYS[targetType])
      return false;
    var aliases = t.FLIPPED_ALIAS_KEYS[targetType];
    if (aliases) {
      if (aliases[0] === nodeType)
        return true;
      for (var _iterator = aliases,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var alias = _ref;
        if (nodeType === alias)
          return true;
      }
    }
    return false;
  }
  (0, _each2.default)(t.BUILDER_KEYS, function(keys, type) {
    function builder() {
      if (arguments.length > keys.length) {
        throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive " + ("no more than " + keys.length));
      }
      var node = {};
      node.type = type;
      var i = 0;
      for (var _iterator2 = keys,
          _isArray2 = Array.isArray(_iterator2),
          _i2 = 0,
          _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2); ; ) {
        var _ref2;
        if (_isArray2) {
          if (_i2 >= _iterator2.length)
            break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done)
            break;
          _ref2 = _i2.value;
        }
        var _key = _ref2;
        var field = t.NODE_FIELDS[type][_key];
        var arg = arguments[i++];
        if (arg === undefined)
          arg = (0, _clone2.default)(field.default);
        node[_key] = arg;
      }
      for (var key in node) {
        validate(node, key, node[key]);
      }
      return node;
    }
    t[type] = builder;
    t[type[0].toLowerCase() + type.slice(1)] = builder;
  });
  var _loop = function _loop(_type) {
    var newType = t.DEPRECATED_KEYS[_type];
    function proxy(fn) {
      return function() {
        console.trace("The node type " + _type + " has been renamed to " + newType);
        return fn.apply(this, arguments);
      };
    }
    t[_type] = t[_type[0].toLowerCase() + _type.slice(1)] = proxy(t[newType]);
    t["is" + _type] = proxy(t["is" + newType]);
    t["assert" + _type] = proxy(t["assert" + newType]);
  };
  for (var _type in t.DEPRECATED_KEYS) {
    _loop(_type);
  }
  function validate(node, key, val) {
    if (!node)
      return;
    var fields = t.NODE_FIELDS[node.type];
    if (!fields)
      return;
    var field = fields[key];
    if (!field || !field.validate)
      return;
    if (field.optional && val == null)
      return;
    field.validate(node, key, val);
  }
  function shallowEqual(actual, expected) {
    var keys = (0, _keys2.default)(expected);
    for (var _iterator3 = keys,
        _isArray3 = Array.isArray(_iterator3),
        _i3 = 0,
        _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3); ; ) {
      var _ref3;
      if (_isArray3) {
        if (_i3 >= _iterator3.length)
          break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done)
          break;
        _ref3 = _i3.value;
      }
      var key = _ref3;
      if (actual[key] !== expected[key]) {
        return false;
      }
    }
    return true;
  }
  function appendToMemberExpression(member, append, computed) {
    member.object = t.memberExpression(member.object, member.property, member.computed);
    member.property = append;
    member.computed = !!computed;
    return member;
  }
  function prependToMemberExpression(member, prepend) {
    member.object = t.memberExpression(prepend, member.object);
    return member;
  }
  function ensureBlock(node) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
    return node[key] = t.toBlock(node[key], node);
  }
  function clone(node) {
    var newNode = {};
    for (var key in node) {
      if (key[0] === "_")
        continue;
      newNode[key] = node[key];
    }
    return newNode;
  }
  function cloneWithoutLoc(node) {
    var newNode = clone(node);
    delete newNode.loc;
    return newNode;
  }
  function cloneDeep(node) {
    var newNode = {};
    for (var key in node) {
      if (key[0] === "_")
        continue;
      var val = node[key];
      if (val) {
        if (val.type) {
          val = t.cloneDeep(val);
        } else if (Array.isArray(val)) {
          val = val.map(t.cloneDeep);
        }
      }
      newNode[key] = val;
    }
    return newNode;
  }
  function buildMatchMemberExpression(match, allowPartial) {
    var parts = match.split(".");
    return function(member) {
      if (!t.isMemberExpression(member))
        return false;
      var search = [member];
      var i = 0;
      while (search.length) {
        var node = search.shift();
        if (allowPartial && i === parts.length) {
          return true;
        }
        if (t.isIdentifier(node)) {
          if (parts[i] !== node.name)
            return false;
        } else if (t.isStringLiteral(node)) {
          if (parts[i] !== node.value)
            return false;
        } else if (t.isMemberExpression(node)) {
          if (node.computed && !t.isStringLiteral(node.property)) {
            return false;
          } else {
            search.push(node.object);
            search.push(node.property);
            continue;
          }
        } else {
          return false;
        }
        if (++i > parts.length) {
          return false;
        }
      }
      return true;
    };
  }
  function removeComments(node) {
    for (var _iterator4 = t.COMMENT_KEYS,
        _isArray4 = Array.isArray(_iterator4),
        _i4 = 0,
        _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4); ; ) {
      var _ref4;
      if (_isArray4) {
        if (_i4 >= _iterator4.length)
          break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done)
          break;
        _ref4 = _i4.value;
      }
      var key = _ref4;
      delete node[key];
    }
    return node;
  }
  function inheritsComments(child, parent) {
    inheritTrailingComments(child, parent);
    inheritLeadingComments(child, parent);
    inheritInnerComments(child, parent);
    return child;
  }
  function inheritTrailingComments(child, parent) {
    _inheritComments("trailingComments", child, parent);
  }
  function inheritLeadingComments(child, parent) {
    _inheritComments("leadingComments", child, parent);
  }
  function inheritInnerComments(child, parent) {
    _inheritComments("innerComments", child, parent);
  }
  function _inheritComments(key, child, parent) {
    if (child && parent) {
      child[key] = (0, _uniq2.default)((0, _compact2.default)([].concat(child[key], parent[key])));
    }
  }
  var traverse = void 0;
  function inherits(child, parent) {
    if (!traverse)
      traverse = $__require('18').default;
    if (!child || !parent)
      return child;
    for (var _iterator5 = t.INHERIT_KEYS.optional,
        _isArray5 = Array.isArray(_iterator5),
        _i5 = 0,
        _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5); ; ) {
      var _ref5;
      if (_isArray5) {
        if (_i5 >= _iterator5.length)
          break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done)
          break;
        _ref5 = _i5.value;
      }
      var _key2 = _ref5;
      if (child[_key2] == null) {
        child[_key2] = parent[_key2];
      }
    }
    for (var key in parent) {
      if (key[0] === "_")
        child[key] = parent[key];
    }
    for (var _iterator6 = t.INHERIT_KEYS.force,
        _isArray6 = Array.isArray(_iterator6),
        _i6 = 0,
        _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6); ; ) {
      var _ref6;
      if (_isArray6) {
        if (_i6 >= _iterator6.length)
          break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done)
          break;
        _ref6 = _i6.value;
      }
      var _key3 = _ref6;
      child[_key3] = parent[_key3];
    }
    t.inheritsComments(child, parent);
    traverse.copyCache(parent, child);
    return child;
  }
  function assertNode(node) {
    if (!isNode(node)) {
      throw new TypeError("Not a valid node " + (node && node.type));
    }
  }
  function isNode(node) {
    return !!(node && _definitions.VISITOR_KEYS[node.type]);
  }
  (0, _toFastProperties2.default)(t);
  (0, _toFastProperties2.default)(t.VISITOR_KEYS);
  return module.exports;
});

$__System.registerDynamic("fa", ["9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.runtimeProperty = runtimeProperty;
  exports.isReference = isReference;
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function runtimeProperty(name, regeneratorIdentifier) {
    return t.memberExpression(regeneratorIdentifier || t.identifier("regeneratorRuntime"), t.identifier(name), false);
  }
  function isReference(path) {
    return path.isReferenced() || path.parentPath.isAssignmentExpression({left: path.node});
  }
  return module.exports;
});

$__System.registerDynamic("f9", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var originalObject = Object;
  var originalDefProp = Object.defineProperty;
  var originalCreate = Object.create;
  function defProp(obj, name, value) {
    if (originalDefProp)
      try {
        originalDefProp.call(originalObject, obj, name, {value: value});
      } catch (definePropertyIsBrokenInIE8) {
        obj[name] = value;
      }
    else {
      obj[name] = value;
    }
  }
  function makeSafeToCall(fun) {
    if (fun) {
      defProp(fun, "call", fun.call);
      defProp(fun, "apply", fun.apply);
    }
    return fun;
  }
  makeSafeToCall(originalDefProp);
  makeSafeToCall(originalCreate);
  var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
  var numToStr = makeSafeToCall(Number.prototype.toString);
  var strSlice = makeSafeToCall(String.prototype.slice);
  var cloner = function() {};
  function create(prototype) {
    if (originalCreate) {
      return originalCreate.call(originalObject, prototype);
    }
    cloner.prototype = prototype || null;
    return new cloner;
  }
  var rand = Math.random;
  var uniqueKeys = create(null);
  function makeUniqueKey() {
    do
      var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
 while (hasOwn.call(uniqueKeys, uniqueKey));
    return uniqueKeys[uniqueKey] = uniqueKey;
  }
  function internString(str) {
    var obj = {};
    obj[str] = true;
    return Object.keys(obj)[0];
  }
  defProp(exports, "makeUniqueKey", makeUniqueKey);
  var originalGetOPNs = Object.getOwnPropertyNames;
  Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
    for (var names = originalGetOPNs(object),
        src = 0,
        dst = 0,
        len = names.length; src < len; ++src) {
      if (!hasOwn.call(uniqueKeys, names[src])) {
        if (src > dst) {
          names[dst] = names[src];
        }
        ++dst;
      }
    }
    names.length = dst;
    return names;
  };
  function defaultCreatorFn(object) {
    return create(null);
  }
  function makeAccessor(secretCreatorFn) {
    var brand = makeUniqueKey();
    var passkey = create(null);
    secretCreatorFn = secretCreatorFn || defaultCreatorFn;
    function register(object) {
      var secret;
      function vault(key, forget) {
        if (key === passkey) {
          return forget ? secret = null : secret || (secret = secretCreatorFn(object));
        }
      }
      defProp(object, brand, vault);
    }
    function accessor(object) {
      if (!hasOwn.call(object, brand))
        register(object);
      return object[brand](passkey);
    }
    accessor.forget = function(object) {
      if (hasOwn.call(object, brand))
        object[brand](passkey, true);
    };
    return accessor;
  }
  defProp(exports, "makeAccessor", makeAccessor);
  return module.exports;
});

$__System.registerDynamic("1cc", ["@node/assert", "9", "f5", "f7", "fa", "f9", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  var _assert = $__require('@node/assert');
  var _assert2 = _interopRequireDefault(_assert);
  var _babelTypes = $__require('9');
  var t = _interopRequireWildcard(_babelTypes);
  var _hoist = $__require('f5');
  var _emit = $__require('f7');
  var _util = $__require('fa');
  var util = _interopRequireWildcard(_util);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var getMarkInfo = $__require('f9').makeAccessor();
  exports.visitor = {Function: {exit: function exit(path, state) {
        var node = path.node;
        if (node.generator) {
          if (node.async) {
            if (state.opts.asyncGenerators === false)
              return;
          } else {
            if (state.opts.generators === false)
              return;
          }
        } else if (node.async) {
          if (state.opts.async === false)
            return;
        } else {
          return;
        }
        var contextId = path.scope.generateUidIdentifier("context");
        var argsId = path.scope.generateUidIdentifier("args");
        path.ensureBlock();
        var bodyBlockPath = path.get("body");
        if (node.async) {
          bodyBlockPath.traverse(awaitVisitor);
        }
        bodyBlockPath.traverse(functionSentVisitor, {context: contextId});
        var outerBody = [];
        var innerBody = [];
        bodyBlockPath.get("body").forEach(function(childPath) {
          var node = childPath.node;
          if (node && node._blockHoist != null) {
            outerBody.push(node);
          } else {
            innerBody.push(node);
          }
        });
        if (outerBody.length > 0) {
          bodyBlockPath.node.body = innerBody;
        }
        var outerFnExpr = getOuterFnExpr(path);
        t.assertIdentifier(node.id);
        var innerFnId = t.identifier(node.id.name + "$");
        var vars = (0, _hoist.hoist)(path);
        var didRenameArguments = renameArguments(path, argsId);
        if (didRenameArguments) {
          vars = vars || t.variableDeclaration("var", []);
          vars.declarations.push(t.variableDeclarator(argsId, t.identifier("arguments")));
        }
        var emitter = new _emit.Emitter(contextId);
        emitter.explode(path.get("body"));
        if (vars && vars.declarations.length > 0) {
          outerBody.push(vars);
        }
        var wrapArgs = [emitter.getContextFunction(innerFnId), node.generator ? outerFnExpr : t.nullLiteral(), t.thisExpression()];
        var tryLocsList = emitter.getTryLocsList();
        if (tryLocsList) {
          wrapArgs.push(tryLocsList);
        }
        var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap", state.file.get("regeneratorIdentifier")), wrapArgs);
        outerBody.push(t.returnStatement(wrapCall));
        node.body = t.blockStatement(outerBody);
        var wasGeneratorFunction = node.generator;
        if (wasGeneratorFunction) {
          node.generator = false;
        }
        if (node.async) {
          node.async = false;
        }
        if (wasGeneratorFunction && t.isExpression(node)) {
          path.replaceWith(t.callExpression(util.runtimeProperty("mark", state.file.get("regeneratorIdentifier")), [node]));
        }
        path.requeue();
      }}};
  function getOuterFnExpr(funPath) {
    var node = funPath.node;
    t.assertFunction(node);
    if (!node.id) {
      node.id = funPath.scope.parent.generateUidIdentifier("callee");
    }
    if (node.generator && t.isFunctionDeclaration(node)) {
      var pp = funPath.findParent(function(path) {
        return path.isProgram() || path.isBlockStatement();
      });
      if (!pp) {
        return node.id;
      }
      var markDecl = getRuntimeMarkDecl(pp);
      var markedArray = markDecl.declarations[0].id;
      var funDeclIdArray = markDecl.declarations[0].init.callee.object;
      t.assertArrayExpression(funDeclIdArray);
      var index = funDeclIdArray.elements.length;
      funDeclIdArray.elements.push(node.id);
      return t.memberExpression(markedArray, t.numericLiteral(index), true);
    }
    return node.id;
  }
  function getRuntimeMarkDecl(blockPath) {
    var block = blockPath.node;
    _assert2.default.ok(Array.isArray(block.body));
    var info = getMarkInfo(block);
    if (info.decl) {
      return info.decl;
    }
    info.decl = t.variableDeclaration("var", [t.variableDeclarator(blockPath.scope.generateUidIdentifier("marked"), t.callExpression(t.memberExpression(t.arrayExpression([]), t.identifier("map"), false), [util.runtimeProperty("mark", state.file.get("regeneratorIdentifier"))]))]);
    blockPath.unshiftContainer("body", info.decl);
    return info.decl;
  }
  function renameArguments(funcPath, argsId) {
    var state = {
      didRenameArguments: false,
      argsId: argsId
    };
    funcPath.traverse(argumentsVisitor, state);
    return state.didRenameArguments;
  }
  var argumentsVisitor = {
    "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
      path.skip();
    },
    Identifier: function Identifier(path, state) {
      if (path.node.name === "arguments" && util.isReference(path)) {
        path.replaceWith(state.argsId);
        state.didRenameArguments = true;
      }
    }
  };
  var functionSentVisitor = {MetaProperty: function MetaProperty(path) {
      var node = path.node;
      if (node.meta.name === "function" && node.property.name === "sent") {
        path.replaceWith(t.memberExpression(this.context, t.identifier("_sent")));
      }
    }};
  var awaitVisitor = {
    Function: function Function(path) {
      path.skip();
    },
    AwaitExpression: function AwaitExpression(path) {
      var argument = path.node.argument;
      path.replaceWith(t.yieldExpression(t.callExpression(util.runtimeProperty("awrap", state.file.get("regeneratorIdentifier")), [argument]), false));
    }
  };
  return module.exports;
});

$__System.registerDynamic("@system-env", [], false, function() {
  return {
    "production": true,
    "browser": false,
    "node": true
  };
});

$__System.registerDynamic("3", ["@system-env"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var productionEnv = $__require('@system-env').production;
  var pEnv = process.env;
  pEnv.NODE_ENV = productionEnv ? 'production' : 'development';
  module.exports = global.process;
  return module.exports;
});

$__System.registerDynamic("1cd", ["1cc", "3"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("3");
  var define,
      global = this,
      GLOBAL = this;
  exports.__esModule = true;
  exports.default = function() {
    return $__require('1cc');
  };
  module.exports = exports["default"];
  return module.exports;
});

$__System.register("1", ["a5", "a7", "a9", "ab", "b6", "b7", "bb", "c4", "c5", "c6", "c7", "c8", "d0", "d1", "d2", "d3", "d4", "d5", "df", "e0", "e1", "e6", "e7", "f3", "1cd"], function($__export) {
  "use strict";
  var babel,
      modulesRegisterPlugin,
      modulesRegister,
      externalHelpersPlugin,
      externalHelpers,
      runtimeTransformPlugin,
      runtimeTransform,
      templateLiterals,
      literals,
      functionName,
      arrowFunctions,
      blockScopedFunctions,
      classes,
      objectSuper,
      shorthandProperties,
      computedProperties,
      forOf,
      stickyRegex,
      unicodeRegex,
      constants,
      spread,
      parameters,
      destructuring,
      blockScoping,
      regenerator,
      es2015Plugins,
      regeneratorPlugin,
      presetES2015,
      presetES2015Register;
  return {
    setters: [function($__m) {
      babel = $__m;
    }, function($__m) {
      modulesRegisterPlugin = $__m.default;
    }, function($__m) {
      externalHelpersPlugin = $__m.default;
    }, function($__m) {
      runtimeTransformPlugin = $__m.default;
    }, function($__m) {
      $__export({pluginsStage1: $__m.plugins});
    }, function($__m) {
      $__export({pluginsStage2: $__m.plugins});
    }, function($__m) {
      $__export({pluginsStage3: $__m.plugins});
    }, function($__m) {
      templateLiterals = $__m.default;
    }, function($__m) {
      literals = $__m.default;
    }, function($__m) {
      functionName = $__m.default;
    }, function($__m) {
      arrowFunctions = $__m.default;
    }, function($__m) {
      blockScopedFunctions = $__m.default;
    }, function($__m) {
      classes = $__m.default;
    }, function($__m) {
      objectSuper = $__m.default;
    }, function($__m) {
      shorthandProperties = $__m.default;
    }, function($__m) {
      computedProperties = $__m.default;
    }, function($__m) {
      forOf = $__m.default;
    }, function($__m) {
      stickyRegex = $__m.default;
    }, function($__m) {
      unicodeRegex = $__m.default;
    }, function($__m) {
      constants = $__m.default;
    }, function($__m) {
      spread = $__m.default;
    }, function($__m) {
      parameters = $__m.default;
    }, function($__m) {
      destructuring = $__m.default;
    }, function($__m) {
      blockScoping = $__m.default;
    }, function($__m) {
      regenerator = $__m.default;
    }],
    execute: function() {
      $__export("babel", babel);
      modulesRegister = {plugins: [modulesRegisterPlugin]};
      $__export("modulesRegister", modulesRegister);
      externalHelpers = {plugins: [externalHelpersPlugin]};
      $__export("externalHelpers", externalHelpers);
      runtimeTransform = {plugins: [[runtimeTransformPlugin, {polyfill: false}]]};
      $__export("runtimeTransform", runtimeTransform);
      es2015Plugins = [templateLiterals, literals, functionName, arrowFunctions, blockScopedFunctions, classes, objectSuper, shorthandProperties, computedProperties, forOf, stickyRegex, unicodeRegex, constants, spread, parameters, destructuring, blockScoping];
      regeneratorPlugin = [regenerator, {
        async: false,
        asyncGenerators: false
      }];
      presetES2015 = {plugins: $traceurRuntime.spread(es2015Plugins, [regeneratorPlugin])};
      $__export("presetES2015", presetES2015);
      presetES2015Register = {plugins: $traceurRuntime.spread(es2015Plugins, [modulesRegisterPlugin, regeneratorPlugin])};
      $__export("presetES2015Register", presetES2015Register);
    }
  };
});

})
(function(factory) {
  define([], factory);
});